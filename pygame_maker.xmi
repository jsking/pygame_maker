<?xml version="1.0" encoding="UTF-8"?>
<XMI verified="false" xmi.version="1.2" timestamp="2016-12-10T14:42:29" xmlns:UML="http://schema.omg.org/spec/UML/1.3">
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://umbrello.kde.org</XMI.exporter>
   <XMI.exporterVersion>1.6.4</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel xmi.version="1.3" href="UML.xml" xmi.name="UML"/>
 </XMI.header>
 <XMI.content>
  <UML:Model isSpecification="false" isAbstract="false" isLeaf="false" xmi.id="m1" isRoot="false" name="UML Model">
   <UML:Namespace.ownedElement>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="folder" name="folder"/>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="datatype" name="datatype"/>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Logical View" name="Logical View">
     <UML:Namespace.ownedElement>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Datatypes" name="Datatypes">
       <UML:Namespace.ownedElement>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="DDBvBTHjr27F" name="int"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="69NwCU3eGoQx" name="char"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZCaMVQeibnbk" name="bool"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HtT6taKxhhtt" name="float"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9wWOiwJF9rZc" name="double"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="FDIq1uaGl3Kc" name="short"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="beZJJSARMgp2" name="long"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="b6HiwqIB2a21" name="unsigned int"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SaHBebnDGMUX" name="unsigned short"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mfy8JlAssPam" name="unsigned long"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GqxIRxJtYY5A" name="string"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7qNNDsvzVr6m" name="array"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dEfVeDFs4CAT" name="tuple"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ARKixNq4EDQP" name="dict"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3JMWAQJnfwGH" name="object"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7V99iHcqgvWd" name="set"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="I4V2yvLUjgbV" name=";"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KtnD5mmeXzoW" name="pygame.Surface"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CFr6jeMBJfYX" name="pygame.event.EventType"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="yfaaXCaCDHE9" name="undef"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MrW5KNn3d1gF" name="method"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uf5QGUH2nhjz" name="IOBase"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GeGG5XBU47Bb" name="pygame.Rect"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UF7jeoizRBjD" name="pygame.mixer.Sound"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4JeWXpQsAHVk" name="pygame.mixer.Channel"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="IMhWZ7tbOG7Z" xmi.id="yCcc76FNSvs0" parent="gQMJKbaS6hbm" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="R03svvsthTIg" name="GameEngine">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="8Tkpw3U4FmIk"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="vhL5z2EIDAUT" type="3Qfk5hbxOfv7" comment="The game's event engine for queuing, transmitting and receiving events" name="event_engine"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="acx2CwDdfaLK" type="YfJQ4mNWIUmA" comment="The game's language engine for executing code blocks" name="language_engine"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="fTL3COi743D3" type="AgBVKF36taGy" comment="The game's symbol table for keeping constants, such as mouse.x, mouse.y, and others the game resources may need" name="symbols"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="4RJHbll9NgBX" type="ARKixNq4EDQP" comment="The dict for organizing the game's resources, so each resource can find the others" initialValue="{'sprites':{}, 'sounds':{}, 'backgrounds':{}, 'objects':{}, 'rooms':[]}" name="resources"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="aMBFwUXaxrd9" type="ARKixNq4EDQP" comment="The dict containing the global game settings" name="game_settings"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="0V4sLmxddiqj" type="KtnD5mmeXzoW" comment="The main game screen created by :py:func:`pygame.display.set_mode`" initialValue="None" name="screen"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="clFp2Twp7ben" type="KtnD5mmeXzoW" comment="The surface drawn upon by other resources, copied to the main game screen each frame.  This makes it possible to create pygame sub-surfaces, which is not supported directly on hardware-accelerated screens" initialValue="None" name="draw_surface"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="kwGJwV1uLPp1" type="ZCaMVQeibnbk" comment="Set True to end the main game loop" initialValue="False" name="done"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="Kheq8qwkbBYd" type="7qNNDsvzVr6m" comment="The mouse coordinate saved each time a mouse motion event occurs" initialValue="[0,0]" name="mouse_pos"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="dURi35Vn1l4y" type="7qNNDsvzVr6m" comment="The list where pygame events get stored, so that the pygame event FIFO doesn't fill up" initialValue="[]" name="current_events"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="H5scVfcnKGeS" type="7qNNDsvzVr6m" comment="The list containing new objects whose creation was triggered by create_object type events" initialValue="[]" name="new_object_queue"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="4YBghjHIDi0F" type="DDBvBTHjr27F" comment="The index into the ``resources['rooms']`` list, updated when a new room is loaded" initialValue="0" name="room_index"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YabnNuWPodGE" comment="        Initialize the game engine instance.&#xa;: The game's event engine: The game's language engine: The game's symbol table for keeping constants, such as mouse.x,: mouse.y, and others the game resources may need: The dict for organizing the game's resources, so each resource: can find the others: The dict containing the game settings: The main game screen created by :py:func:`pygame.display.set_mode`: The surface drawn upon by other resources, copied to the main game: screen each frame.  This makes it possible to create pygame: sub-surfaces, which is not supported directly on hardware-: accelerated screens: Set True to end the main game loop: The mouse coordinate saved each time a mouse motion event occurs: The list where pygame events get stored, so that the pygame event: FIFO doesn't fill up: The list containing new objects whose creation was triggered by: create_object type events: The index into the ``resources['rooms']`` list, updated when a new: room is loaded: Store a :py:class:`pygame.time.Clock` instance, used for: controlling the frame rate Now that logging has been configured, initialize the LoggingObject base class." name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="06XT7LF7In0T" type="R03svvsthTIg"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xnocKu9qVlds" comment="        Collect the settings for the game itself, expected to be found in a&#xa;        file in the base game directory named ``game_settings.yaml``.&#xa;        The YAML format follows::&#xa;            game_name: &lt;name>&#xa;            screen_dimensions: [&lt;width>, &lt;height>]&#xa;            frames_per_second: &lt;positive integer>&#xa;            stylesheet: &lt;name of CSS-formatted file>&#xa;            logging_config:&#xa;              version: 1&#xa;              formatters:&#xa;                normal:&#xa;                  format: '%(name)s [%(levelname)s]:%(message)s'&#xa;                timestamped:&#xa;                  format: '%(asctime)s - %(name)s [%(levelname)s]:%(message)s'&#xa;              handlers:&#xa;                console:&#xa;                  class: logging.StreamHandler&#xa;                  level: WARNING&#xa;                  formatter: normal&#xa;                  stream: ext://sys.stdout&#xa;            # uncomment the lines below starting with 'file:' to create a log file&#xa;            # remember to change the 'handlers:' lines below to add the file handler, E.G.:&#xa;            # handlers: [console, file]&#xa;            #    file:&#xa;            #      class: logging.FileHandler&#xa;            #      level: WARNING&#xa;            #      formatter: timestamped&#xa;            #      filename: pygame_maker_game_engine.log&#xa;            #      mode: w&#xa;              loggers:&#xa;                GameEngine:&#xa;                  level: INFO&#xa;                  handlers: [console]&#xa;                CodeBlock:&#xa;                  level: INFO&#xa;                  handlers: [console]&#xa;                LanguageEngine:&#xa;                  level: INFO&#xa;                  handlers: [console]&#xa;                EventEngine:&#xa;                  level: INFO&#xa;                  handlers: [console]&#xa;                ObjectType:&#xa;                  level: INFO&#xa;                  handlers: [console]&#xa;                ObjectInstance:&#xa;                  level: INFO&#xa;                  handlers: [console]&#xa;                Room:&#xa;                  level: INFO&#xa;                  handlers: [console]&#xa;                CSSStyleParser:&#xa;                  level: INFO&#xa;                  handlers: [console]&#xa;" name="load_game_settings"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SPmkDmD8Zzir" comment="        Bring in resource YAML files from their expected directories:&#xa;        ``sprites/``, ``backgrounds/``, ``sounds/``, ``objects/``, and&#xa;        ``rooms/``&#xa; resource directories are expected to contain YAML descriptions  for each of their respective resource types.  Sprites and sounds  may also contain image or sound files, respectively, so filter  out files with other extensions.  Any file name(s) in the  resource directories ending in .yaml or .yml will be processed. need to chdir, since the filenames found in YAML resource  files are assumed to be relative to the YAML resource's path if multiple resources have the same name, the last one read in will override the others rooms are meant to stay in order" name="load_game_resources"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="yHqXQ0CsPyaa" comment="        Perform an action that is not specific to existing objects.&#xa;        Many actions are handled by object instances, but the rest must be&#xa;        handled here.&#xa;        :param action: The action instance to be executed&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa;        :param event: The event that triggered the action&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;        :param instance: If supplied, the object instance that initiated the&#xa;            action&#xa;        :type instance: :py:class:`~pygame_maker.actors.simple_object_instance.SimpleObjectInstance`&#xa; filter the action parameters create_object: connect the child instance to its parent that   forwarded this action print(&quot;Engine received action: {}&quot;.format(action))" name="execute_action">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Rzh2y0Vpt5U0" type="4xgAXrKwF8qC" value="" name="action"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="OKa3IDehCKh8" type="XWJw4Mll0gKA" value="" name="event"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TlMhf7A1Pi5f" type="fQNZeFNnd8xK" value="" name="instance"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="IFJGdPe1hsmx" comment="        Handle a keyboard event received from pygame.&#xa;        Pygame key codes will be translated into KeyEvents with _keyup or&#xa;        _keydn appended to the name based on the pygame event received.  If no&#xa;        keyboard event was received during the frame, fire off the kb_no_key&#xa;        event.&#xa;        :param key_event: The pygame keyboard event, or None to&#xa;            signal that no button event occurred during the frame.&#xa;        :type key_event: None | :py:class:`~pygame_maker.events.event.Event`&#xa; print(&quot;queue event: {}&quot;.format(ev)) print(&quot;xmit event: {}&quot;.format(key_event_name))" name="send_key_event">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rtZg8DcSGhVK" type="XWJw4Mll0gKA" value="" name="key_event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="odMVU9R9FKMO" comment="        Handle a mouse event received from pygame.&#xa;        Motion events will simply capture the x, y of the mouse cursor.  Button&#xa;        events will trigger MouseEvents of the appropriate global and instance&#xa;        press or release types.  If no button event was received, fire off the&#xa;        nobutton global and instance events.&#xa;        :param mouse_event: The pygame mouse event, or None to signal that no&#xa;            button event occurred during the frame.&#xa;        :type mouse_event: None | :py:class:`~pygame_maker.events.event.Event`&#xa; print(&quot;select mouse entries {}&quot;.format(ev_table_entry)) queue the instance version of the event (each object type  listening for this kind of event only passes it on  to instances that intersect with the mouse position) print(&quot;queue {}&quot;.format(event_names[-1])) print(&quot;queue {}&quot;.format(event_names[-1])) press/release events exist only for a subset print(&quot;queue {}&quot;.format(event_names[-1])) print(&quot;queue {}&quot;.format(event_names[-1])) print(&quot;queue {}&quot;.format(event_names[-1])) print(&quot;queue {}&quot;.format(event_names[-1])) transmit all queued event types" name="send_mouse_event">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="w2GhSF2ErPiL" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="L3753krpCsLz" type="XWJw4Mll0gKA" value="" name="mouse_event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="W7SlRm8se6ot" comment="        Called by :py:meth:`run` after pygame has been initialized.&#xa;        This is a good place to put any initialization that needs pygame to be&#xa;        set up already -- e.g. loading images and audio.&#xa;        :param screen: The main pygame display surface&#xa;        :type screen: :py:class:`pygame.Surface`&#xa;" name="setup">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0BIHqoooJtec" type="KtnD5mmeXzoW" value="" name="screen"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qC9TIxMeJo87" comment="        Call the ``setup()`` method of every resource type that supplies one.&#xa;" name="setup_game_resources"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Hmk7qmOgyX9F" comment="        Initialize the given room number.&#xa;        Create the room's objects and run its init block (if any).&#xa;        :param room_n: The number of the room to load (starting from 0)&#xa;        :type room_n: int&#xa; Create a new surface the same size as the room. This can differ from  the screen dimensions. Also, for HWSURFACE displays, this allows the  draw surface to be subsurface()'d, according to pygame documentation." name="load_room">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4gcU3ooGjO0O" type="DDBvBTHjr27F" value="" name="room_n"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KnjGIqTkKNUc" comment="        The pygame event queue will lose events unless they are handled.  This&#xa;        method is called by :py:meth:`run` to move the events out of pygame and&#xa;        into a list.&#xa;        :param event: The event received from pygame&#xa;        :type event: :py:class:`pygame.event.EventType`&#xa;" name="collect_event">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zsQvgvseYSC5" type="CFr6jeMBJfYX" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UTEnqiNBxSer" comment="        Called by :py:meth:`run()` to update all object instance positions.&#xa;        This is also a good time to check for any keyboard or mouse events, and&#xa;        to check for and send collision events.&#xa; keep track of whether any mouse button or key events have been  received this frame create any new objects that were queued by create_object* events clear the queue for next frame begin_step happens before other events no key events, so send the kb_no_key event no mouse button events, so send the nobutton events done with event handling normal_step happens before updating object instance positions perform position updates on all objects check for object instance collisions" name="update"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WQej4eFX7UKv" comment="Called by :py:meth:`run` to draw the foreground items. end_step happens just before drawing object instances" name="draw_objects"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="25iW9BQfa4Pe" comment="Called by :py:meth:`run` to draw the room background." name="draw_background"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="RJxlkzuk2aEC" comment=" copy the room's pixels onto the display" name="final_pass"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZpCgYZuzqpiY" name="is_done">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="maIpAWzt9oFq" type="ZCaMVQeibnbk"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1BDsGMnnCyTi" comment="        The main game event loop.&#xa;        Run :py:func:`pygame.init` first, then call :py:meth:`setup` to run&#xa;        all operations that require ``pygame.init()``, prior to entering the&#xa;        loop.&#xa; --- Main Loop --- --- Game Logic ---self.screen.fill(self.WHITE) --- Drawing --- update screen limit frame rate close window &amp; quit" name="run"/>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Package visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9EKEVIeMoVK1" name="logging_object">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="9EKEVIeMoVK1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="u3BVMyBlyFdr" name="lo2"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="R03svvsthTIg" xmi.id="8Tkpw3U4FmIk" parent="u3BVMyBlyFdr" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="fiyoWBeVKsNb" comment="    Manage log message indentation inside a ``with .. as`` statement.&#xa;" name="Indented">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="E9MO7q4cAjxJ"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="EZsMIneNbtMa" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="M3iVSDlgkb12" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="qPCUObfYhK1a" type="GqxIRxJtYY5A" value="" name="logger"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OfNzWkXM7hrV" name="__enter__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="JU1yo1Y84FdW" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QMBAxAAJpYGL" name="__exit__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="29Q1y6npLkio" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GngNTXqm1rio" type="GqxIRxJtYY5A" value="" name="a_type"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="qEwvTaPruY1q" type="GqxIRxJtYY5A" value="" name="value"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="iC9ViQryBXLe" type="GqxIRxJtYY5A" value="" name="traceback"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="fiyoWBeVKsNb" xmi.id="E9MO7q4cAjxJ" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="I7eCef2MpAsX" xmi.id="YhVjCoOCvmDu" parent="gQMJKbaS6hbm" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pzMRw8LFY9X3" comment="    Base class for objects that provides logging with indentation.&#xa;    Log messages will include a suffix [``name``] for any subclass instance&#xa;    that has a ``name`` attribute.&#xa;" name="LoggingObject">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="X0RsqexFZdAt"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5lEcOMVSgWmR" comment="        Initialize logging.&#xa;        :param logger_name: The name supplied to getLogger() that can be&#xa;            configured from the main application&#xa;        :type logger_name: str&#xa;: The name of this object's logger: The current indent level: The logging object: The number of spaces to indent by" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="eQgnpWmuHyUd" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2jzU3zuSJWQk" type="GqxIRxJtYY5A" value="" name="logger_name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Lz5zTpQUZNya" comment="Increase the indentation one level." name="bump_indent_level">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Lr2cNTK1r0pg" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UZYjY2MrzPoT" comment="Decrease the indentation one level." name="drop_indent_level">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="CCxlZvJukMU7" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="po7eouKITszz" name="_get_format_string">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="DyEvKj17X8lK" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="uLoticMvoHeM" type="GqxIRxJtYY5A" value="" name="message"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="05aTxaRptDic" comment="        Log a debug message, using the current indentation level.&#xa;        :param message: Message to be logged&#xa;" name="debug">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="sSUNYFhYIGzD" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="o3VaK9wV5BRP" type="GqxIRxJtYY5A" value="" name="message"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="oO2hcjHQmk04" comment="        Log an info message, using the current indentation level.&#xa;        :param message: Message to be logged&#xa;" name="info">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="51VLFSZ3rZkT" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="uvaz6zNyPpJx" type="GqxIRxJtYY5A" value="" name="message"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="I0r2kp7ckfaq" comment="        Log a warning message, using the current indentation level.&#xa;        :param message: Message to be logged&#xa;" name="warn">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="tiLiH3BY10am" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="cvm1k4yp5R9I" type="GqxIRxJtYY5A" value="" name="message"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qfOaIwPur9vc" comment="        Log an error message, using the current indentation level.&#xa;        :param message: Message to be logged&#xa;" name="error">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="v22w0agqG3RY" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DrPGIYYAGrsW" type="GqxIRxJtYY5A" value="" name="message"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zoRrvMR9EqPU" comment="        Log a critical error message, using the current indentation level.&#xa;        :param message: Message to be logged&#xa;" name="critical">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="kHKyKjUIXv7S" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NwcbnT7gV9bV" type="GqxIRxJtYY5A" value="" name="message"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="pzMRw8LFY9X3" xmi.id="X0RsqexFZdAt" parent="3JMWAQJnfwGH" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GYZSMxwjtXLe" name="ElementPrioritizerTable">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="0QLVYuyGBIEU"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="A7yLNAnNrXtP" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="OoDlJTVkdw5J" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="i20sI9bSGZld" comment=" print(&quot;Add {} to element table..&quot;.format(element)) print(&quot;Test element {} against {}&quot;.format(element, fset)) attribute comparisons are prioritized separately" name="add_element">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ejkFfnYLnXE3" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="kZ0b6syVgBEz" type="GqxIRxJtYY5A" value="" name="element"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gnVwMEZ6nafs" name="attribute_match">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="4rgqPJipv1th" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QdL6mZ4QJmew" type="GqxIRxJtYY5A" value="" name="element"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XCGKhSNNFqJZ" type="GqxIRxJtYY5A" value="" name="attribute_dict"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="av6rhkmEu2Wc" comment=" reset matched if 2 or more properties must match print(&quot;matched type {}&quot;.format(element_type)) print(&quot;matched class {}&quot;.format(element_class)) print(&quot;matched pclass {}&quot;.format(pseudo_class)) print(&quot;matched id {}&quot;.format(element_id)) print(&quot;matched attribute {}&quot;.format(attribute_dict))" name="element_matched">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="HooNjMstcA0r" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="StxhhHGk6uaV" type="GqxIRxJtYY5A" value="" name="element"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CGK7HDmp9sho" type="GqxIRxJtYY5A" value="" name="match_props"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="aT1VTX5vP2a4" type="GqxIRxJtYY5A" value="" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MkhTdMHDpGgI" comment="        Match the element properties supplied in kwargs, starting from&#xa;        highest-precedence to lowest of the elements stored in the element&#xa;        table.&#xa;        :param kwargs: Supply one or more of the following::&#xa;        &#xa;            * pseudo_class: The name of a pseudo class to match&#xa;            * element_type: An element type&#xa;            * element_class: An element class&#xa;            * element_id: An element id&#xa;            * attribute_dict: A dict mapping an element's attribute values&#xa; print(&quot;Test element {} against {}&quot;.format(element, prop))" name="priority_match">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="OD7zM5qiqVBT" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ojBBklFzZ2NG" type="GqxIRxJtYY5A" value="" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rQegfJwT25ck" name="pretty_print">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="qpkOr7cGIkFe" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="GYZSMxwjtXLe" xmi.id="0QLVYuyGBIEU" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="p3KdZT6Quj5Z" xmi.id="2z025antPXHF" parent="3JMWAQJnfwGH" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="r5GhteShLgB3" name="CSSStyleParser">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Y7Qv5wNY7qak"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OzhVpFFSploL" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ubj7glCLHxLQ" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uO7xsj4GgjjW" comment="        Append this value to the current value list.&#xa;        :param parsestr: The string parsed by PyParsing&#xa;        :param loc: The location within the string&#xa;        :param toks: The tokens supplied by PyParsing&#xa;" name="push_value">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rEwA3b8dOOSA" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ywwofi7ZJqfx" type="GqxIRxJtYY5A" value="" name="parsestr"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="apIrmdFe2Kas" type="GqxIRxJtYY5A" value="" name="loc"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3e6iNnCLj87O" type="GqxIRxJtYY5A" value="" name="toks"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2gn20Ns21ykM" comment="        Store the list of identifiers found in front of a CSS block.&#xa;        :param parsestr: The string parsed by PyParsing&#xa;        :param loc: The location within the string&#xa;        :param toks: The tokens supplied by PyParsing&#xa;" name="push_ident_list">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="nMKp6MpOWV53" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lwhS2not1k22" type="GqxIRxJtYY5A" value="" name="parsestr"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="JAfhY6qYmdak" type="GqxIRxJtYY5A" value="" name="loc"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0QmzOUL7Q0XT" type="GqxIRxJtYY5A" value="" name="toks"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZtbJWA3UaqRx" comment="        Set the current parameter name.&#xa;        :param parsestr: The string parsed by PyParsing&#xa;        :param loc: The location within the string&#xa;        :param toks: The tokens supplied by PyParsing&#xa;" name="push_param_name">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="8Vo2x70kIN4u" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Im2jlaAYuUL0" type="GqxIRxJtYY5A" value="" name="parsestr"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pBOJeSMDLwUq" type="GqxIRxJtYY5A" value="" name="loc"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4XIcLkZeUaLF" type="GqxIRxJtYY5A" value="" name="toks"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nQ58MZwO7F1Q" comment="        After a parameter has been completely parsed, add it to the style&#xa;        block.&#xa;        :param parsestr: The string parsed by PyParsing&#xa;        :param loc: The location within the string&#xa;        :param toks: The tokens supplied by PyParsing&#xa; clear the name for the next parameter clear the value list for the next parameter" name="push_parameter">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="MkeADtwm6Tbg" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zY4T8NhEqTEm" type="GqxIRxJtYY5A" value="" name="parsestr"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="aFWraalN1rVL" type="GqxIRxJtYY5A" value="" name="loc"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QSkVflweJy5Q" type="GqxIRxJtYY5A" value="" name="toks"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3M34BWOaw83b" comment="        After an entire block has been parsed, add its entries to the table.&#xa;        :param parsestr: The string parsed by PyParsing&#xa;        :param loc: The location within the string&#xa;        :param toks: The tokens supplied by PyParsing&#xa; clear the identifier list for the next block clear the style block for the next block" name="push_param_block">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="GsnF3BS3WP9K" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rxD8wHYG1BQD" type="GqxIRxJtYY5A" value="" name="parsestr"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2Nz6qamrunu4" type="GqxIRxJtYY5A" value="" name="loc"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HIeEOfnDdzLX" type="GqxIRxJtYY5A" value="" name="toks"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xtCse6wvMY7k" name="missing_or_bad_value">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="K08TH7Fc2vJR" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DtxosGL886L9" type="GqxIRxJtYY5A" value="" name="s"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="IoCmDJ7BAJ1m" type="GqxIRxJtYY5A" value="" name="loc"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NvghRnRcgMRY" type="GqxIRxJtYY5A" value="" name="expr"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ckejr0s9m3tz" type="GqxIRxJtYY5A" value="" name="err"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hk4N4TufDWO4" name="clear">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="WEBGH5Ea5K3L" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="p3KdZT6Quj5Z" comment=" properties override others" name="CSSStyle">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="2z025antPXHF"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Gekf9zujrNbR" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="58rpys9HzqSo" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cAcOqTC67wjE" name="add_element">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="s1qrqIdSQGoG" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="uexlzZB5f2ub" type="GqxIRxJtYY5A" value="" name="element"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="j1Mpv43pi1Zf" comment="        Collect the style parameters according to specified selector&#xa;        information.&#xa;        :param kwargs: Supply one or more of the following::&#xa;        &#xa;            * pseudo_class: The name of a pseudo class to match&#xa;            * element_type: An element type&#xa;            * element_class: An element class&#xa;            * element_id: An element id&#xa;            * attribute_dict: A dict mapping an element's attribute values&#xa;" name="get_style">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="w7sKNhZ4gvtb" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YkiDkcpccfTQ" type="GqxIRxJtYY5A" value="" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zxRfwyLUi3fS" name="copy">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="9t0pptRmqqQm" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="eU4E8Ve2aUKv" type="GqxIRxJtYY5A" value="" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ojEWkuwMM0YU" name="pretty_print">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="TAU4fpzoizeV" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="r5GhteShLgB3" xmi.id="Y7Qv5wNY7qak" parent="p3KdZT6Quj5Z" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SIxSCHut1yE4" name="CSSStyleGenerator">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="R8hed3h7HsOX"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="MNZbGx8BXFAT" comment=" print(&quot;CSS parse tree:\n{}&quot;.format(astree))" name="get_css_style">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="KpYr3hIQB8Ev" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PUqomfQKOus3" type="GqxIRxJtYY5A" value="" name="cls"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="cU7Olnq5BPhP" type="GqxIRxJtYY5A" value="" name="css_string_data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="nfG9X8A7bHVK" comment="    * decimal_digit   :: '0' .. '9'&#xa;    * sign            :: '-' | '+'&#xa;    * integer         :: decimal_digit+&#xa;    * float           :: [ sign ] integer '.' [ integer ] [ 'e' | 'E' [ sign ] integer ]&#xa;    * lower_case      :: 'a' .. 'z'&#xa;    * upper_case      :: 'A' .. 'Z'&#xa;    * alpha           :: lower_case | upper_case&#xa;    * punctuation     :: '`' | '~' | '!' | '@' | '#' | '$' | '%' | '^' | '&amp;' | '*' | '(' | ')' | '_' | '=' |&#xa;                         '+' | ';' | ':' | '\'' | ',' | '&lt;' | '.' | '>' | '/' | '?' | ' ' | '-'&#xa;    * string_delim    :: '&quot;' | '\''&#xa;    * string          :: string_delim [ alpha | decimal_digit | punctuation ]* string_delim&#xa;    * identifier      :: '_' | alpha [ alpha | decimal_digit | '_' ]*&#xa;    * attr_selector   :: '[' + identifier [ [ '~' | '*' | '^' | '$' | '|' ] '=' string ] ']'&#xa;    * class_or_id     :: ( '#' | '.' ) identifier&#xa;    * pseudo_class    :: ':' alpha [ alpha | '-' ]* [ '(' integer | identifier ')' ]&#xa;    * selector        :: identifier [ class_or_id | attr_selector ] [ pseudo_class ] [ identifier [ pseudo_class ] ]&#xa;    * parameter_name  :: alpha [ alpha | decimal_digit | '_' | '-' ]*&#xa;    * lower_hex       :: 'a' .. 'f'&#xa;    * upper_hex       :: 'A' .. 'F'&#xa;    * hex_digit       :: decimal_digit | lower_hex | upper_hex&#xa;    * color           :: '#' hex_digit * 6&#xa;    * comment         :: '/' '*' .*? '*' '/'&#xa;    * url             :: 'url' '(' string ')'&#xa;    * pixel_count     :: integer 'px'&#xa;    * percentage      :: integer '%'&#xa;    * parameter_val   :: url | color | pixel_count | percentage | parameter_name | float | integer&#xa;    * parameter       :: parameter_name ':' [ comment* ]* parameter_val [ parameter_val | comment* ]+ ';'&#xa;    * parameter_block :: selector [ ',' selector ]* '{' ( parameter | comment* )+ '}'&#xa;&quot;+&quot;.&quot;, &quot;_&quot;+alphas+nums)&quot;, hexnums, exact=7 )" name="BNF">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="mAKwGYr2B5Bg" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3JOCi5Z0s5rv" type="GqxIRxJtYY5A" value="" name="css_style_obj"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="SIxSCHut1yE4" xmi.id="R8hed3h7HsOX" parent="3JMWAQJnfwGH" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CMnlbH5eaToH" comment="    Record an x,y location.&#xa;    Allows for running callback methods when x and/or y are changed.&#xa;" name="Coordinate">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="WNHNT7GDFa9T"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Bc5QDDuKCPcE" comment="        Store an x, y coordinate.&#xa;        :param x: X component&#xa;        :type x: int | float&#xa;        :param y: Y component&#xa;        :type y: int | float&#xa;        :param x_change_callback: A callable to execute when the X component&#xa;            changes&#xa;        :type x_change_callback: callable&#xa;        :param y_change_callback: A callable to execute when the Y component&#xa;            changes&#xa;        :type y_change_callback: callable&#xa;" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="0ixPnJFyvJN8" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4ZT5IQiJTxry" type="GqxIRxJtYY5A" value="" name="x"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WFQge3shaJms" name="x">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="kUADR19Qi6nV" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="P3TLMqRq5sUi" name="x">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="TlRBpFeDI8Wc" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tMNRg9KQeSb3" type="GqxIRxJtYY5A" value="" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wxQ0nuggG36u" name="y">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="CQIosuqJdHTQ" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="W7dmF9MA5kAq" name="y">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="yg8ZxbzSjdCw" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="eqVttbn3z4sp" type="GqxIRxJtYY5A" value="" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kX6nHEew47nv" comment="        Support index form coordinate[0] for x or coordinate[1] for y.&#xa;        :param itemkey: Must be 0 or 1&#xa;        :type itemkey: int&#xa;        :raise: IndexError if itemkey is not 0 or 1&#xa;        :return: The value of coordinate[0] or coordinate[1]&#xa;        :rtype: int | float&#xa;" name="__getitem__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="E7svi3rSawEr" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="iYzfcpUaVc7Q" type="GqxIRxJtYY5A" value="" name="itemkey"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="AqlDxY8d75Ih" comment="        Support index form coordinate[0] for x or coordinate[1] for y.&#xa;        :param itemkey: Must be 0 or 1&#xa;        :type itemkey: int&#xa;        :param value: New value for coordinate 0 or 1&#xa;        :type value: int | float&#xa;        :raise: ValueError if value is not a Number&#xa;        :raise: IndexError if itemkey is not 0 or 1&#xa;" name="__setitem__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="NhDSkT9dDPyZ" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="smGLMNmYUcTC" type="GqxIRxJtYY5A" value="" name="itemkey"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="fJdDFr5Nfqaa" type="GqxIRxJtYY5A" value="" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nk8FLZS0s3E5" comment="A coordinate always has 2 items: x and y." name="__len__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="sHRX517SgIuR" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="j24wR0VClbS4" name="__repr__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Bs41vG7nXYIb" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="CMnlbH5eaToH" xmi.id="WNHNT7GDFa9T" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="XN3EdwfMyhIN" xmi.id="hnaQN2UYuZZn" parent="gQMJKbaS6hbm" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jq6bNgO9KwST" name="Color">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="kMBvF5j7crsq"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="ngVNXNBoPuH9" name="is_known_color">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="jtN6neElwpdL" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0KbsRd7F4WLO" type="GqxIRxJtYY5A" value="" name="cls"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KuRVcOtN3Oka" type="GqxIRxJtYY5A" value="" name="color_name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QlaUFtrZlG2L" comment="        Initialize a new Color.&#xa;        The color can be specified as:&#xa;        * a color name&#xa;        * a 3-tuple of R, G, and B values&#xa;        * a 4-tuple of R, G, B, and A values&#xa;        * by a string #RRGGBB, as in HTML (2 additional alpha digits can be&#xa;          appended)&#xa;        This class wraps pygame.Color, until such time as it is possible to&#xa;        subclass pygame.Color without crashing the script with an uncatchable&#xa;        ValueError when unknown color names are specified.&#xa;        :param params: Contains one of the following:&#xa;            * A string containing a color name&#xa;            * A string containing #RRGGBB (optionally with alpha digits)&#xa;            * A 3-element list specifying red, green, and blue values&#xa;            * A 4-element list specifying red, green, blue and alpha values&#xa;            * Individual color component values as arguments instead of in&#xa;              a list&#xa; print(&quot;Passing named color {} as {} to pygame.Color&quot;.format(params[0], color_str)) accept a single list as the first parameter" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="DJq96USXD1zS" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="evgfHQEzJb55" type="GqxIRxJtYY5A" value="" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uo1e42xhveMB" name="red">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2aAK9DPMVFTb" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hw6ux6KpsKRx" name="red">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="mk1H0SqfOvYJ" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MPcH1wQ3VYNe" type="GqxIRxJtYY5A" value="" name="red"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zs9rCYmWxOmy" name="green">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="JC0olNSV8Rk6" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ualGTJaSAhKM" name="green">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="V23bUnhMMQcp" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="F6tBTd9mp7aY" type="GqxIRxJtYY5A" value="" name="green"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iAIsraE5g5G9" name="blue">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="iNvWVT2yW6Zy" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rEIBes1M3HEs" name="blue">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="0hyUnXQdjioN" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rRxVUBdBZWf2" type="GqxIRxJtYY5A" value="" name="blue"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="anib2uUrJPNm" name="alpha">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="b0x8WcAUJ8y5" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dOgM6UhfGNGI" name="alpha">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="qzS85QDgnt0r" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GkAXAVJjTGrx" type="GqxIRxJtYY5A" value="" name="alpha"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LhWb3lsHT0ob" comment="The color as a 3-tuple of R, G, B values" name="rgb">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="T8KwM9rD8JLD" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iWrTNrKiXpIa" comment="The color as a 3-tuple of R, G, B values" name="rgba">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="a8r16ddZlxT6" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="jq6bNgO9KwST" xmi.id="kMBvF5j7crsq" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="7KJDccPI8GlT" xmi.id="859fsPDSX2Ud" parent="gQMJKbaS6hbm" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Usx1sPdWUnvV" name="Room">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="PMYN8rvUVlwQ"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="1K0Me6cGTovH" type="GqxIRxJtYY5A" comment="Name the room will be referenced by in other code" name="name"/>
        <UML:Attribute visibility="implementation" isSpecification="false" xmi.id="x1WD8Haj3eix" type="R03svvsthTIg" comment="Handle to the main game engine" name="game_engine"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="phLtM3qcPzFh" type="DDBvBTHjr27F" comment="Room's width in pixels" initialValue="640" name="width"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="OUwAjXX3k9qk" type="DDBvBTHjr27F" comment="Room's height in pixels" initialValue="480" name="height"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="fsgCQqoEX97r" type="DDBvBTHjr27F" comment="Speed of action in the room, in frames per second" initialValue="30" name="frame_rate"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="AvUZsjEGBAPs" type="ZCaMVQeibnbk" comment="Record the room's state when leaving, and restore it when the room is loaded again later" initialValue="False" name="persistent"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="Wh6vf0cxQdkM" type="7qNNDsvzVr6m" comment="The list of object instances to create when the room loads" initialValue="[]" name="init_object_instances"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="4qBmg1uIGEK9" type="7qNNDsvzVr6m" comment="The list of object instances inside the room" initialValue="[]" name="object_instance"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="4VsU3VYZAeSn" type="7JL0dW5tx0Sk" comment="The Background instance to draw" name="background"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="FhdOJ5BuAusp" type="ZCaMVQeibnbk" comment="True if a background color should be painted" initialValue="True" name="draw_background_color"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="PDXgj1fFQv01" type="ZCaMVQeibnbk" comment="True if the background should be tiled horizontally" initialValue="False" name="tile_horizontal"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="UvgXfpdtVGFm" type="ZCaMVQeibnbk" comment="True if the background should be tiled vertically" initialValue="False" name="tile_vertical"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="MQeUIXJhkrLS" type="ZCaMVQeibnbk" comment="True if the background should be stretched to fit the room" initialValue="False" name="stretch"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="q1hGufFMYvuE" type="jq6bNgO9KwST" comment="The background color to paint, if draw_background_color is True" initialValue="Color((0,0,0))" name="background_color"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="jV5CmKy6iba1" type="7qNNDsvzVr6m" comment="The upper left pixel coordinate to draw the background at" initialValue="[0,0]" name="background_offsets"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="8rgsg2KV1zlv" type="ZCaMVQeibnbk" comment="True if the background will be drawn" initialValue="True" name="background_visible"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="f1HDuBPdhSnR" type="GeGG5XBU47Bb" comment="A pygame Rect representing the snap grid width, height, and upper left coordinate" initialValue="(0,0,16,16)" name="grid"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="mkXTL5STu8JZ" type="DDBvBTHjr27F" comment="The width of the background, determined after its image is loaded" initialValue="0" name="bkg_width"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="8e49bn4EmMSh" type="DDBvBTHjr27F" comment="The height of the background, determined after its image is loaded" initialValue="0" name="bkg_height"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="VpIAI6Z2q4T9" type="DDBvBTHjr27F" comment="The width of the surface drawn to, cached the first time the room is drawn" initialValue="0" name="disp_width"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="7vc22vZAXbK7" type="DDBvBTHjr27F" comment="The height of the surface drawn to, cached the first time the room is drawn" initialValue="0" name="disp_height"/>
        <UML:Attribute visibility="protected" isSpecification="false" xmi.id="hwtQ3hAjZqty" type="GqxIRxJtYY5A" comment="Code string that will be executed when the room is loaded" initialValue="&quot;&quot;" name="_init_code"/>
        <UML:Attribute visibility="protected" isSpecification="false" xmi.id="MZuxeEoo6gn3" type="GeGG5XBU47Bb" comment="A pygame.Rect containing the width, height, and upper left coordinate of the cached background" initialValue="(0,0,0,0)" name="_cached_rect"/>
        <UML:Attribute visibility="protected" isSpecification="false" xmi.id="OML9gnqAb6Kr" type="DDBvBTHjr27F" comment="Shadow the 0th element of the background_offsets array (property)" initialValue="0" name="_background_horizontal_offset"/>
        <UML:Attribute visibility="protected" isSpecification="false" xmi.id="AutyyL76Gj6I" type="DDBvBTHjr27F" comment="Shadow the 1st element of the background_offsets array (property)" initialValue="0" name="_background_vertical_offset"/>
        <UML:Attribute visibility="protected" isSpecification="false" xmi.id="ddR8EjFc5blm" type="KtnD5mmeXzoW" comment="A pygame.Surface to draw the background on once, and reuse afterwards" initialValue="None" name="_cached_background"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="EO8j729RraQk" comment="        Create room(s) from a YAML-formatted file.&#xa;        Expected format (missing fields will receive default values)::&#xa;            - rm_name1:&#xa;                width: &lt;# >= 0>&#xa;                height: &lt;# >= 0>&#xa;                speed: &lt;number>&#xa;                persistent: True | False&#xa;                init_code: |&#xa;                    code block...&#xa;                background: &lt;background_resource_name>&#xa;                background_color: &lt;#RRGGBB | (R, G, B)>&#xa;                draw_background_color: True | False&#xa;                background_horizontal_offset: &lt;# >= 0>&#xa;                background_vertical_offset: &lt;# >= 0>&#xa;                background_visible: True | False&#xa;                tile_horizontal: True | False&#xa;                tile_vertical: True | False&#xa;                stretch: True | False&#xa;                grid_x_offset: &lt;# >= 0>&#xa;                grid_y_offset: &lt;# >= 0>&#xa;                grid_width: &lt;# >= 0>&#xa;                grid_height: &lt;# >= 0>&#xa;                object_instances:&#xa;                    - &lt;obj_resource_name>:&#xa;                        position: [&lt;pos_x>,&lt;pos_y>]&#xa;                        init_code: |&#xa;                          init_code_block&#xa;        :param yaml_stream: The stream containing YAML-formatted strings&#xa;        :type yaml_stream: file-like&#xa;        :param game_engine: The game engine instance, which allows each Room&#xa;            instance to find other game resources&#xa;        :type game_engine: GameEngine&#xa;        :return: A list of valid rooms found in the YAML string&#xa;        :rtype: list&#xa;" name="load_from_yaml">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="OrkFP80534iQ" type="7qNNDsvzVr6m"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Hq8YqqA51rFn" type="uf5QGUH2nhjz" value="" name="yaml_stream"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0KvRzD7E3Dnr" type="R03svvsthTIg" value="" name="game_engine"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="X7dwuD4sdLRP" comment="        Initialize a new Room instance.&#xa;        :param name: The room's name&#xa;        :type name: str&#xa;        :param game_engine: The game engine instance&#xa;        :type game_engine: GameEngine&#xa;        :param kwargs: A dict containing Room parameters to set in the new&#xa;            instance:&#xa;            * width (int): The room's width [640]&#xa;            * height (int): The room's height [480]&#xa;            * speed (float): The speed the room's image will move in pixels per&#xa;              frome [0.0]&#xa;            * persistent (bool): True if the room's state will be saved when&#xa;              the game engine switches to a new room [False]&#xa;            * init_code (str): Game language code to run when the room is&#xa;              entered [None]&#xa;            * background (str): The name of the background resource to use for&#xa;              this room [None]&#xa;            * background_color (:py:class:`~pygame_maker.support.color.Color`):&#xa;              The background color to use for this room [black]&#xa;            * draw_background_color (bool): True if the background color should&#xa;              be drawn each frame [True]&#xa;            * background_horizontal_offset (int): The X coordinate to use for&#xa;              the background's left edge [0]&#xa;            * background_vertical_offset (int): The Y coordinate to use for the&#xa;              background's top edge [0]&#xa;            * background_visible (bool): True if the background should be&#xa;              visible (NYI) [True]&#xa;            * tile_horizontal (bool): True if the background should be tiled&#xa;              horizontally (separate from tileset properties) [False]&#xa;            * tile_vertical (bool): True if the background should be tiled&#xa;              vertically (separate from tileset properties) [False]&#xa;            * stretch: (bool): True if the background image should be stretched&#xa;              to fit the room's dimensions (NYI) [False]&#xa;            * grid_width (int): The default X snap distance (NYI) [0]&#xa;            * grid_height (int): The default Y snap distance (NYI) [0]&#xa;            * grid_x_offset (int): The left edge of the snap region (NYI) [0]&#xa;            * grid_y_offset (int): The top edge of the snap region (NYI) [0]&#xa;            * object_instances (list): A list of dicts containing one or more&#xa;              :py:class:`~pygame_maker.actors.object_type.ObjectType` names to&#xa;              populate the room with when initialized, along with their&#xa;              coordinates relative to the room's top left corner [empty]&#xa;: Name the room will be referenced by in other code: Handle to the main game engine: Room's width in pixels: Room's height in pixels: Speed of action in the room, in frames per second: Record the room's state when leaving, and restore it when the room: is loaded again later: The registered code block that runs when the room loads: The list of object instances to create when the room loads: The list of object instances inside the room: The Background instance to draw: True if a background color should be painted: True if the background should be tiled horizontally: True if the background should be tiled vertically: True if the background should be stretched to fit the room: The background color to paint, if draw_background_color is True: The upper left pixel coordinate to draw the background at: True if the background will be drawn: A pygame Rect representing the snap grid width, height, and upper:  left coordinate: The width of the background, determined after its image is loaded: The height of the background, determined after its image is loaded: The width of the surface drawn to, cached the first time the room: is drawn: The height of the surface drawn to, cached the first time the room: is drawn This is a list of hashes inside hashes containing info  about objects to be placed when the room is loaded.  E.G. [{'obj_name1': {'position':(10,10)}},...]" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="3JLzZxIuXeHB" type="Usx1sPdWUnvV"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="8fOH06XOvFeL" type="GqxIRxJtYY5A" value="" name="name"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ed5N2160L1RI" type="R03svvsthTIg" value="" name="game_engine"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="j4KtSNv3TpHu" comment="Property getter for _init_code" name="init_code">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="9tR6sD3wWOt3" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KByrnD1WILNi" comment="Property setter for _init_code" name="init_code">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hImA632FwTLn" type="GqxIRxJtYY5A" value="" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Nt1dCMKtf61j" comment="Property getter for _background_horizontal_offset" name="background_horizontal_offset">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="93y4UHp8dUHL" type="DDBvBTHjr27F"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2TOjdGDy9CaL" comment="Property setter for _background_horizontal_offset" name="background_horizontal_offset">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ccbh5Fdhsg5s" type="DDBvBTHjr27F" value="" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kP8rbgDAYOKW" comment="Property getter for _background_vertical_offset" name="background_vertical_offset">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="cFeq6lZEkOxA" type="DDBvBTHjr27F"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="U4b3WmDHBJ8l" comment="Property setter for _background_vertical_offset" name="background_vertical_offset">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2iJFi5Fsfpak" type="DDBvBTHjr27F" value="" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gjVq1eb1vUZd" comment="        Add to the list of object instances that should be created when the&#xa;        room is loaded.&#xa;        :param object_type_name: Name of the kind of object to place&#xa;        :type object_type_name: str&#xa;        :param locationxy: The x,y coordinates for the object&#xa;        :type locationxy: 2-element array-like&#xa;        :param init_code: Source code to execute when the instance is&#xa;            created&#xa;        :type init_code: None | str&#xa;" name="add_init_object_instance_at">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gcv8J1ekfMue" type="GqxIRxJtYY5A" value="" name="object_type_name"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ym9nXiMXOdn6" type="7qNNDsvzVr6m" value="" name="locationxy"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="h0yMpW7thXmZ" type="GqxIRxJtYY5A" value="None" name="init_code"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Z8Trf3ClCYpp" comment="        Create a new object instance in the room.&#xa;        :param surface: Usually the game screen&#xa;        :type surface: :py:class:`pygame.Surface`&#xa;        :param object_type_name: Name of the kind of object to place&#xa;        :type object_type_name: str&#xa;        :param locationxy: The x,y coordinates&#xa;        :type locationxy: 2-element array-like&#xa;        :param init_code: Optional source code block to run after&#xa;            creating the instance&#xa;        :type init_code: None | str&#xa; Create a throw-away code action, and send it to the new  instance's execute_code method." name="add_object_instance_at">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HHQfuDjZDhw1" type="KtnD5mmeXzoW" value="" name="surface"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="bZFCUMt2VMt8" type="GqxIRxJtYY5A" value="" name="object_type_name"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6aUT9RKOik1a" type="7qNNDsvzVr6m" value="" name="locationxy"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vk88Q47c30TZ" type="GqxIRxJtYY5A" value="None" name="init_code"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0y1APrMJP4k6" comment="        Set the initialization code block to be run when the room is loaded.&#xa;        :param code_block_string: Source code string in game language&#xa;        :type code_block_string: str&#xa;" name="set_init_code_block">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="W0OYUr1JDVdt" type="GqxIRxJtYY5A" value="" name="code_block_string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6pDUtwaQuxwM" comment="        Select a background resource to draw onto the room.&#xa;        :param background: An instance of Background&#xa;        :type background: :py:class:`Background`&#xa;" name="set_background">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3GKjyJKt4SzS" type="7JL0dW5tx0Sk" value="" name="background"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="q6ak1U7nOnkn" comment="        Load the background, if any.  Create the room's objects.  Run the&#xa;        init_code_block.&#xa;        :param surface: Usually the game screen&#xa;        :type surface: :py:class:`pygame.Surface`&#xa; instantiate objects in the init_object_instances list" name="load_room">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KiC6K62OMK5I" type="KtnD5mmeXzoW" value="" name="surface"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1tVPeFAhqB4E" comment="        Clear the surface to the background color if needed, then draw the&#xa;        background image (if any) on top of it.&#xa;        :param surface: Usually the game screen&#xa;        :type surface: :py:class:`pygame.Surface`&#xa; draw the background draw background image, if any What happened here?! The background is already done, so copy it to the display Draw to the background cache so these calculations only  need to happen once. Tilesets already know how to cover the display. print(&quot;Cache tiled background..&quot;) A simple background image can be tiled  horizontally and/or vertically using room  settings.  Remember to account for x,y offsets. print(&quot;Cache normal background&quot;)" name="draw_room_background">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="do6yteiEKvIe" type="KtnD5mmeXzoW" value="" name="surface"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Usx1sPdWUnvV" xmi.id="PMYN8rvUVlwQ" parent="u3BVMyBlyFdr" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="vSAjcCwFIs3P" xmi.id="Oy2B3UDmsKCo" parent="gQMJKbaS6hbm" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="t89lSLYdgGci" name="TileProperties">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="G3cjbGoKn6OF"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pQddUzqykokz" comment="        Initialize a new TileProperties instance.&#xa;        :param kwargs: Dict containing parameter settings to apply to the new&#xa;            instance:&#xa;            * tile_width (int): Horizontal width of tiles [16]&#xa;            * tile_height (int): Vertical height of tiles [16]&#xa;            * horizontal_offset (int): X coordinate of the left edge of the&#xa;              tileset [0]&#xa;            * vertical_offset (int): Y coordinate of the top edge of the&#xa;              tileset [0]&#xa;            * horizontal_padding (int): Horizontal gap between tiles [0]&#xa;            * vertical_padding (int): Vertical gap between tiles [0]&#xa;" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="27pjgR0Upc5J" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jw5mDwHpKL8x" type="GqxIRxJtYY5A" value="" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="btGKh0JRuMD7" name="__eq__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="kWGZ8LtiE72w" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GTvYm3Wo8LWo" type="GqxIRxJtYY5A" value="" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="t89lSLYdgGci" xmi.id="G3cjbGoKn6OF" parent="3JMWAQJnfwGH" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7JL0dW5tx0Sk" name="Background">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="3wY9F2y0ZEXf"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="rGXuNCK9xvx9" type="GqxIRxJtYY5A" comment="The name other resources access this one by" initialValue="&quot;bkg_&quot;" name="name"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="wmRoeDkqoUW1" type="GqxIRxJtYY5A" comment="The file name of the image data for this background" initialValue="&quot;&quot;" name="filename"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="3NMG1NEqcmkz" type="t89lSLYdgGci" comment="Tiling properties that may apply to this background" name="tile_properties"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="w46tz30unRiR" type="ZCaMVQeibnbk" comment="Flag whether the image edges should be smoothed" initialValue="False" name="smooth_edges"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="cQHOtnNw9hBA" type="ZCaMVQeibnbk" comment="Flag whether the image data should be pre-loaded during setup()" initialValue="False" name="preload_texture"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="3P0fBkc5miyk" type="ZCaMVQeibnbk" comment="Flag whether this background has transparent pixels" initialValue="False" name="transparent"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="jweXLMyxkGJd" type="ZCaMVQeibnbk" comment="Flag whether this background is a tile set" initialValue="False" name="tileset"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="1eaAMjIN8G0I" type="KtnD5mmeXzoW" comment="The image data contained in a `pygame.Surface` after the file is loaded" initialValue="None" name="image"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="ycNlIKV1G7Wc" type="7qNNDsvzVr6m" comment="The size of the image, calculated when the file is loaded" initialValue="(0,0)" name="image_size"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="RVXBjpniTLrn" type="GeGG5XBU47Bb" comment="A rect containing the width and height of individual tiles, filled in the first time the background is drawn" initialValue="None" name="tile_rect"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="49ACO8SMkq70" type="DDBvBTHjr27F" comment="The distance between tiles in a row, calculated the first time the background is drawn" initialValue="-1" name="tile_row_spacing"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="8a2OfYy61UIk" type="DDBvBTHjr27F" comment="The maximum number of tiles that can fit in a single row, based on the draw offset, the tileset's horizontal offset, the tile width, the row spacing, and the screen width, calculated the first time the background is drawn" initialValue="-1" name="max_tile_rows"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="J5RkQIYSPgcn" type="DDBvBTHjr27F" comment="The distance between tiles in a column, calculated the first time the background is drawn" initialValue="-1" name="tile_col_spacing"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="n5AXtFY1oYNT" type="DDBvBTHjr27F" comment="The maximum number of tiles that can fit in a single column, based on the draw offset, the tileset's vertical offset, the tile height, the column spacing, and the screen height, calculated the first time the background is drawn" initialValue="-1" name="max_tile_cols"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="moiJ0GzWeKJA" comment="        Create background(s) from a YAML-formatted file.&#xa;        Expected format (missing fields will receive default values)::&#xa;            - bkg_name1:&#xa;                filename: &lt;image_file_name>&#xa;                smooth_edges: True|False&#xa;                preload_texture: True|False&#xa;                transparent: True|False&#xa;                tileset: True|False&#xa;                tile_width: &lt;# >= 0>&#xa;                tile_height: &lt;# >= 0>&#xa;                horizontal_offset: &lt;# >= 0>&#xa;                vertical_offset: &lt;# >= 0>&#xa;                horizontal_padding: &lt;# >= 0>&#xa;                vertical_padding: &lt;# >= 0>&#xa;        :param yaml_stream: A stream containing YAML-formatted strings&#xa;        :type yaml_stream: file-like&#xa;        :param unused: A placeholder, since other load_from_yaml() methods&#xa;            receive a game engine handle here&#xa;        :return: A list of new Background instances for all valid backgrounds&#xa;            defined in the YAML stream&#xa;" name="load_from_yaml">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="OrR29kApht8e" type="7qNNDsvzVr6m"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="AemfpDFX58eS" type="uf5QGUH2nhjz" value="" name="yaml_stream"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CdmgDbtNDd10" type="yfaaXCaCDHE9" value="" name="unused"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Di7CP2pfA9Q0" comment="        Initialize a new Background instance.&#xa;        :param name: The name for the new background&#xa;        :type name: str&#xa;        :param kwargs: The list of parameters to set in the new instance:&#xa;            * filename (str): The filename to use as a background image [&quot;&quot;]&#xa;            * smooth_edges (bool): Whether to smooth edges (NYI) [False]&#xa;            * preload_texture (bool): Whether to preload the background image&#xa;              [False]&#xa;            * transparent (bool): Whether the background image should have&#xa;              pixel transparency [False]&#xa;            * tileset (bool): Whether the background image is a tile set&#xa;              [False]&#xa;            Parameters recognized by TileProperties will be passed on, and&#xa;            wrapped in a :py:class:`TileProperties` instance.&#xa;        :return:&#xa;" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="efAomYo4QPFP" type="7JL0dW5tx0Sk"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HrcD1U6PLXQV" type="GqxIRxJtYY5A" value="" name="name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tLnFqDi3j2yB" comment="        Preload the image if ``preload_texture`` is set.&#xa;        Only call this method after pygame.init().&#xa;" name="setup"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mN8CmLbdfOqV" comment="        Load the background image from the file.&#xa;        Use a black background in case there are transparent pixels in the&#xa;        image, and the transparent attribute is False.&#xa; in case the image had transparent pixels, place it on a  black background so there will no longer be transparent  pixels on the display" name="load_graphic"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wcrFqSJcnPoX" comment="        Draw the background color and image (with tiling if specified) to the&#xa;        supplied screen.&#xa;        :param screen: The screen to draw this background onto&#xa;        :type screen: :py:class:`pygame.Surface`&#xa;        :param xy_offset: X, Y offset for the upper left corner of&#xa;            the image/tileset (in addition to the background's configured&#xa;            horizontal/vertical offsets if it's a tileset)&#xa;        :type xy_offset: 2-element array-like&#xa; print(&quot;row spacing: {}&quot;.format(self.tile_row_spacing)) print(&quot;max rows: {}&quot;.format(self.max_tile_rows)) print(&quot;col spacing: {}&quot;.format(self.tile_col_spacing)) print(&quot;max cols: {}&quot;.format(self.max_tile_cols))" name="draw_background">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lNAQk1tHZQY8" type="GqxIRxJtYY5A" value="" name="screen"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="oRKHvfR5QFGN" type="7qNNDsvzVr6m" value="(0,0)" name="xy_offset"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="k7vJYUQRTYLj" comment="        Error-check filename.&#xa;        :raise: BackgroundException if the filename is not a string, or if the&#xa;            file was missing or empty&#xa;        :return: True if the filename is found, and not empty&#xa;        :rtype: bool&#xa;" name="check_filename">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="GKwZ8KhP1SS8" type="ZCaMVQeibnbk"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="01yukEYUKUls" name="__eq__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="MDSMfsUdtTYd" type="ZCaMVQeibnbk"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="krt7Nf8A4TR0" type="7JL0dW5tx0Sk" value="" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="f45zWrpS27pk" name="__repr__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="hyjayEdJP3f4" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="7JL0dW5tx0Sk" xmi.id="3wY9F2y0ZEXf" parent="3JMWAQJnfwGH" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="L1DL636nznLv" name="RuntimeError"/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="t7gnYCOEGUBl" xmi.id="zyEPzrRtz5eX" parent="L1DL636nznLv" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="oMVrsBN8jzmX" xmi.id="kTNn0sLhXaY8" parent="I7eCef2MpAsX" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="eeGBEmHIlppY" xmi.id="rN7EPXTcLoW6" parent="I7eCef2MpAsX" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="t8CEwjJrfuKP" xmi.id="oJmMZL6Y98Jm" parent="I7eCef2MpAsX" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="jPXsYofTNubG" xmi.id="pJ4rE5qpMg4Y" parent="I7eCef2MpAsX" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="AgBVKF36taGy" name="SymbolTable">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="SOmi1QTUkkGu"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YIsG18AaQ1Lr" comment="        Initialize a new symbol table.&#xa;        :param initial_symbols: The initial contents to place in the&#xa;            variables section of the symbol table&#xa;        :type initial_symbols: dict&#xa;        :param sym_change_callback: An optional callback to execute whenever&#xa;            the interpreted language changes a symbol's value&#xa;        :type sym_change_callback: callable&#xa;" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="bxMy5BMdSCtT" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="iQO6iTnCZacF" type="GqxIRxJtYY5A" value="" name="initial_symbols"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="K13i2MZimwpS" comment="        For debugging, dump the contents of the symbol table.  List constants&#xa;        and variables separately.&#xa;" name="dump_vars">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="PcfyAHDjEafJ" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="j1uBDncVmdEo" comment="        Return the list of all symbols, whether constants or variables.&#xa;        :return: Symbol list&#xa;        :rtype: list&#xa;" name="keys">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="xlXjhKA4up22" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4ElGmOYTNSda" comment="        Set a variable to a new value.  Don't allow constants to be written&#xa;        this way.&#xa;        :param item: The symbol to set&#xa;        :type item: str&#xa;        :param val: The symbol's new value&#xa; print(&quot;Setting {} to {}&quot;.format(item, val)) don't allow constants to be written this way" name="__setitem__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="dJ90kmYyzZwq" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="EF30rFnozIWe" type="GqxIRxJtYY5A" value="" name="item"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="cghUThWXvFlf" type="GqxIRxJtYY5A" value="" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nhdkz9OZp53I" comment="        Retrieve a symbol's value.  If not found, return the uninitialized&#xa;        value.&#xa;        :param item: The symbol to find the value of&#xa;        :type item: str&#xa;        :return: The symbol's value&#xa; print(&quot;Retrieve item {}: {}&quot;.format(item, new_val))" name="__getitem__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="DrWCRS1CAew7" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="nXngmYMNsTLa" type="GqxIRxJtYY5A" value="" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nKhaOkq9Gdp2" comment="        Called from within the game engine to set values that can be read from,&#xa;        but not written to, by user code.&#xa;        User code doesn't (yet) have a way to create constants.&#xa;        :param constant_name: The constant's name&#xa;        :type constant_name: str&#xa;        :param constant_value: The constant's value&#xa;" name="set_constant">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="DmvTNjTWqrYT" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="B9Q1cjbpb702" type="GqxIRxJtYY5A" value="" name="constant_name"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Y1Cgd8nOQUwm" type="GqxIRxJtYY5A" value="" name="constant_value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="AgBVKF36taGy" xmi.id="SOmi1QTUkkGu" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="b7GCDECjDOPq" xmi.id="WACud8hquaHH" parent="pzMRw8LFY9X3" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="5N0JyKgb7Qfu" xmi.id="hOoHt4VcF2t7" parent="3JMWAQJnfwGH" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YfJQ4mNWIUmA" comment="    Interpret, initialize, and execute code blocks.  Requires managing tables&#xa;    of variables and functions that can be accessed by and/or created within&#xa;    the code block.&#xa;" name="LanguageEngine">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="9dakl4JI5gJs"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="JrlROq1aXO4U" type="AgBVKF36taGy" name="global_symbol_table"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="PzWu5B4s6Zrk" type="ARKixNq4EDQP" comment="A dict containing known function signatures" initialValue="{'distance':{}, 'randint':{}, 'time':{}, 'debug':{}}" name="function_map"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="3472GFHX41xS" type="ARKixNq4EDQP" comment="Code blocks registered in the language engine" initialValue="{}" name="code_blocks"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="ry2PM4rj4Nd7" type="ARKixNq4EDQP" comment="Local symbol tables associated with each code block" initialValue="{}" name="local_tables"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8fiBL21N159k" comment="        Initialize a new language engine.&#xa;: The language engine's global symbol table: A dict containing known function signatures: Code blocks registered in the language engine: Local symbol tables associated with each code block" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="B71tPgeQhvjA" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zCmgE86KnpV6" comment="        Register a block of game language code with the language engine.&#xa;        The executable code block will be placed in the code block hash,&#xa;        using its name as the key.&#xa;        :param block_name: The name to register the code block with&#xa;        :type block_name: str&#xa;        :param code_string: The game language source code block&#xa;        :type code_string: str&#xa;        :raise: DuplicateCodeBlockError if the block name is already registered&#xa;" name="register_code_block">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pWRoaZWjgVc3" type="GqxIRxJtYY5A" value="" name="block_name"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CHUrAD19Qnpe" type="GqxIRxJtYY5A" value="" name="code_string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ipEOKpSU4wLE" comment="        Supply the name of a registered code block that will be executed.&#xa;        Local and global symbols may be accessed and/or created during code&#xa;        execution.  Symbols changed or created in the local symbol table will&#xa;        trigger a symbol change callback associated with the symbol table.&#xa;        :param block_name: The name of a registered code block&#xa;        :type block_name: str&#xa;        :param local_symbol_table: The local symbols to make available to the&#xa;            code block&#xa;        :type local_symbol_table: :py:class:`SymbolTable`&#xa;        :raise: UnknownCodeBlockError if the block name is not found&#xa;" name="execute_code_block">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9KOX7BB057em" type="GqxIRxJtYY5A" value="" name="block_name"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="uu4CgC24UJ0t" type="AgBVKF36taGy" value="" name="local_symbol_table"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="njxsrZfNwvpQ" comment="        Remove a code block that is no longer needed.&#xa;        :param block_name: The name of a registered code block&#xa;        :type block_name: str&#xa;" name="unregister_code_block">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="QA6HmeGZNBPC" type="GqxIRxJtYY5A"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WlcwvBfuAsv5" type="GqxIRxJtYY5A" value="" name="block_name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="YfJQ4mNWIUmA" xmi.id="9dakl4JI5gJs" parent="pzMRw8LFY9X3" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="EOCK3bMudFtV" xmi.id="4xo38OmuA447" parent="gQMJKbaS6hbm" name=""/>
      <UML:Package visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HFyOB2e0mLUE" name="unittest">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="HFyOB2e0mLUE" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3KreRFKCBWSS" name="TestCase"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="XWJw4Mll0gKA" xmi.id="pqh9aGi8IeXv" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Lyoghm6tTKr8" xmi.id="yh5SHXh0AtNC" parent="XWJw4Mll0gKA" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="apPZqzH0Xf26" xmi.id="9BDON2L3jz56" parent="XWJw4Mll0gKA" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="bCmkgTjndajQ" xmi.id="kpwW8qtjDMPz" parent="XWJw4Mll0gKA" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="YZ3wYIMM5YlJ" xmi.id="4xrfdsnCNKRP" parent="XWJw4Mll0gKA" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="2GEyarhFRJ9l" xmi.id="Mwhkmbh8sIrv" parent="XWJw4Mll0gKA" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="8Df6Qeh8ZEH7" xmi.id="VctBIjZ6YTT6" parent="XWJw4Mll0gKA" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="gt4jHwPlAHxd" xmi.id="U65ZK3yzbDCY" parent="XWJw4Mll0gKA" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="l3k1G1B68R7o" xmi.id="0YRnB1EUuiz5" parent="XWJw4Mll0gKA" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3Qfk5hbxOfv7" comment="    The source and target of game-generated events. Events are queued before&#xa;    being routed on command to targets that have registered for accepting&#xa;    particular events.&#xa;" name="EventEngine">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="vTP0cFrhRCUP"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="ASR2rj8SHnAs" type="ARKixNq4EDQP" comment="A dict with event names as keys; each key contains a list of all handlers registered for that event" initialValue="{}" name="event_handlers"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="OHHwR4rdjUtk" type="ARKixNq4EDQP" comment="A dict with event names as keys; each key contains a list of `pygame_maker.events.event.Event` instances of that named type that have been queued, and that will be transmitted by transmit_event() when that event name is supplied as a parameter" initialValue="{}" name="event_queues"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="fpp41JTErMKv" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="4X0CQpQyDduH" type="3Qfk5hbxOfv7"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ivGILDQ00G50" comment="        Add a handler method reference to the named event.&#xa;        :param event_name: The name of the event to register a handler for&#xa;        :type event_name: str&#xa;        :param event_handler: The event handler method&#xa;        :type event_handler: callable&#xa;1 for {}&quot;.format(event_name)){:d} for {}&quot;.format(idx, event_name)) print(&quot;handlers: {}&quot;.format(self.event_handlers))" name="register_event_handler">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XWENqWGu3H7U" type="GqxIRxJtYY5A" value="" name="event_name"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FAarBE6Zg4jH" type="MrW5KNn3d1gF" value="" name="event_handler"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="furi9wAERdUa" comment="        Remove a handler method reference from the named event.&#xa;        :param event_name: The name of the event to unregister a handler for&#xa;        :type event_name: str&#xa;        :param event_handler: The event handler method to remove&#xa;        :type event_handler: callable&#xa;" name="unregister_event_handler">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="w1PAmUki0Jdj" type="GqxIRxJtYY5A" value="" name="event_name"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9QYHcOOAapud" type="MrW5KNn3d1gF" value="" name="event_handler"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="afkawNHpyGnf" comment="        Add the given event to the event queue.&#xa;        :param an_event: The event to add to the queue&#xa;        :type an_event: :py:class:`~pygame_maker.events.event.Event`&#xa;1 named {}&quot;.format(ename)){:d} named {}&quot;.format(idx, ename)) print(&quot;queues: {}&quot;.format(self.event_queues))" name="queue_event">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZERk5qHIyp9A" type="XWJw4Mll0gKA" value="" name="an_event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Zf9Vvx9lh97E" comment="        Forward queued events matching the named event (if handlers exist for&#xa;        it), to each registered handler.&#xa;        Delete the queued events after handling them.&#xa;        :param event_name: The name of the event to transmit to its handlers&#xa;        :type event_name: str&#xa; print(&quot;check for {} handlers..&quot;.format(event_name)) print(&quot;found. check for event queues..&quot;) print(&quot;handle queue item {}&quot;.format(queued)){:d}&quot;.format(idx+1)) clear the queue" name="transmit_event">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="C5UQtsV02LPI" type="GqxIRxJtYY5A" value="" name="event_name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wBkcIroSuGso" comment="        Call handlers for all events of the given event type.&#xa;        For event types that are best handled all at one place in the game&#xa;        engine.&#xa;        :param event_type: An event type&#xa;        :type event_type: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="transmit_event_type">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rffkMFvVfRmG" type="XWJw4Mll0gKA" value="" name="event_type"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="3Qfk5hbxOfv7" xmi.id="vTP0cFrhRCUP" parent="pzMRw8LFY9X3" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="fQNZeFNnd8xK" xmi.id="HM7ErP9pVdtY" parent="pzMRw8LFY9X3" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="UknKnCBKoT6P" xmi.id="0adALzu4FqhX" parent="I7eCef2MpAsX" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="hTXfwIQefHK6" xmi.id="8xzAunMvlqBJ" parent="pzMRw8LFY9X3" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="IU3oARv7rFNX" xmi.id="cziH1VG0Jya7" parent="hTXfwIQefHK6" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="5oKPksW0D2Be" xmi.id="MEN7Ls2tJ4Iz" parent="IU3oARv7rFNX" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="tN8pcpdTJl8F" xmi.id="DOkEomYw7jau" parent="gQMJKbaS6hbm" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="J9lQsMIXvSA1" xmi.id="YX1y0p3IFbuP" parent="3JMWAQJnfwGH" name=""/>
      <UML:Package visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="eVwTSn3rX5Vj" name="simple_object_instance">
       <UML:Namespace.ownedElement/>
      </UML:Package>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="E3vJXcR6dvrR" xmi.id="h47Qtl08mwRJ" parent="fQNZeFNnd8xK" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="E3vJXcR6dvrR" xmi.id="s8racehqXgZT" parent="I4V2yvLUjgbV" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="B0mhKN2Xqx8Y" xmi.id="b43mRa0jMRxv" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="cgp6Lc9DptPV" xmi.id="tC7HRfEf2UKe" parent="B0mhKN2Xqx8Y" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="j8tpeSCDNGAr" xmi.id="XpKTvefzCDev" parent="cgp6Lc9DptPV" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="kDjaHh8ese0C" xmi.id="JxQ4uPtd6Vxd" parent="cgp6Lc9DptPV" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="tQtp1bmFWTII" xmi.id="VPewCSQhrEpF" parent="B0mhKN2Xqx8Y" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="yrqFX5ySww5V" xmi.id="mqS4aN4ATBTE" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="bST0EQCvkQNJ" xmi.id="VDH2HLNM8aBA" parent="gQMJKbaS6hbm" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="4xgAXrKwF8qC" xmi.id="4OjSRF2tyY34" parent="3JMWAQJnfwGH" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="JE56BjCBvGD0" xmi.id="Kupw2H5b1H9R" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="teXn03JaxnK1" xmi.id="5FZMsXqPQXJW" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="22XzP2PwcSok" xmi.id="Nv14dl1FYcDi" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="pr1HfaBOEzMF" xmi.id="uhTBhmkXYppQ" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Zh8wzD5Avqsj" xmi.id="QpOZaR3sJyHY" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="r3EE7yy6oTDw" xmi.id="YrXpYBP7qf6c" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="oz4zETSDLkmD" xmi.id="iUCkNATZjQjt" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="L0gUFJgmPZz6" xmi.id="vJXCFQkVglqA" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="vHEhouCUTLfO" xmi.id="HU6lXFYX03oG" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="wla5RUXoUEgq" xmi.id="VirKT9ikiX3c" parent="4xgAXrKwF8qC" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="TEE6pV71Nzcg" xmi.id="5xW1rdPIcMGF" parent="4xgAXrKwF8qC" name=""/>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="e2DVdutzJQiN" name="actions">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4xgAXrKwF8qC" name="Action">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="4OjSRF2tyY34"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="gK8ct9gIeImp" comment="        Register Action subclasses.&#xa;        Register a class (at init time) to make it possible to search&#xa;        it for a particular action name.&#xa;        :param actiontype: Action subclass to register&#xa;        :type actiontype: Action subclass&#xa;" name="register_new_action_type">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="jnYN6JAcpCKm" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="WY4hyROG6zlu" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="QSkFt2TXNZ9G" type="GqxIRxJtYY5A" value="" name="actiontype"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="bg0hfla5BII2" comment=" no action type handles the named action" name="get_action_instance_by_action_name">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Sj9w9WWt1gQi" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="LjZiJgw2USNa" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="jXCXhUJIAJxn" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="2XqBo6E9qlp9" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Bh0Jyx7yTv9F" comment="        Supply the basic properties for any action.&#xa;        :param action_name: Name of the action&#xa;        :type action_name: str&#xa;        :param action_yaml: YAML string describing the action's parameters&#xa;        :type action_yaml: str&#xa;        :param settings_dict: dict mapping values to the action's parameters&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Parameter values specified as named arguments&#xa;: This action's name: The dict mapping parameters to their values (or expressions): The dict mapping parameters to their types and constraints: Store parameters added to the action at runtime default: don't nest subsequent action(s) automatically nest after question tasks" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="PtyHzPJZMBAy" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="2LOq7BzXu6T1" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="cxubdIJmzH6x" type="GqxIRxJtYY5A" value="" name="action_yaml"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="CBtd63s6MEwT" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UTkRioNvzGW4" comment=" Parse the YAML parameter information for the action. :param yaml_str: YAML string with common params and actions :type yaml_str: str :return:     A tuple of 2 dicts, one maps params with defaults, the other maps     params with types and constraints :rtype: (dict, dict) print(&quot;Got common params:\n{}&quot;.format(common_params)) print(&quot;Got action_map:\n{}&quot;.format(action_map)) print(&quot;Got action_constraints:\n{}&quot;.format(action_constraints))" name="collect_parameter_yaml_info">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="RXVmhgk97Sao" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="HP8ed551y4Gw" type="GqxIRxJtYY5A" value="" name="yaml_str"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="FvjCADGRcN3E" comment="        Calculate the value inside a field.&#xa;        Given a field name possibly containing an expression, register the&#xa;        expression with the language engine and execute the code, and&#xa;        return the result.  Use the spreadsheet formula scheme to indicate&#xa;        an expression to execute: first char is '='.&#xa;        :param field_name: The field containing the expression&#xa;        :type field_name: str&#xa;        :param symbols: The symbols available to the code block&#xa;        :type symbols: SymbolTable&#xa;        :param language_engine: The language engine instance&#xa;        :type language_engine: LanguageEngine&#xa;        :return: The result from the expression&#xa;        :rtype: varies by symbol&#xa; print(&quot;{}: get expression for field {}: {}&quot;.format(self, field_name,    self.action_data[field_name])) not an expression, so just return the contents of the field print(&quot;check for code block {}&quot;.format(exp_name)) create a hopefully unique symbol to store the expression result in print(&quot;sym_name: {}&quot;.format(sym_name)) create an entry in the action data that points to a  hopefully unique name that will be registered with the language  engine print(&quot;register new code block {}: {}&quot;.format(exp_id, expression_code)) execute the expression and collect its result print(&quot;{} = {}&quot;.format(sym_name, local_symbols[sym_name]))" name="get_parameter_expression_result">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="fdicP5Gr91Mg" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="S9DOBRIaxoMe" type="GqxIRxJtYY5A" value="" name="field_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="S6nXXLLmH2wP" type="GqxIRxJtYY5A" value="" name="symbols"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="GBqqYs2yzFK8" type="GqxIRxJtYY5A" value="" name=";"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KgQbgLyuWnj4" comment="        Produce the action's YAML-formatted string representation&#xa;        :param indent: Number of spaces to indent each line&#xa;        :type indent: int&#xa;" name="to_yaml">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="XUBhTWLnCkNq" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="fl2ezKmexUEM" type="GqxIRxJtYY5A" value="" name="indent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5Llb8UdlDdPC" comment="        Create a shortcut for accessing parameters.&#xa;        Forward itemname to the action_data dict if found there, or otherwise&#xa;        to the runtime_data attribute, for convenience.&#xa;        :param itemname: Parameter name to access&#xa;        :type itemname: str&#xa;        :raise: KeyError, if the key is not found in either attribute's hash&#xa;        :return: The value stored in the parameter&#xa;" name="__getitem__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="vAl5u8txReWY" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="x9otc2F9WPox" type="GqxIRxJtYY5A" value="" name="itemname"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="69JKkhUhqJaQ" comment="        Allow action data to be modified.&#xa;        If itemname is found in the action_data dict, it will be changed&#xa;        to the new value.  Otherwise, the value will be added to the&#xa;        runtime_data dict, whether or not the key existed there before.&#xa;        :param itemname: Parameter name to set&#xa;        :type itemname: str&#xa;        :param value: New parameter value&#xa; Fall back to runtime data.  This is data that is not serialized." name="__setitem__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="aYMRrupCgN2r" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="LoYqBMn4WY9O" type="GqxIRxJtYY5A" value="" name="itemname"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="e2J4fpcjwv3g" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kovEK2bx3u1i" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ibReWTL5zfWo" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XJyEh15Pnzd7" name="__eq__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="bmEYPiMx1KBi" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="zE4273ipe8T9" type="GqxIRxJtYY5A" value="" name="other"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vHEhouCUTLfO" comment="actions:&#xa;    execute_code:&#xa;        apply_to: common_apply_to&#xa;        code:&#xa;            type: str&#xa;            default: ''&#xa;    execute_script:&#xa;        apply_to: common_apply_to&#xa;        script:&#xa;            type: str&#xa;            default: ''&#xa;        parameters:&#xa;            type: str&#xa;            default: ''&#xa;" name="CodeAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="HU6lXFYX03oG"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="t3rr4f7XlMrC" comment="        Initialize a CodeAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="iC6RWvdzO7sg" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="VTWtHV52hjDC" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="3lysQTBHW27Z" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wla5RUXoUEgq" comment="actions:&#xa;    set_score_value:&#xa;        score:&#xa;            type: int&#xa;            default: 0&#xa;        relative: common_relative&#xa;    if_score_value:&#xa;        score:&#xa;            type: int&#xa;            default: 0&#xa;        test: common_test&#xa;        invert: common_invert&#xa;    draw_score_value:&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        caption:&#xa;            type: str&#xa;            default: 'Score:'&#xa;        relative: common_relative&#xa;    show_highscore_table:&#xa;        background:&#xa;            type: str&#xa;            default: ''&#xa;        border:&#xa;            type: bool&#xa;            default: True&#xa;        new_color:&#xa;            type: str&#xa;            default: '#ff0000'&#xa;        other_color:&#xa;            type: str&#xa;            default: '#ffffff'&#xa;        font:&#xa;            type: str&#xa;            default: ''&#xa;    clear_highscore_table: {}&#xa;    set_lives_value:&#xa;        lives:&#xa;            type: int&#xa;            default: 0&#xa;        relative: common_relative&#xa;    if_lives_value:&#xa;        lives:&#xa;            type: int&#xa;            default: 0&#xa;        test: common_test&#xa;        invert: common_invert&#xa;    draw_lives_value:&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        caption:&#xa;            type: str&#xa;            default: 'Lives:'&#xa;        relative: common_relative&#xa;    draw_lives_image:&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        sprite:&#xa;            type: str&#xa;            default: ''&#xa;        relative: common_relative&#xa;    set_health_value:&#xa;        value:&#xa;            type: int&#xa;            default: 0&#xa;        relative: common_relative&#xa;    if_health_value:&#xa;        value:&#xa;            type: int&#xa;            default: 0&#xa;        test: common_test&#xa;        invert: common_invert&#xa;    draw_health_bar:&#xa;        x1:&#xa;            type: int&#xa;            default: 0&#xa;        y1:&#xa;            type: int&#xa;            default: 0&#xa;        x2:&#xa;            type: int&#xa;            default: 0&#xa;        y2:&#xa;            type: int&#xa;            default: 0&#xa;        back_color:&#xa;            type: str&#xa;            default: ''&#xa;        bar_color_min:&#xa;            type: str&#xa;            default: &quot;#ff0000&quot;&#xa;        bar_color_max:&#xa;            type: str&#xa;            default: &quot;#00ff00&quot;&#xa;        relative: common_relative&#xa;    set_window_caption:&#xa;        show_score:&#xa;            type: bool&#xa;            default: True&#xa;        score_caption:&#xa;            type: str&#xa;            default: 'score:'&#xa;        show_lives:&#xa;            type: bool&#xa;            default: True&#xa;        lives_caption:&#xa;            type: str&#xa;            default: 'lives:'&#xa;        show_health:&#xa;            type: bool&#xa;            default: True&#xa;        health_caption:&#xa;            type: str&#xa;            default: 'health:'&#xa;" name="AccountingAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="VirKT9ikiX3c"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZtWHRZtcXe9D" comment="        Initialize an AccountingAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Tzyyd5BHU0ej" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ePoPFTaXfbJ1" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ErubJ6Nsxt7O" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iLoWxPLNOGVD" comment="actions:&#xa;    draw_sprite_at_location:&#xa;        apply_to: common_apply_to&#xa;        sprite:&#xa;            type: str&#xa;            default: ''&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        subimage:&#xa;            type: int&#xa;            default: -1&#xa;        relative: common_relative&#xa;    draw_background_at_location:&#xa;        background:&#xa;            type: str&#xa;            default: ''&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        tile:&#xa;            type: bool&#xa;            default: False&#xa;        relative: common_relative&#xa;    draw_text_at_location:&#xa;        apply_to: common_apply_to&#xa;        text:&#xa;            type: str&#xa;            default: ''&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        relative: common_relative&#xa;    draw_transformed_text_at_location:&#xa;        apply_to: common_apply_to&#xa;        text:&#xa;            type: str&#xa;            default: ''&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        hor_scale:&#xa;            type: float&#xa;            default: 1.0&#xa;        ver_scale:&#xa;            type: float&#xa;            default: 1.0&#xa;        angle:&#xa;            type: float&#xa;            default: 0&#xa;        relative: common_relative&#xa;    draw_rectangle:&#xa;        apply_to: common_apply_to&#xa;        x1: common_position&#xa;        y1: common_position&#xa;        x2: common_position&#xa;        y2: common_position&#xa;        filled:&#xa;            type: from_list&#xa;            default: filled&#xa;            accepted_list: [filled, outline]&#xa;        relative: common_relative&#xa;    draw_horizontal_gradient:&#xa;        apply_to: common_apply_to&#xa;        x1: common_position&#xa;        y1: common_position&#xa;        x2: common_position&#xa;        y2: common_position&#xa;        color1:&#xa;            type: str&#xa;            default: #000000&#xa;        color2:&#xa;            type: str&#xa;            default: #FFFFFF&#xa;        relative: common_relative&#xa;    draw_vertical_gradient:&#xa;        apply_to: common_apply_to&#xa;        x1: common_position&#xa;        y1: common_position&#xa;        x2: common_position&#xa;        y2: common_position&#xa;        color1:&#xa;            type: str&#xa;            default: #000000&#xa;        color2:&#xa;            type: str&#xa;            default: #FFFFFF&#xa;        relative: common_relative&#xa;    draw_ellipse:&#xa;        apply_to: common_apply_to&#xa;        x1: common_position&#xa;        y1: common_position&#xa;        x2: common_position&#xa;        y2: common_position&#xa;        filled:&#xa;            type: from_list&#xa;            default: filled&#xa;            accepted_list: [filled, outline]&#xa;        relative: common_relative&#xa;    draw_gradient_ellipse:&#xa;        apply_to: common_apply_to&#xa;        x1: common_position&#xa;        y1: common_position&#xa;        x2: common_position&#xa;        y2: common_position&#xa;        color1:&#xa;            type: str&#xa;            default: #000000&#xa;        color2:&#xa;            type: str&#xa;            default: #FFFFFF&#xa;        relative: common_relative&#xa;    draw_line:&#xa;        apply_to: common_apply_to&#xa;        x1: common_position&#xa;        y1: common_position&#xa;        x2: common_position&#xa;        y2: common_position&#xa;        relative: common_relative&#xa;    draw_arrow:&#xa;        apply_to: common_apply_to&#xa;        x1: common_position&#xa;        y1: common_position&#xa;        x2: common_position&#xa;        y2: common_position&#xa;        tip_size:&#xa;            type: int&#xa;            default: 12&#xa;        relative: common_relative&#xa;    set_draw_color:&#xa;        color:&#xa;            type: str&#xa;            default: #000000&#xa;    set_draw_font:&#xa;        font:&#xa;            type: str&#xa;            default: ''&#xa;        alignment:&#xa;            type: from_list&#xa;            default: left&#xa;            accepted_list: [left, center, right]&#xa;    set_fullscreen:&#xa;        screen_size:&#xa;            type: from_list&#xa;            default: toggle&#xa;            accepted_list: [toggle, windowed, fullscreen]&#xa;    take_snapshot:&#xa;        filename:&#xa;            type: str&#xa;            default: 'snapshot.png'&#xa;    create_effect:&#xa;        apply_to: common_apply_to&#xa;        effect_type:&#xa;            type: from_list&#xa;            default: explosion&#xa;            accepted_list:&#xa;                - explosion&#xa;                - ring&#xa;                - ellipse&#xa;                - firework&#xa;                - smoke&#xa;                - smoke_up&#xa;                - star&#xa;                - spark&#xa;                - flare&#xa;                - cloud&#xa;                - rain&#xa;                - snow&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        size:&#xa;            type: from_list&#xa;            default: medium&#xa;            accepted_list: [small, medium, large]&#xa;        color:&#xa;            type: str&#xa;            default: #000000&#xa;        positioning:&#xa;            type: from_list&#xa;            default: foreground&#xa;            accepted_list: [foreground, background]&#xa;        relative: common_relative&#xa;" name="DrawAction">
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dBBSbhsfJr1u" comment="        Initialize a DrawAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa; make it possible to request an action from any action type" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="gKArPxwt3OjN" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="LkvRNAGyJPPv" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="f0THCCWlQjac" comment="actions:&#xa;    restart_game: {}&#xa;    end_game: {}&#xa;    save_game:&#xa;        filename:&#xa;            type: str&#xa;            default: savegame&#xa;    load_game:&#xa;        filename:&#xa;            type: str&#xa;            default: savegame&#xa;" name="GameAction">
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UC45Jv1iN6ce" comment="        Initialize a GameAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="b7Z34igCN4kj" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1sX887ecHiga" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="oz4zETSDLkmD" name="QuestionAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="iUCkNATZjQjt"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mveUJNLU3Eg9" comment="        Initialize a QuestionAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="IG2LUiSomTHH" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="M53SVslQ9FfB" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="X6vFgNKTHwva" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="r3EE7yy6oTDw" name="ResourceAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="YrXpYBP7qf6c"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="A4F0jJdHzamp" comment="        Initialize a ResourceAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="CbyB9ky25QHD" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="uLUF8NitDHQT" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1sKarziz2v0j" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6VEK9WQJLlqg" comment="actions:&#xa;    goto_previous_room:&#xa;        transition: common_transition&#xa;    goto_next_room:&#xa;        transition: common_transition&#xa;    restart_current_room:&#xa;        transition: common_transition&#xa;    goto_room:&#xa;        new_room:&#xa;            type: str&#xa;            default: ''&#xa;        transition: common_transition&#xa;    if_previous_room_exists:&#xa;        invert: common_invert&#xa;    if_next_room_exists:&#xa;        invert: common_invert&#xa;" name="RoomAction">
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="EMh6JpSWS99P" comment="        Initialize a RoomAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="JXPx7kkBUoaw" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="jenz3xNFH2Ja" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Zh8wzD5Avqsj" comment="actions:&#xa;    display_message:&#xa;        message:&#xa;            type: str&#xa;            default: ''&#xa;    show_game_info: {}&#xa;    show_video:&#xa;        filename:&#xa;            type: str&#xa;            default: ''&#xa;        full_screen:&#xa;            type: bool&#xa;            default: False&#xa;        loop:&#xa;            type: bool&#xa;            default: False&#xa;" name="InfoAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="QpOZaR3sJyHY"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MaffYuCf93lM" comment="        Initialize an InfoAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="9MXJNGfBZoNa" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="oJAE0teveCjE" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="aGFpCkcWLFAr" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JE56BjCBvGD0" comment="actions:&#xa;    set_velocity_compass:&#xa;        apply_to: common_apply_to&#xa;        compass_directions: common_compass_direction&#xa;        speed: common_speed&#xa;    set_velocity_degrees:&#xa;        apply_to: common_apply_to&#xa;        direction:&#xa;            type: float&#xa;            default: 0.0&#xa;        speed: common_speed&#xa;        relative: common_relative&#xa;    move_toward_point:&#xa;        apply_to: common_apply_to&#xa;        destination.x: common_position&#xa;        destination.y: common_position&#xa;        speed: common_speed&#xa;        relative: common_relative&#xa;    set_horizontal_speed:&#xa;        apply_to: common_apply_to&#xa;        horizontal_direction:&#xa;            type: from_list&#xa;            default: right&#xa;            accepted_list: [right, left]&#xa;        horizontal_speed: common_speed&#xa;        relative: common_relative&#xa;    set_vertical_speed:&#xa;        apply_to: common_apply_to&#xa;        vertical_direction:&#xa;            type: from_list&#xa;            default: up&#xa;            accepted_list: [up, down]&#xa;        vertical_speed: common_speed&#xa;        relative: common_relative&#xa;    apply_gravity:&#xa;        apply_to: common_apply_to&#xa;        gravity_direction: common_compass_direction&#xa;        relative: common_relative&#xa;    reverse_horizontal_speed:&#xa;        apply_to: common_apply_to&#xa;    reverse_vertical_speed:&#xa;        apply_to: common_apply_to&#xa;    set_friction:&#xa;        apply_to: common_apply_to&#xa;        friction:&#xa;            type: float&#xa;            default: '0.0'&#xa;        relative: common_relative&#xa;    jump_to:&#xa;        apply_to: common_apply_to&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        relative: common_relative&#xa;    jump_to_start:&#xa;        apply_to: common_apply_to&#xa;    jump_random:&#xa;        apply_to: common_apply_to&#xa;        snap.x: common_position&#xa;        snap.y: common_position&#xa;    snap_to_grid:&#xa;        apply_to: common_apply_to&#xa;        grid.x: common_position&#xa;        grid.y: common_position&#xa;    wrap_around:&#xa;        apply_to: common_apply_to&#xa;        wrap_direction:&#xa;            type: from_list&#xa;            default: horizontal&#xa;            accepted_list: [horizontal, vertical, both]&#xa;    move_until_collision:&#xa;        apply_to: common_apply_to&#xa;        direction:&#xa;            type: float&#xa;            default: 0.0&#xa;        max_distance:&#xa;            type: int&#xa;            default: -1&#xa;        stop_at_collision_type: common_collision_type&#xa;    bounce_off_collider:&#xa;        apply_to: common_apply_to&#xa;        precision:&#xa;            type: from_list&#xa;            default: imprecise&#xa;            accepted_list: [precise, imprecise]&#xa;        bounce_collision_type: common_collision_type&#xa;    set_path:&#xa;        apply_to: common_apply_to&#xa;        path:&#xa;            type: str&#xa;            default: ''&#xa;        speed:&#xa;            common_speed&#xa;        at_end:&#xa;            type: from_list&#xa;            default: stop&#xa;            accepted_list:&#xa;                - stop&#xa;                - continue_from_start&#xa;                - continue_from_here&#xa;                - reverse&#xa;        relative: common_relative&#xa;    end_path:&#xa;        apply_to: common_apply_to&#xa;    set_location_on_path:&#xa;        apply_to: common_apply_to&#xa;        location:&#xa;            type: str&#xa;            default: 0&#xa;        relative:&#xa;            common_relative&#xa;    set_path_speed:&#xa;        apply_to: common_apply_to&#xa;        speed: common_speed&#xa;        relative: common_relative&#xa;    step_toward_point:&#xa;        apply_to: common_apply_to&#xa;        destination.x: common_position&#xa;        destination.y: common_position&#xa;        speed: common_speed&#xa;        stop_at_collision_type: common_collision_type&#xa;        relative: common_relative&#xa;    step_toward_point_around_objects:&#xa;        apply_to: common_apply_to&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        speed: common_speed&#xa;        avoid_collision_type: common_collision_type&#xa;        relative: common_relative&#xa;" name="MotionAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="Kupw2H5b1H9R"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SwmUDttDOFEC" comment="        Initialize a MotionAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa; print(&quot;Created new action {}&quot;.format(self)) self.action_data = self.MOTION_ACTION_DATA_MAP[action_name]" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Zthv8t7smOJR" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ktJTeWK8uOWY" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="cuUj5KvYGf0U" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="teXn03JaxnK1" comment="actions:&#xa;    create_object:&#xa;        object: common_object&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        child_instance:&#xa;            type: bool&#xa;            default: False&#xa;        relative: common_relative&#xa;    create_object_with_velocity:&#xa;        object: common_object&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        speed: common_speed&#xa;        direction:&#xa;            type: float&#xa;            default: 0.0&#xa;        child_instance:&#xa;            type: bool&#xa;            default: False&#xa;        relative: common_relative&#xa;    create_random_object:&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        object_1: common_object&#xa;        object_2: common_object&#xa;        object_3: common_object&#xa;        object_4: common_object&#xa;        relative: common_relative&#xa;    transform_object:&#xa;        apply_to: common_apply_to&#xa;        object: common_object&#xa;        new_object: common_object&#xa;        perform_events:&#xa;            type: bool&#xa;            default: False&#xa;    destroy_object:&#xa;        apply_to: common_apply_to&#xa;    destroy_instances_at_location:&#xa;        apply_to: common_apply_to&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        relative: common_relative&#xa;    set_sprite:&#xa;        apply_to: common_apply_to&#xa;        sprite:&#xa;            type: str&#xa;            default: ''&#xa;        subimage:&#xa;            type: int&#xa;            default: 0&#xa;        speed:&#xa;            type: int&#xa;            default: 1&#xa;    transform_sprite:&#xa;        apply_to: common_apply_to&#xa;        horizontal_scale:&#xa;            type: float&#xa;            default: 1.0&#xa;        vertical_scale:&#xa;            type: float&#xa;            default: 1.0&#xa;        rotation:&#xa;            type: float&#xa;            default: 0.0&#xa;        mirror:&#xa;            type: bool&#xa;            default: False&#xa;    color_sprite:&#xa;        apply_to: common_apply_to&#xa;        color:&#xa;            type: str&#xa;            default: '#000000'&#xa;        opacity:&#xa;            type: float&#xa;            default: 1.0&#xa;" name="ObjectAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="5FZMsXqPQXJW"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7mdXHw3dLPm8" comment="        Initialize an ObjectAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="enaxAM3CgpU2" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="2JmKODYVxOXS" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Xa2uAx6Hhkmz" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="L0gUFJgmPZz6" comment="actions:&#xa;    start_of_block: {}&#xa;    else: {}&#xa;    exit_event: {}&#xa;    end_of_block: {}&#xa;    repeat_next_action: {}&#xa;" name="OtherAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="vJXCFQkVglqA"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="oYBSJ2akGXw0" comment="        Initialize an OtherAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa; handle blocks" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="2lXJITJ0qLuK" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="kP4wWbMumZhX" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="iZABvyriU2An" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="TEE6pV71Nzcg" name="ParticleAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="5xW1rdPIcMGF"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WTr8p8MFYq9y" comment="        Initialize a ParticleAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="foUBcd9aMytu" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="xkpJamUuoecp" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Pzu8r0hNUZUH" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="22XzP2PwcSok" comment="actions:&#xa;    play_sound:&#xa;        sound:&#xa;            type: str&#xa;            default: ''&#xa;        loop:&#xa;            type: bool&#xa;            default: False&#xa;    stop_sound:&#xa;        sound:&#xa;            type: str&#xa;            default: ''&#xa;    if_sound_is_playing:&#xa;        sound:&#xa;            type: str&#xa;            default: ''&#xa;        invert: common_invert&#xa;" name="SoundAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="Nv14dl1FYcDi"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JKFrwQaveTVi" comment="        Initialize a SoundAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="D3lpWHYJRJVk" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="oAnCJpzWGgH8" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ApKYNdYgynVs" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pr1HfaBOEzMF" comment="actions:&#xa;    set_alarm:&#xa;        apply_to: common_apply_to&#xa;        steps:&#xa;            type: int&#xa;            default: 0&#xa;        alarm:&#xa;            type: int&#xa;            default: 0&#xa;    sleep:&#xa;        milliseconds:&#xa;            type: int&#xa;            default: 1000&#xa;        redraw:&#xa;            type: bool&#xa;            default: True&#xa;    set_timeline:&#xa;        timeline:&#xa;            type: str&#xa;            default: ''&#xa;        position:&#xa;            type: int&#xa;            default: 0&#xa;        start:&#xa;            type: bool&#xa;            default: True&#xa;        loop:&#xa;            type: bool&#xa;            default: False&#xa;    set_timeline_location:&#xa;        apply_to: common_apply_to&#xa;        position:&#xa;            type: int&#xa;            default: 0&#xa;        relative: common_relative&#xa;    set_timeline_speed:&#xa;        apply_to: common_apply_to&#xa;        speed:&#xa;            type: int&#xa;            default: 1&#xa;        relative: common_relative&#xa;    start_resume_timeline:&#xa;        apply_to: common_apply_to&#xa;    pause_timeline:&#xa;        apply_to: common_apply_to&#xa;    stop_timeline:&#xa;        apply_to: common_apply_to&#xa;" name="TimingAction">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="uhTBhmkXYppQ"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="sYmQNbpR5PEd" comment="        Initialize a TimingAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="KsxPF90K0zwT" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="5rzbUblhNK58" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Cinkoazg8l5W" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="e2DVdutzJQiN" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cvgIfrUidRa1" comment="actions:&#xa;    set_variable_value:&#xa;        apply_to: common_apply_to&#xa;        variable:&#xa;            type: str&#xa;            default: test&#xa;        value:&#xa;            type: str&#xa;            default: '0'&#xa;        is_global:&#xa;            type: bool&#xa;            default: False&#xa;        relative: common_relative&#xa;    if_variable_value:&#xa;        apply_to: common_apply_to&#xa;        variable:&#xa;            type: str&#xa;            default: test&#xa;        test: common_test&#xa;        value:&#xa;            type: str&#xa;            default: '0'&#xa;        invert: common_invert&#xa;    draw_variable_value:&#xa;        apply_to: common_apply_to&#xa;        variable:&#xa;            type: str&#xa;            default: test&#xa;        position.x: common_position&#xa;        position.y: common_position&#xa;        relative: common_relative&#xa;" name="VariableAction">
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iZhGZYIV3Moc" comment="        Initialize a VariableAction instance.&#xa;        :param action_name: Name for the new action of this type&#xa;        :type action_name: str&#xa;        :param settings_dict: Optional map of parameter values&#xa;        :type settings_dict: dict&#xa;        :param kwargs: Set parameter values using named arguments&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Hkm5NEYr9hwU" type="GqxIRxJtYY5A" value="" name="action_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="P2irMJ42qlIO" type="GqxIRxJtYY5A" value="" name="settings_dict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="k46CIpywsAPT" name="events">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XWJw4Mll0gKA" name="Event">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="pqh9aGi8IeXv"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="727PeeJznVIL" comment="        Register a class (at init time) to make it possible to search through&#xa;        them for a particular action name.&#xa;        :param eventtype: A subclass for registration&#xa;        :type eventtype: Event&#xa;" name="register_new_event_type">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ZLYKqqfJZ5Gy" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="UiPzPOVU5oXT" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="PjdqZxpgxw4b" type="GqxIRxJtYY5A" value="" name="eventtype"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="RlRWZwxydbmD" comment="        Answer whether the event class handles the named event.&#xa;        :param event_name: The name of an event&#xa;        :type event_name: str&#xa;        :return: True if the event is handled, False otherwise&#xa;        :rtype: bool&#xa;" name="find_event_by_name">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="JzsxYe84ExXi" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="YbrVWt43EcN3" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="S3Mz6cyVON1v" type="GqxIRxJtYY5A" value="" name="event_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="rbj5B66d7SdB" comment="        Return an event instance of the right type, by searching for the&#xa;        event type in the registry.  Event parameters may be applied to the&#xa;        returned instance.&#xa;        :param event_name: The name of the new event instance&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing parameters to apply to the new&#xa;            instance, or None&#xa;        :type event_params: dict|None&#xa;        :return: A new event instance&#xa;        :raise: UnknownEventError if the named event is not found&#xa; no event type handles the named event" name="get_event_instance_by_event_name">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="8QRlcZuRo7S2" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="3ZgPwgKFdCAB" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="pGD3Ekj5LS8W" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="YF7efipiHU7D" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rB7AbDeASlm8" comment="        Create a new Event instance.  Meant to be called by subclasses.&#xa;        :param event_name: The event's name&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the new event's parameters, or&#xa;            None&#xa;        :type event_params: dict|None&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="rmMftohiymqZ" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="SZoj3wvBMKuw" type="GqxIRxJtYY5A" value="" name="event_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0UhSETYg3NN4" comment="        Retrieve an event parameter from the event_params attribute.&#xa;        :param item_name: A parameter name&#xa;        :type item_name: str&#xa;        :return: The contents of the named parameter, if found&#xa;        :raise: KeyError if the named parameter isn't found&#xa;" name="__getitem__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="gnVcZLBZor00" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="HIEda8XSvt7m" type="GqxIRxJtYY5A" value="" name="item_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KWeLt1OAIclq" comment="        Set an event parameter in the event_params attribute.&#xa;        :param item_name: A parameter name&#xa;        :type item_name: str&#xa;        :param val: The parameter's new value&#xa;" name="__setitem__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="cTks5WinnzRv" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="kHIfAOSoBvQi" type="GqxIRxJtYY5A" value="" name="item_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="EaG0REyjkc5c" type="GqxIRxJtYY5A" value="" name="val"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LriUm8CyiQz9" name="repr_event_strings">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="extNYwzANj0Q" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="DgDyfesyVaSF" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="idEP3BYg8P1e" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="apPZqzH0Xf26" name="AlarmEvent">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="9BDON2L3jz56"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hcFQbIU84P0o" comment="        Create an AlarmEvent instance with the given name and parameters.&#xa;        :param event_name: The name of an AlarmEvent&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the event's parameters, or None&#xa;        :type event_params: dict|None&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="bPVfmWU91bNT" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="PX9ES0rLBUiy" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="9AtwpC8WmLuN" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="l3k1G1B68R7o" name="CollisionEvent">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="0YRnB1EUuiz5"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="TDqNtnQZa2IS" name="find_collision_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="yiTYilysP4B9" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ae5LjgmqRI2e" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="u5q4VpPw2DHv" type="GqxIRxJtYY5A" value="" name="event_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="iwx9Czo62eAX" comment="        Override the base class find_event_by_name, since the collision event&#xa;        name is really just a prefix.&#xa;        :param event_name: The name of a collision event&#xa;        :type event_name: str&#xa;        :return: True if the event name&#xa;" name="find_event_by_name">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="1uM4WVZx31Qm" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="TYRTjjMiRpG9" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="aF0yH95z326G" type="GqxIRxJtYY5A" value="" name="event_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="klUBajI9wG7B" comment="        Create a CollisionEvent instance with the given name and parameters.&#xa;        CollisionEvent name must match the pattern:&#xa;        &quot;collision_&lt;``objname``>&quot;. The existence of an object type matching&#xa;        ``objname`` is not checked.&#xa;        :param event_name: The name of a CollisionEvent&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the event's parameters, or None&#xa;        :type event_params: dict|None&#xa; self.name = ev_info[0]" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="WvSQCXZahh1t" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="QC8TCEhD74Fb" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZnZaozMWipfJ" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tj4ylIaI59sr" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="6CNpz26TvWt7" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8Df6Qeh8ZEH7" name="DrawEvent">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="VctBIjZ6YTT6"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zs4WLVctYQQ6" comment="        Create a DrawEvent instance with the given name and parameters.&#xa;        :param event_name: The name of a DrawEvent&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the event's parameters, or None&#xa;        :type event_params: dict|None&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="haHDyfJUV7LR" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ysnrvbad3Pui" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="WEsCUDBS5DyQ" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gt4jHwPlAHxd" name="KeyEvent">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="U65ZK3yzbDCY"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="jdYIokqhEr6o" comment=" check for a suffix default to key down" name="find_key_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="LfrZUxMdqN0d" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Bv3OpzrcM4az" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="FB5Xrk4YLdp9" type="GqxIRxJtYY5A" value="" name="event_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="MrGgtog90lep" comment="        Override the base class method&#xa;        :py:meth:`Event.find_event_by_name`, which doesn't handle the keyup or&#xa;        keydown suffixes.&#xa;        :param event_name: The name of a keyboard event&#xa;        :type event_name: str&#xa;        :return: True if the event is known, False otherwise&#xa;        :rtype: bool&#xa;" name="find_event_by_name">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="CamAJOzk2LYM" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="TgOoJDvdqmCJ" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="hWwYtw9DlNud" type="GqxIRxJtYY5A" value="" name="event_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WTzLE9eveYRV" comment="        Create a KeyEvent instance with the given name and parameters.&#xa;        :param event_name: The name of an KeyEvent&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the event's parameters, or None&#xa;        :type event_params: dict|None&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="O5H0dgW6FFJC" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="TZjEwdr8BbIS" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="xGC0biK89HTN" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="q8I1iZTdpdbQ" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="LvWUAzqX27Xg" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YZ3wYIMM5YlJ" name="MouseEvent">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="4xrfdsnCNKRP"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cJ4zbWMdOoyp" comment="        Create a MouseEvent instance with the given name and parameters.&#xa;        :param event_name: The name of a MouseEvent&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the event's parameters, or None&#xa;        :type event_params: dict|None&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="MGdk5ZYxlKWD" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="uBoZUim1xMfl" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="fabvM5nyOswz" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Lyoghm6tTKr8" name="ObjectStateEvent">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="yh5SHXh0AtNC"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="an6jhTtlMhuf" comment="        Create an ObjectStateEvent instance with the given name and parameters.&#xa;        :param event_name: The name of an ObjectStateEvent&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the event's parameters, or None&#xa;        :type event_params: dict|None&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="hhg4MahqKz7g" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="WkIHMbjk03ck" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="CYO2bU89HEqw" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2GEyarhFRJ9l" name="OtherEvent">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="Mwhkmbh8sIrv"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="EQL4iCzYZn9E" comment="        Create an OtherEvent instance with the given name and parameters.&#xa;        :param event_name: The name of an OtherEvent&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the event's parameters, or None&#xa;        :type event_params: dict|None&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="qpwNa6bh1YMv" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="7vwhvcqkyFya" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="kxZAaHNohgsO" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="k46CIpywsAPT" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bCmkgTjndajQ" name="StepEvent">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="kpwW8qtjDMPz"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KAWVWtTNkZGA" comment="        Create a StepEvent instance with the given name and parameters.&#xa;        :param event_name: The name of a StepEvent&#xa;        :type event_name: str&#xa;        :param event_params: A dict containing the event's parameters, or None&#xa;        :type event_params: dict|None&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ZUXH4lR3Jcfw" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1ZBcdxw9QzHR" type="GqxIRxJtYY5A" value="" name="event_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="nmCRGVCYdg3A" type="GqxIRxJtYY5A" value="" name="event_params"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2GSLg8hm6juR" name="action_sequences">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="2GSLg8hm6juR" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="yrqFX5ySww5V" name="ActionSequence">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="mqS4aN4ATBTE"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="M4KnFo2XfJYk" comment="        Create an event action sequence from its YAML representation.&#xa;        The expected format is as follows::&#xa;          [{&lt;action_name>: { &lt;action_param>:&lt;action_value>, .. }, ..., ]&#xa;        :param sequence_repr: The YAML object containing action sequence data&#xa;        :type sequence_repr: yaml.load() result&#xa;        :return: The action sequence described in the YAML object&#xa;        :rtype: ActionSequence&#xa; print(&quot;New action: {}&quot;.format(next_action))" name="load_sequence_from_yaml_obj">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="fcNHbNSwRkhe" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Enmxs2D2Jt4S" type="GqxIRxJtYY5A" value="" name="sequence_repr"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WhCC0iwDVgAN" comment="Wrap the outermost ActionSequenceBlock.: The main block, containing all actions in sequence" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="jNN0GSSw2nBd" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="BbXaMDFsuR2v" comment="        Add a new action to the end of the sequence.&#xa;        :param action: The name of a defined action, or an Action instance&#xa;        :type action: str|Action&#xa;" name="append_action">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="kmlmXvNiWvJq" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="9w6ddGyMbKKr" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8Wj0vlt4gzfJ" comment="        Iterate through every action in the ActionSequence.&#xa;        :return: Generator function&#xa;        :rtype: generator&#xa;" name="get_next_action">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="FcdqwvggfPSC" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="IpvniCdogMpb" comment="        Produce the YAML representation of the action sequence.&#xa;        :param indent: Number of spaces to indent each line&#xa;        :type indent: int&#xa;        :return: YAML string&#xa;        :rtype: str&#xa; print(&quot;first item match for '{}': {}&quot;.format(aline, minfo)) print(&quot;match pos:{}&quot;.format(mpos))" name="to_yaml">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="XOVClvO4kHrR" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="6idkiJ1vvckp" type="GqxIRxJtYY5A" value="" name="indent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="RUF7p2gtjKdR" name="pretty_print">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="beKUG4JnQoxC" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jJGRb5q0X66M" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="6mFp4qEfUZ9i" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="2GSLg8hm6juR" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tQtp1bmFWTII" comment="    Represent a block of action statements.&#xa;    All statements are placed into a block (even if just the 'main' block) or&#xa;    into conditionals within a block.  The first action in the main block&#xa;    is set to None.&#xa;    :param action: Usually a start_of_block action&#xa;    :type action: Action|None&#xa;    :param main_block: True if this is the main (outermost) block&#xa;    :type main_blocK: bool&#xa;" name="ActionSequenceBlock">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="VPewCSQhrEpF"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="azbQDOdftgdB" comment=" main block doesn't start with an explicit action, so action==None  is ok.  Remember this when trying to use self.action in any  methods, including superclasses!" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Q3IJjvSmlkai" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="3rKqxHch2esE" type="GqxIRxJtYY5A" value="" name="action"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="wMtbTSS3R3Rd" type="GqxIRxJtYY5A" value="" name="main_block"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2DN2pGFja8K3" comment=" Called by add_statement() when an action is meant for this block. :param statement: New statement to add to the block :type statement: ActionSequenceStatement the main block is never explicitly &quot;closed&quot;" name="_append_statement">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="nx1YhaHhncka" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="bm50oUdEXuXF" type="GqxIRxJtYY5A" value="" name="statement"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qzJR5dSeNVfB" comment="        Add a new statement to an open block.&#xa;        The action sequence &quot;magic&quot; happens here.  Normal statements, &quot;if&quot;&#xa;        conditionals and blocks can be added to the current block.  Open&#xa;        conditionals (no clause yet) or blocks (no &quot;block_end&quot; action) can&#xa;        receive new statements.  An &quot;else&quot; action can be attached to an &quot;if&quot;&#xa;        conditional.  All statements exist either inside a block (there is&#xa;        always a &quot;main&quot; block) or a conditional.&#xa;        :param statement: New statement to add to the block&#xa;        :type statement: ActionSequenceStatement&#xa; print(&quot;Adding statement: {} .. &quot;.format(statement)) If the last statement's conditional is still open, this statement  belongs there.  Otherwise, add it to this block print(&quot;---> to last conditional&quot;) If the last statement's block is still open, this statement  belongs there.  Otherwise, add it to this block print(&quot;---> to last block&quot;) print(&quot;---> to current block&quot;)" name="add_statement">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="KhC5KwfAtwZx" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="0GPV8ukwpkSV" type="GqxIRxJtYY5A" value="" name="statement"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="X0buVG6TVTzb" comment="        Collect the conditional's list of actions.&#xa;        This method retrieves all the collected statements inside a&#xa;        block into a simple list.  This aids with unit testing&#xa;        and allows an action sequence to be serialized to storage.&#xa;        The deserialized simple list can be expanded into an action&#xa;        sequence when the application starts up.&#xa;        :return: A list of the actions wrapped in the If conditional&#xa;        :rtype: list&#xa;" name="get_action_list">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="MhXBRyglftqz" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nT8fPfcwdDp9" comment="        Display the action sequence block as indented code.&#xa;        :param indent: Number of spaces to indent&#xa;        :type indent: int&#xa;" name="pretty_print">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="0aSfTGdFkju7" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="SvcvOZWkH2ui" type="GqxIRxJtYY5A" value="" name="indent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OU22hr97kj26" comment="        Iterate through each action within a block.&#xa;        :return: Generator function&#xa;        :rtype: generator&#xa;" name="walk">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="JZpYbjEbJgEl" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xryfaqkxKkxz" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="b67Jn9Q4gFcH" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="2GSLg8hm6juR" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cgp6Lc9DptPV" comment="    Represent a simple conditional ('else' is the only kind this fits).&#xa;    :param action: The action to wrap into the conditional&#xa;    :type action: Action&#xa;" name="ActionSequenceConditional">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="tC7HRfEf2UKe"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="93R9YjlvGsLH" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="BliXDZLMbkU9" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="TzthRbFVS0O8" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UF2k8N0ZLtEk" comment="        Attempt to add a statement to the conditional.&#xa;        Given a statement, try to add it to the current conditional.  If the&#xa;        clause is empty, set its statement.  If the clause holds an open&#xa;        block or conditional, pass it on.&#xa;        :param statement: New statement to add to the conditional&#xa;        :type statement: ActionSequenceStatement&#xa;        :return: True if there was room for the new statement, otherwise False&#xa;        :rtype: bool&#xa; basic type check the statement is now the conditional clause the statement fits within the conditional clause's block the contained conditional found a place for the statement" name="add_statement">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="GUrrFLyjYzRe" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="SUEsUa0fJjBW" type="GqxIRxJtYY5A" value="" name="statement"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KPDfIQOkucaM" comment="        Collect the conditional's list of actions.&#xa;        This method retrieves all the collected statements inside a simple&#xa;        conditional into a simple list.  This aids with unit testing and&#xa;        allows an action sequence to be serialized to storage.  The&#xa;        deserialized simple list can be expanded into an action sequence&#xa;        when the application starts up.&#xa;        :return: A list containing the conditional's wrapped actions&#xa;        :rtype: list&#xa;" name="get_action_list">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Ab0UIB0YfrOu" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="AKbjJ1NeQZHj" comment="        Display an action sequence simple conditional as indented code&#xa;        :param indent: Number of spaces to indent&#xa;        :type indent: int&#xa;" name="pretty_print">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="OsP4inws8YZP" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="zfRtF2DQbDut" type="GqxIRxJtYY5A" value="" name="indent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Zx3zWJgTw6MC" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="6XahlSY7KvB0" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="2GSLg8hm6juR" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kDjaHh8ese0C" comment="    Clone of the ActionSequenceConditional class.&#xa;    Named for convenience to be used in a ActionSequenceConditionalIf.&#xa;    :param action: The action to wrap into the 'else' conditional&#xa;    :type action: Action&#xa;" name="ActionSequenceConditionalElse">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="JxQ4uPtd6Vxd"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="RIAWl67ewdky" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="XPq8QFfpVpJH" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Duj3o28OTpnW" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="2GSLg8hm6juR" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="j8tpeSCDNGAr" comment="    Represent an entire if/else conditional.&#xa;    The 'else' clause is also placed here, to avoid having to search earlier&#xa;    statements to see if there is a free 'if' conditional that matches the&#xa;    'else'.&#xa;    :param action: The action to wrap into the 'if' conditional&#xa;    :type action: Action&#xa;" name="ActionSequenceConditionalIf">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="XpKTvefzCDev"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UgwerYZXibVo" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="OdXSTXQvBKZ3" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="nRa5HC1Xy8A0" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="t6Ybh1PVS0aj" comment="        Attempt to place the given statement into the clause for the 'if'.&#xa;        If there is already a block or another conditional, see if the new&#xa;        statement will be accepted there.  If not, check whether the new&#xa;        statement is an 'else' condition, and that no 'else' condition already&#xa;        exists.  If there is an 'else' condition that hasn't received a&#xa;        statement yet, add it there.  If the 'else' statement exists and&#xa;        contains another conditional or block, see if the new statement&#xa;        will be accepted there.&#xa;        :param statement: New statement to add to the conditional&#xa;        :type statement: ActionSequenceStatement&#xa;        :return: True if there was room for the new statement, otherwise False&#xa;        :rtype: bool&#xa; else clause had a place for the new statement" name="add_statement">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="8xMIHtLAztkf" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="AcE6iN660bZR" type="GqxIRxJtYY5A" value="" name="statement"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="u7AK7i2FIGL1" comment="        Display an action sequence if/else conditional as indented code.&#xa;        :param indent: Number of spaces to indent&#xa;        :type indent: int&#xa;" name="pretty_print">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Hi1FZjuTr2lw" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="dP7c0e37bOPr" type="GqxIRxJtYY5A" value="" name="indent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="inC14V2ft7Hr" comment="        Iterate through each action within a Conditional.&#xa;        :return: Generator function&#xa;        :rtype: generator&#xa; incomplete &quot;if&quot; path (can only happen to final action in list) &quot;if&quot; not executed, and no &quot;else&quot; path no need to return the &quot;else&quot; action itself, it does nothing" name="walk">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="mLyLjLCy1CBa" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="v51m5nhoatpc" comment="        Collect the conditional's list of actions.&#xa;        This method retrieves all the collected statements inside a&#xa;        conditional into a simple list.  This aids with unit&#xa;        testing and allows an action sequence to be serialized&#xa;        to storage.  The deserialized simple list can be expanded into an&#xa;        action sequence when the application starts up.&#xa;        :return: A list of the actions wrapped in the If conditional&#xa;        :rtype: list&#xa;" name="get_action_list">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="MpIFuX7es3yZ" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="NAWOMhxGly0q" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="jhcKYPwtCC87" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="2GSLg8hm6juR" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="B0mhKN2Xqx8Y" name="ActionSequenceStatement">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="b43mRa0jMRxv"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="RConblgDPhMP" comment="        Given a name or Action, retrieve its ActionSequenceStatement.&#xa;        Provide a simple static method to retrieve the right statement&#xa;        representing the given action: if/else condition, block, or&#xa;        executable statement.  Can also accept a string containing the name&#xa;        of the action, in which case a new action will be retrieved with&#xa;        its parameters filled in with the supplied kwargs.&#xa;        :param action: An action name, or Action instance&#xa;        :type action: str|Action&#xa;        :param kwargs: Optional keyword arguments to apply to the named action&#xa;        :return: The appropriate action sequence statement&#xa;        :rtype: ActionSequenceStatement&#xa; if given a string, see if it names a known action" name="get_sequence_item_from_action">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Q4eolyB6dk9O" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="NgZ3nQ1EHVW8" type="GqxIRxJtYY5A" value="" name="action"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="6JWmAitcshNR" type="GqxIRxJtYY5A" value="" name="*"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="89aQe4WkO2XY" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ZSQCAXYHg9hI" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="kO8a4W1SadGJ" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="DD3ZDY6vuEVy" comment="        Return the statement's action list.&#xa;        This method places the action inside a list of length 1.&#xa;        This aids with unit testing, and it allows an action sequence to be&#xa;        serialized to storage.  The deserialized simple list can be expanded&#xa;        into an action sequence when the application starts up.&#xa;        :return: A single-element list containing the wrapped action&#xa;        :rtype: list&#xa;" name="get_action_list">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="kWPI9fag5ytE" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="VPVAWCSiNTHa" comment="        Display the name of the wrapped action as indented code&#xa;        :param indent: Number of spaces to indent&#xa;        :type indent: int&#xa;" name="pretty_print">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="vBHy98CeWhm2" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="zNVucyqKUFdb" type="GqxIRxJtYY5A" value="" name="indent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rDkEg2meNFYz" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="DOIfctEV4UTD" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KZvADSEhvEzZ" name="code_blocks">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="KZvADSEhvEzZ" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="b7GCDECjDOPq" name="CodeBlock">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="WACud8hquaHH"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PyIJZZZsFL0p" comment="        Initialize a new code block.&#xa;        A function map, if supplied, represents the external function table&#xa;        made available to the code block.  Void argument lists can be&#xa;        represented with an empty list.  The number and type of arguments&#xa;        supplied assist with syntax checking.&#xa;        :param name: The name assigned to this code block&#xa;        :type name: str&#xa;        :param module_context: A new module for the Python blocks to be loaded&#xa;            into&#xa;        :type module_context: imp.new_module&#xa;        :param funcmap: A dict with &lt;function_name>: [arg_type1, .., arg_typeN]&#xa;            entries&#xa;        :type funcmap: dict&#xa;        :param astree: the abstract syntax tree produced by pyparsing (stored&#xa;            in an attribute, but not currently used)&#xa;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="6uCuoscPdirg" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="fby2PJdTqwij" type="GqxIRxJtYY5A" value="" name="name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="dm6U3OwSMEjv" type="GqxIRxJtYY5A" value="" name="module_context"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="lIm0bmqEMmHj" type="GqxIRxJtYY5A" value="" name="funcmap"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4n8R1pKm66nh" comment="        Supply a dict for &lt;function_name>: [arg_type1, .., arg_typeN] entries.&#xa;        This helps the syntax check phase know how many args to expect.  Later,&#xa;        the arg type list can be checked to make sure that supplied argument&#xa;        types match the function call signature.&#xa;        :param func_map: The dict containing function name to argument type&#xa;            list mappings&#xa;        :type func_map: dict&#xa;" name="add_to_func_map">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uwHXc8DhwJ8x" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="rbwBNDuR54Kt" type="GqxIRxJtYY5A" value="" name="func_map"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9SiFXTwM4qXP" comment="        Append an assignment operation to the current block.&#xa;        When the parser finds a assignment match, the assignee and '='&#xa;        operator need to be added here, since the parser won't add these&#xa;        itself.  Push these and the right-hand side of the assignment (which&#xa;        were already collected in self.scratch) onto the current stack.  '='&#xa;        will always go at the end.  An optional ``global`` keyword can precede&#xa;        the asignee, to make it part of the global symbol table.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa; print(&quot;assignment scratch: {}&quot;.format(self.scratch))" name="push_assignment">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="jbQooJU9OqRm" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1Pp6R9yL5Fth" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="N6OHQUDXvvmQ" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="OgmQXHnYgcd5" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LeJGX5gtlQHG" comment="        Insert a new conditional block into its container block.  Keep track of&#xa;        nesting.&#xa;        When the parser matches a conditional's block, it's time to close it&#xa;        (the instructions were already collected on the current stack).  Keep&#xa;        track here of the block level decrement, either from a child inner-node&#xa;        up to its parent, or the top-most inner block up to the outer block.&#xa;        Push a copy of the child inner node onto its parent's stack.  This&#xa;        method changes the stack reference.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa; print(&quot;inner block #{}\n{}&quot;.format(self.inner_block_count-1,self.stack)) print(&quot;append to {}&quot;.format(self.inner_blocks[self.inner_block_count-1])){:d}&quot;.format(self.inner_block_count - 1)) print(&quot;inner block #0\n{}&quot;.format(self.stack))" name="push_conditional_block">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="tWiuLrhRWdx0" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="h4pLfSQO1qBp" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="8fwWVNIqzb4U" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="eiNN8eenhT6K" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zDoymtTQZolg" comment="        Create a new block for a conditional.&#xa;        When the parser matches if/elseif/else keywords, anticipate that a new&#xa;        block will be added. Increment the block level -- either outer block to&#xa;        topmost inner block, or parent inner block to child inner block.  This&#xa;        is optimistic, since the parser might not recognize the pattern&#xa;        following the keyword, but that signals a syntax error, in which case&#xa;        the stack level is moot.  Collect the keyword name and push it onto the&#xa;        parent's stack.  This method changes the stack reference.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa; print(&quot;push {}&quot;.format(toks.asList())){:d}&quot;.format(self.inner_block_count - 1)) print(&quot;outer block is now:\n{}&quot;.format(self.outer_block)){:d}&quot;.format(self.inner_block_count - 1))" name="push_if_cond">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="N4lPALn8dZdX" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="TPT8qaSj48bN" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="0IoUujUtuJpg" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="AI4h5oNWDpe2" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="H5OBMEqUUsCZ" comment="        When the parser matches a comparison, push it onto the current stack.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa;" name="push_comparison">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Z3JIgQEfKHFm" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="gX5uMhwjlf9w" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="0u4cRf7ilWs5" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="kiaCakmFHr9c" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wMSfqKjY2Jlb" comment="        Count the arguments supplied in a function call.  Throw an exception&#xa;        if the count doesn't match the function signature.&#xa;        This is where the parser needs help, since it has no idea how many args&#xa;        a function expects.  The external function table in functionmap is&#xa;        checked against the supplied function name to determine its argument&#xa;        count.  Unfortunately, in the case where function results are placed&#xa;        directly into function args, the whole mess appears in the ``toks``&#xa;        list.  The saving grace is that functions are checked from inner ->&#xa;        outer, so it's possible to skip over later ``toks`` containing function&#xa;        names, assuming that their argument lists will be checked separately.&#xa;        This still implies that the other functions in the list need to be&#xa;        checked to find out how many args will be skipped (and even then, it's&#xa;        only important for functions that have more than 1 arg, since the arg&#xa;        count is based on how many ','s are found).&#xa;        TODO: Argument type-checking. Assume this is as simple as number vs.&#xa;        string, and strings aren't supported yet.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa;        :raise: ParseFatalException for function call errors&#xa; print(&quot;function w/ args: {}&quot;.format(toks)) assume embedded function calls have been validated, just skip  them to count the args in the outer function call unknown function encountered keep track of strings, to ignore functions named inside a string if this function takes no arguments, we shouldn't be here.. check whether an embedded function call should be skipped print(&quot;checking {}..&quot;.format(tok)) future commas imply > 1 arg to skip print(&quot;skip count now is: {}&quot;.format(skip_count))" name="count_function_args">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="mPkkZwLCKc70" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1XqIMxsvyCCc" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="cQHvfWhar7Dh" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="SwESFz3GUrXq" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7mYwtlbLipmv" comment="        Collect the function name and arguments from a function definition.&#xa;        Validate the argument types.  Create a new block within the functionmap&#xa;        and point the frame at it, so future constructs will be placed in the&#xa;        function.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa;        :raise: ParseFatalException if the function already exists, has&#xa;            invalid argument types, or has anything following ``void``&#xa; print(&quot;New functionmap: {}&quot;.format(self.functionmap))" name="push_func_args">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="lhUoYeQJ9APE" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="opAIff7R2rAc" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="nVm57r5Cdb6U" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Nio3XayKN8a2" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1SPe4V6PBuSh" comment="        Take the current function block frame and reduce it, before switching&#xa;        the frame back to the outer_block.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa; reduce the function source Force all functions to return a value.  If the final line is  not 'return', return the &quot;uninitialized&quot; value reset the stack and frame" name="push_func_block">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="XNxog2caUhc7" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="SQ1qXZqIHK4n" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="wU73eUGfwdHy" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="6MLIGnzhCyXh" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Bqk5T22ZMNpa" comment="        When the parser finds an &quot;atom&quot;: PI, e, a number, a function call, a&#xa;        '(' ')' delimited expression, or bare identifier, it will be pushed&#xa;        onto a scratch list.  A copy of the scratch list is later pushed onto&#xa;        the current stack reference when a logical grouping is found (an&#xa;        assignment statement or conditional block).&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa; print(&quot;atom: {}&quot;.format(toks.asList())) print(&quot;scratch is now: {}&quot;.format(self.scratch))" name="push_atom">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="MNPULSII4emO" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="9mHLko2GAx4o" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="zeOUJybSoLWH" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="LYphteI2RXN9" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dLoPfKhysUem" comment="        When the parser finds an operator ('^', '*', &quot;/&quot;, &quot;%&quot;, &quot;+&quot;, &quot;-&quot;, &quot;&lt;&quot;,&#xa;        &quot;&lt;=&quot;, &quot;>&quot;, &quot;>=&quot;, &quot;==&quot;, &quot;!=&quot;), this is called to place it onto a&#xa;        scratch list, using operator replacements to rename it to an actual&#xa;        python method.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa; print(&quot;pre-op: {}&quot;.format(toks.asList()))" name="push_first">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="bYb6Zpv3K4aS" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="6woXRAfnX2Fq" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="UV9Z8tvjDj8s" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="2nquHUeOORtq" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vT98BI0D5p5L" comment="        From the original fourFn.py demo. Push 'unary -' to keep track of any&#xa;        terms that have been negated.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa;" name="push_u_minus">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="jugqySWoADxt" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Hije9aUi73mg" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="shjBjIbfjlnu" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1m56ZBPor8S0" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="TZWDII5J2BNb" comment="        Push the stack containing the arguments for a return keyword, followed&#xa;        by &quot;_return&quot;.&#xa;        :param parsestr: The entire string parsed by pyparsing&#xa;        :type parsestr: str&#xa;        :param loc: The location passed in by pyparsing&#xa;        :param toks: The iterable sequence of tokens parsed&#xa;        :type toks: iterable&#xa;" name="push_return">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ub9cOXJdQm1W" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="KnPBtq9ckpQg" type="GqxIRxJtYY5A" value="" name="parsestr"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="FuTP6QHZxlkD" type="GqxIRxJtYY5A" value="" name="loc"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="3qW51sgJf4UW" type="GqxIRxJtYY5A" value="" name="toks"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="AG561oJ5eoAd" comment="        Iterate over a list containing an expression, pre-calculating&#xa;        simple numeric operations and replacing the operands and operator&#xa;        with the result.  Repeat until no more changes are made.&#xa;        :param code_line: The list of the terms in an expression&#xa;        :type code_line: list&#xa; print(&quot;check op: {}&quot;.format(check_op)) print(&quot;found op: {}&quot;.format(check_op)) print(&quot;check if num: {}&quot;.format(rev_item)) the special case" name="reduce_line">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="UewuOvOXBRdB" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="gpwJrOplxwNL" type="GqxIRxJtYY5A" value="" name="code_line"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="FwGtiOWOBQh2" comment="        Iterate through each line within the given block of postfix expressions&#xa;        and recursively through sub-blocks, reducing numeric operations when&#xa;        found.&#xa;        :param block: A list of code lines, which are either lists themselves,&#xa;            or the marker strings '_if', '_elseif', or '_else'&#xa;        :type block: list containing lists and/or strings&#xa; handle the conditional block here, it's a list inside a list print(&quot;Reduce line: {}&quot;.format(code_line))" name="reduce_block">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u9f6bGFqATit" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="oVljR74tlzn8" type="GqxIRxJtYY5A" value="" name="block"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pEF1dx3PSn9r" comment="        Perform as much argument reduction as possible.  Operations on numeric&#xa;        values can be replaced with the results.&#xa;" name="reduce">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uDldCWl5gO9H" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cO5nrneg0tfd" comment="        Convert a line of game language into Python code.&#xa;        The hard work of arranging the postfix representation of a line of code&#xa;        into a line of executable Python code happens here.  The round-trip&#xa;        serves 2 purposes: the game language is essentially used for&#xa;        calculations, so doesn't need the full features of Python; and this&#xa;        effectively isolates and sanitizes user-written code to prevent it from&#xa;        adversely affecting the game engine.&#xa;        :param code_line: A list of postfix expression tokens for conversion&#xa;        :type code_line: list&#xa;        :param loc: The location of the line of code in the original source&#xa;        :type loc: 2-element array-like&#xa;        :param func_name: If this line is part of a function definition, the&#xa;            function's name&#xa;        :type func_name: None | str&#xa;        :raise: OpStackOverflowError if tokens were left over, or&#xa;            OpStackUnderflowError if expected tokens were missing&#xa;        :return: A line of Python code&#xa;        :rtype: str&#xa; perform a calculation, and place the result in the  op stack track argument types replace args and function call/operator with python  code string, keeping track of the result type if calling a function within a function block, append  a count+1 arg to limit recursion depth (this is to  prevent user code from crashing the game engine) the special case '=' must always be the last token for an assignment.  Time to store the value in the symbol table print(&quot;New op_stack: {}&quot;.format(op_stack)) apply the (possibly upgraded) result type to the remaining item" name="to_python_line">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="97b90Gkpxn3P" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="oh2EU96OLrzV" type="GqxIRxJtYY5A" value="" name="code_line"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Lja15jGi7MTw" type="GqxIRxJtYY5A" value="" name="loc"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="u7lFwllIULHZ" comment="        When supplied a block of code objects, produce the Python source code&#xa;        for contained conditionals and assignments, using appropriate&#xa;        indentation.&#xa;        :param block: The list of code lines in the block&#xa;        :type block: list of lists&#xa;        :param loc: The location of the source block in game language code&#xa;        :type loc: 2-element array-like&#xa;        :param func_name: If the block is inside a function definition, supply&#xa;            the function's name&#xa;        :type func_name: None | str&#xa;        :return: The list of Python source code lines&#xa;        :rtype: list&#xa; print(&quot;block start: col is now: {}&quot;.format(loc[1])) print(&quot;block end: col is now: {}&quot;.format(loc[1]))" name="to_python_block">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="kbyCvGjyox6g" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="5YFAui51pgBo" type="GqxIRxJtYY5A" value="" name="block"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="uvbqgeFbmzqg" type="GqxIRxJtYY5A" value="" name="loc"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="fBhTpqHkksYO" comment="        When a conditional is found in a code block, produce an executable line&#xa;        of Python source code containing the condition name, possibly followed&#xa;        by a condition (e.g. if, elseif), then a list of all the lines (and/or&#xa;        other conditionals) within its code block.&#xa;        :param conditional_name: The conditional's keyword (if, elseif, else)&#xa;        :type conditional_name: str&#xa;        :param block: The list of game engine source code lines inside the&#xa;            conditional&#xa;        :type block: list of lists&#xa;        :param loc: The location of the conditional in the game language&#xa;            source code&#xa;        :type loc: 2-element array-like&#xa;        :param func_name: If the conditional is inside a function definition,&#xa;            supply the function's name&#xa;        :type func_name: None | str&#xa;        :return: The list of lines of Python source code&#xa;        :rtype: list&#xa; print(&quot;{} {{{}}} to python&quot;.format(conditional_name, block))" name="to_python_conditional">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="v6YHyBX5Vmzo" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="UlzEkovSNteG" type="GqxIRxJtYY5A" value="" name="conditional_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="7MEtJLZwWFPM" type="GqxIRxJtYY5A" value="" name="block"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="3e4lWcAzL7D6" type="GqxIRxJtYY5A" value="" name="loc"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5Wkbj8vlmxWJ" comment="        Convert the postfix code representation into executable Python code.&#xa;        :return: The Python source code, inside a single string&#xa;        :rtype: str&#xa; the code block has to have SOMETHING in it, but if it only contains  function definitions, don't construct the run() method print(&quot;Python code:\n{}&quot;.format(&quot;\n&quot;.join(python_lines)))" name="to_python">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="XgGtoTxhYVwW" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="eUb9EYvJ5esm" comment="        Given a valid Python operation and a list containing its args, convert&#xa;        them into a string and eval() it.&#xa;        :param op_name: The name of the operator&#xa;        :type op_name: str&#xa;        :param args: The list of arguments to the operator&#xa;        :type args: list&#xa; print(&quot;eval {} {}&quot;.format(op_name, stargs)) true/false become ints" name="execute_operation">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="hE3mquWcg48N" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="mmXYj4pFi38U" type="GqxIRxJtYY5A" value="" name="op_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="V3C3Y6ZBYAIm" type="GqxIRxJtYY5A" value="" name="args"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6wcoziJUjTXI" comment="        Place all functions and executable code into the source code module's&#xa;        __dict__.&#xa;        :param import_list: The list of modules that need to be imported into&#xa;            the module&#xa;        :type import_list: None | list&#xa; print(&quot;exec {}&quot;.format(userfunc))" name="load">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="oALSEUpKOQ7L" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Z4R8Djsuvuel" type="GqxIRxJtYY5A" value="" name="import_list"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6QoqrL6QOVWb" comment="        Execute the ``run()`` function inside the Python code block.&#xa;        :param sym_tables: A mapping of 'globals' => global symbol table,&#xa;            'locals' => local symbol table&#xa;        :type sym_tables: dict&#xa;" name="run">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="hIo5ivOnJCbA" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ENVAH9t5JFVW" type="GqxIRxJtYY5A" value="" name="sym_tables"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WfZuA5VMQ0Wh" comment="        Perform a deep copy to another code block object.&#xa;        :param other: The code block instance to copy to&#xa;        :type other: :py:class:`CodeBlock`&#xa; other.stack = list(self.stack) other.frame = list(self.frame) other.scratch = list(self.scratch) other.inner_blocks = list(self.inner_blocks) print(&quot;Copied outer block:\n{}&quot;.format(other.outer_block))" name="copy_to">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="cl1uwa2SFbMP" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="7OkQdFuKYhNE" type="GqxIRxJtYY5A" value="" name="other"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="fpm5nGlucVIF" comment="Clear out all lists in preparation for a new parsing operation." name="clear">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="lBXHssVScVMY" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="KZvADSEhvEzZ" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5N0JyKgb7Qfu" name="CodeBlockGenerator">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="hOoHt4VcF2t7"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="6nIMnCRgZz9R" comment="        Create a new code block with the given program data.&#xa;        :param program_name: The name of the program&#xa;        :type program_name: str&#xa;        :param module_context: The module to place the code into&#xa;        :type module_context: imp.new_module&#xa;        :param source_code_str: A string containing the game language source&#xa;        :type source_code_str: str&#xa;        :param funcmap: A dict mapping function names to argument type info&#xa;        :type funcmap: dict&#xa;        :return: A new executable code block&#xa;        :rtype: :py:class:`CodeBlock`&#xa;" name="wrap_code_block">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="W0P3pOiDjl1F" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="uAMB7ZNOUBmn" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="b4oO646DpMXc" type="GqxIRxJtYY5A" value="" name="program_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="YyH5yOUqZpze" type="GqxIRxJtYY5A" value="" name="module_context"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ON3qWpd5sPTw" type="GqxIRxJtYY5A" value="" name="source_code_str"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="TX9IugtQd8WZ" type="GqxIRxJtYY5A" value="" name="funcmap"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="KZvADSEhvEzZ" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="t7gnYCOEGUBl" name="CodeBlockRuntimeError">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="zyEPzrRtz5eX"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="SisRnUw5Ugbx" comment="    Define the update_symbol function that changes symbol values (or creates&#xa;    new symbols) in generated code blocks.&#xa;    :param _symbols: The symbols dict containing ``locals`` and ``globals``&#xa;        keys, which each point to a :py:class:`SymbolTable`&#xa;    :type _symbols: dict&#xa;    :param symname: The symbol name to look up&#xa;    :type symname: str&#xa;    :param value: The symbol's new value&#xa;" name="update_symbol">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ZB8WOLOhxA28" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="bqgVInTmwEEs" type="GqxIRxJtYY5A" value="" name="_symbols"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="JcoND6MfoE4c" type="GqxIRxJtYY5A" value="" name="symname"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="i0fAgE7F4miM" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="HOn3cpdIqITW" comment="    Define the get_symbol function that retrieves symbol values in generated&#xa;    code blocks.&#xa;    Always return a value, even if the symbol name is unknown, in which case&#xa;    the unitialized value will be returned.&#xa;    :param _symbols: The symbols dict containing ``locals`` and ``globals``&#xa;        keys, which each point to a :py:class:`SymbolTable`&#xa;    :type _symbols: dict&#xa;    :param symname: The symbol name to look up&#xa;    :type symname: str&#xa;    :return: The symbol's value&#xa; local variables can override globals" name="get_symbol">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="zpxn5QIYx26H" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="UYkYKStsezO0" type="GqxIRxJtYY5A" value="" name="_symbols"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="KkhGtiMA4ABf" type="GqxIRxJtYY5A" value="" name="symname"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="Ux76vT6DEmT7" comment="    Make a ``distance`` function that calculates the distance between two&#xa;    values available to game language code.&#xa;    :param _symbols: The symbols dict&#xa;    :type _symbols: dict&#xa;    :param start: First value&#xa;    :type start: Number&#xa;    :param end: Second value&#xa;    :type end: Number&#xa;    :return: The absolute value of the difference between start and end&#xa;" name="userfunc_distance">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="GTB3JjlcPh7o" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="UqFYyODvB9hF" type="GqxIRxJtYY5A" value="" name="_symbols"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="XznU1rkTprai" type="GqxIRxJtYY5A" value="" name="start"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="LgvXQNcuBpR9" type="GqxIRxJtYY5A" value="" name="end"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Dc2NjjcHgPjh" type="GqxIRxJtYY5A" value="" name="count"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="4jgFW7MjiM6R" comment="    Make a ``randint`` function that creates a random integer available to game&#xa;    language code.&#xa;    Return a negative int less than the specified maximum value and greater&#xa;    than or equal to 0.  If the specified maximum value is negative, a negative&#xa;    integer between 0 and the maximum will be returned.&#xa;    :param _symbols: The symbols dict&#xa;    :type _symbols: dict&#xa;    :param max_int: The maximum integer value (returned values will always be&#xa;        less than ``max_int``, or greater if ``max_int`` is negative)&#xa;    :type max_int: Number&#xa;    :return: A new random integer&#xa;" name="userfunc_randint">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="RuwHTIRjPCOB" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="4ggk5QQKrZNA" type="GqxIRxJtYY5A" value="" name="_symbols"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="I7kforTqaA36" type="GqxIRxJtYY5A" value="" name="max_int"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="FPovjsLlZ1Wc" type="GqxIRxJtYY5A" value="" name="count"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="1qzcy2gDPS78" comment="    Make a ``time`` function that returns the current number of seconds since&#xa;    the Epoch available to game language code.&#xa;    :param _symbols: The symbols dict&#xa;    :type _symbols: dict&#xa;    :return: The integer portion of the number of seconds since the Epoch&#xa;    :rtype: int&#xa;" name="userfunc_time">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="E1mbStjnJbdm" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="LSusTOUtGPAh" type="GqxIRxJtYY5A" value="" name="_symbols"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="fZQ2jmDlcCLY" type="GqxIRxJtYY5A" value="" name="count"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="x5dBSns7NI96" comment="    Make a ``debug`` function that displays a string to stderr.&#xa;    :param _symbols: The symbols dict&#xa;    :type _symbols: dict&#xa;" name="userfunc_debug">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="hhErdWTQTqW1" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="3KpdUACgAyHc" type="GqxIRxJtYY5A" value="" name="_symbols"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="pzN8Y0sW5WfW" type="GqxIRxJtYY5A" value="" name="debug_str"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="HYdeoljr5YVa" type="GqxIRxJtYY5A" value="" name="count"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZmECzDTNtUoI" name="objects">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="ZmECzDTNtUoI" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hTXfwIQefHK6" name="ObjectType">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="8xzAunMvlqBJ"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="UStBBsFE1VuM" type="GqxIRxJtYY5A" comment="The name other resources will refer to this one by" initialValue="&quot;obj_&quot;" name="name"/>
          <UML:Attribute visibility="implementation" isSpecification="false" xmi.id="nNnflYfvYwwK" type="R03svvsthTIg" comment="A reference to the game engine, for executing game engine actions" name="game_engine"/>
          <UML:Attribute visibility="private" isSpecification="false" xmi.id="kYOJVLbPi2Zq" type="DDBvBTHjr27F" comment="A unique instance ID" initialValue="0" name="_id"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="gtPk5A097SCa" type="7qNNDsvzVr6m" comment="A list of instances of this object type" name="instance_list"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="obpXoi2WHPpk" type="7qNNDsvzVr6m" comment="For collideable object instances; left empty in base class" name="group"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="kO9QPjG5agof" type="7qNNDsvzVr6m" comment="A list of instances to delete following update()" name="instance_delete_list"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="omovEyW2aLZM" type="ARKixNq4EDQP" comment="A mapping of event regexs to handler methods" name="handler_table"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="1asGzg0h487T" type="7qNNDsvzVr6m" comment="A dict mapping event names to action sequences" name="event_action_sequences"/>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="mtVXkgoF9V3Q" comment="        Register object type subclasses, so load_from_yaml() can recognize the&#xa;        object types named in YAML files and create them.&#xa;        :param object_type: The new ObjectType subclass&#xa;        :type object_type: ObjectType&#xa;" name="register_object_type">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="j9A5q0Utv0uw" type="3JMWAQJnfwGH" value="" name="object_type"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="9Wk5bRJP6svk" comment="        Create a kwargs dict from the YAML parameters describing an object&#xa;        type.&#xa;        Every ObjectType knows how to interpret event action sequences.&#xa;        :param obj_yaml: The yaml.load() generated object&#xa;        :return: A dict mapping known parameters to the values defined in the&#xa;            YAML object&#xa;        :rtype: dict&#xa; print(&quot;Found '{}', passing {} to load..&quot;.format(kwarg, obj_yaml[kwarg]))" name="gen_kwargs_from_yaml_obj">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="vjcMY2MpimAI" type="ARKixNq4EDQP"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="e437Ew7LTrQ2" type="GqxIRxJtYY5A" value="" name="obj_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="6wiXlVsUc1XS" type="ARKixNq4EDQP" value="" name="obj_yaml"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="wXARtmNzi5VR" type="R03svvsthTIg" value="" name="game_engine"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="5DqPPPKdf8dZ" comment="        Create an object type from an object returned by yaml.load().&#xa;        :param yaml_stream: A file or stream containing the YAML string data&#xa;        :type yaml_stream: file-like&#xa;        :param game_engine: A reference to the main game engine&#xa;        :type game_engine: GameEngine&#xa;        :return: A new ObjectType with YAML-defined properties&#xa;        :type: :py:class:`ObjectType`&#xa; hash of 1 key, the object name 'events' key contains event -> action sequence mappings" name="load_from_yaml_obj">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="LaJnh6mpFce6" type="7qNNDsvzVr6m"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="66Vl62p2XzRO" type="ARKixNq4EDQP" value="" name="yaml_obj"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="D5wdxC21HXnN" type="R03svvsthTIg" value="" name="game_engine"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="Yk2giLB1yLzk" comment="        Create an object type list from a YAML-formatted file.&#xa;        Expected format::&#xa;            obj_type1:&#xa;              - obj_name1:&#xa;                  events:&#xa;                    &lt;event1_name>:&#xa;                      &lt;yaml representation for event action sequence>&#xa;                    ...&#xa;                    &lt;eventN_name>:&#xa;                      &lt;yaml representation for event action sequence>&#xa;              - obj_name2:&#xa;                ...&#xa;              ...&#xa;            obj_type2:&#xa;            ...&#xa;        For a description of the action sequence YAML format, see&#xa;        :py:meth:`~pygame_maker.actions.action_sequence.ActionSequence.load_sequence_from_yaml_obj`&#xa;        Each obj_typeN must match a registered object type's name.&#xa;        :param yaml_stream: A file or stream containing the YAML string data&#xa;        :type yaml_stream: file-like&#xa;        :param game_engine: A reference to the main game engine&#xa;        :type game_engine: GameEngine&#xa;        :return: A new ObjectType with YAML-defined properties&#xa;        :type: :py:class:`ObjectType`&#xa; print(&quot;Compare {} with {}&quot;.format(obj_type_name, reg_obj_type.__name__))" name="load_from_yaml">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="H1jWcuRIr9EP" type="7qNNDsvzVr6m"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="gZmsLFRWKMAG" type="uf5QGUH2nhjz" value="" name="yaml_stream"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="FgWnTFC7pw08" type="R03svvsthTIg" value="" name="game_engine"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UDUYDEJV82oM" comment="        Create a new type of object.&#xa;        :param object_name: Supply a name for the object type&#xa;        :type object_name: str&#xa;        :param game_engine: Supply the main game engine&#xa;            containing an event engine, language engine, sprite resources,&#xa;            sound resources, other object types, and handlers for certain game&#xa;            actions&#xa;        :type game_engine: GameEngine&#xa;        :param kwargs: Supply alternatives for default object properties:&#xa;            * visible (bool): Whether instances will be drawn [True]&#xa;            * solid (bool): Whether instances block other object instances&#xa;              (e.g. a platform) [False]&#xa;            * depth (int): Which layer object instances will be placed into [0]&#xa;            * sprite (str): Name of a sprite resource used as the image [None]&#xa; For collideable object instances; left empty in base class" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="G6wb75XzhljP" type="hTXfwIQefHK6"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="nnd0PMJeL0Bx" type="GqxIRxJtYY5A" value="" name="object_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="28nhb1wrfSe9" type="R03svvsthTIg" value="" name="game_engine"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="BtboWKbMLvKN" comment="        Given a sprite reference, add it to the list of instances of this&#xa;        object to be deleted.&#xa;        This allows for iterating through objects and flagging them for removal&#xa;        without trying to remove them inside the iterator.  Deletion occurs&#xa;        following the update() call for the object.&#xa;        :param instance: The ObjectInstance of this type to be removed&#xa;        :type instance: :py:class:`~pygame_maker.actors.object_instance.ObjectInstance`&#xa; a simple list manages deletions" name="add_instance_to_delete_list">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="z7Zs4ZT6hEnG" type="fQNZeFNnd8xK" value="" name="instance"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="69cQ4un1Vyt2" comment="        Generate a new instance of this object type in response to&#xa;            :py:meth:`create_instance`&#xa;        :param screen: The surface the instance will be drawn upon.  The&#xa;            instance can use this surface's width and height parameters to&#xa;            detect boundary collision events, which are queued in the event&#xa;            engine&#xa;        :type screen: :py:class:`pygame.Surface`&#xa;        :param settings: A hash of settings to be applied.  See kwargs entry&#xa;            in :py:meth:`~pygame_maker.actors.simple_object_instance.SimpleObjectInstance.__init__`&#xa;        :type settings: dict&#xa;        :param kwargs: Keyword arguments, in addition to or as an alternative&#xa;            to the settings dict&#xa;" name="make_new_instance">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Q66t4xwxxhty" type="fQNZeFNnd8xK"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Vo971WSyb0rg" type="KtnD5mmeXzoW" value="" name="screen"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="D9UPh7ixioiZ" type="ARKixNq4EDQP" value="None" name="settings"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pv5n4xN11ghp" comment="        Create a new instance of this object type.&#xa;        Every instance is assigned a unique ID, and a create event is queued&#xa;        to be passed on to the new instance.&#xa;        :param screen: The surface the instance will be drawn upon.  The&#xa;            instance can use this surface's width and height parameters to&#xa;            detect boundary collision events, which are queued in the event&#xa;            engine&#xa;        :type screen: :py:class:`pygame.Surface`&#xa;        :param settings: A hash of settings to be applied.  See kwargs entry&#xa;            in :py:meth:`~pygame_maker.actors.object_instance.ObjectInstance.__init__`&#xa;        :type settings: dict&#xa;        :param kwargs: Keyword arguments, in addition to or as an alternative&#xa;            to the settings dict&#xa; print(&quot;Create new instance of {}&quot;.format(self)) print(&quot;Create obj with args: '{}' and '{}'&quot;.format(settings,kwargs)) queue the creation event for the new instance" name="create_instance">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="bvwabdN9G7mN" type="fQNZeFNnd8xK"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="PkYfQDRbLv02" type="KtnD5mmeXzoW" value="" name="screen"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Z8ooabw0MSfk" type="ARKixNq4EDQP" value="None" name="settings"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9TrFEFPwXWbV" comment="        Override this method in subclasses that implement collision detection.&#xa;        :param other_obj_types: A list of other ObjectTypes to test&#xa;            for collisions with this one&#xa;        :type other_obj_types: array-like&#xa;        :return: A list of collision event names that were queued, or an&#xa;            empty list if none&#xa;" name="collision_check">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="pJU5QEQXfGmt" type="7qNNDsvzVr6m"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="gs344oKbx8NV" type="7qNNDsvzVr6m" value="" name="other_obj_types"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="TBpzgOU9YmUM" comment="        Update all instances of this object type.  This base class method only&#xa;        handles instances scheduled for deletion, and is meant to be called by&#xa;        a subclass's update() method after updating its instances.&#xa;" name="update"/>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JCvySfrtpesV" comment="        Draw all instances in response to a ``draw_self`` event.  Meant to be&#xa;        overridden if needed by a subclass.&#xa;        :param event: The ``draw_self`` event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="draw">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="RO2SMfy2Wz4a" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CqjzScUTy435" comment="        Return a list of the instances affected by the combination of an event&#xa;        and an action triggered by the event.  Meant to be overridden if needed&#xa;        by a subclass.&#xa;        :param action: The action with an &quot;apply_to&quot; field&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa;        :param event: The event to be handled&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="get_applied_instance_list">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="qxsn0uq8qb4Q" type="7qNNDsvzVr6m"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ozuz6F6Xb9zx" type="4xgAXrKwF8qC" value="" name="action"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Uc3IIGm6Fe3L" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MhFkkNt191iS" comment="        Walk through an event action sequence when the event handler matches a&#xa;        known event.&#xa;        The sausage factory method.  There are many types of actions; the&#xa;        object instance actions make the most sense to handle here, but the&#xa;        game engine that inspired this one uses a model in which a hidden&#xa;        manager object type triggers actions that affect other parts of the&#xa;        game engine, so those actions need to be routed properly as well.&#xa;        :param event: The event to be handled&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;        :param targets: The event handler may pass in a list of target&#xa;            instances for the action sequence to operate on&#xa;        :type event: array-like | None&#xa; forward instance actions to instance(s) print(&quot;applying to {}&quot;.format(target))" name="execute_action_sequence">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="NAFkAddcDesT" type="XWJw4Mll0gKA" value="" name="event"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="4JBndmlloobB" type="7qNNDsvzVr6m" value="None" name="targets"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="z5UKQVecM7fo" comment="        Handle an event generated by an instance of this type.  Meant to be&#xa;        overridden if needed by a subclass.&#xa;        :param event: The instance event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="handle_instance_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="eIpOjdOluXYW" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8B1UHfHukqhU" comment="        Execute the action sequence associated with the supplied mouse&#xa;        event.&#xa;        This base class method only applies to global mouse events.  Subclasses&#xa;        that need to handle specific mouse events should call this method first&#xa;        and use its return value to determine whether the mouse event was a&#xa;        global event (and already handled here).&#xa;        :param event: The mouse event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;        :return: True if the received mouse event was global and already&#xa;            handled in this base class method, False otherwise&#xa;" name="handle_mouse_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="OPON2tl93kbK" type="ZCaMVQeibnbk"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="W7Sxdp8F5xbo" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="NsC7hrbaFstG" comment="        Execute the action sequence associated with the supplied key event,&#xa;        if the exact key event is handled by this object (which key,&#xa;        press/release).&#xa;        :param event: The keyboard event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa; found this event in the list, find out if it's the right type" name="handle_keyboard_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="82b0AQWeYxb9" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tir6YlMjlooB" comment="        Execute the action sequence associated with a collision event.&#xa;        The name of the object type collided with is part of the event's name,&#xa;        which should have been added as a key in the event_action_sequences&#xa;        attribute using the :py:meth:`__setitem__` interface.&#xa;        :param event: The collision event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="handle_collision_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="9eCVu2s02TyC" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wspfeeq3hrVP" comment="        Execute the action sequence associated with the supplied step event, if&#xa;        the exact step event is handled by this object (begin, end, normal),&#xa;        on every instance.&#xa;        :param event: The step event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="handle_step_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="tRxpXeFgIQ9A" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hurOjLllJIst" comment="        Execute the action sequence associated with the alarm event, if the&#xa;        exact alarm is handled by this object (one or more of alarms 0-11).&#xa;        :param event: The alarm event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="handle_alarm_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="nL1rDua6LXtr" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="70bPITIsC9Ja" comment="        Execute the action sequence associated with the create event, passing&#xa;        it on to the instance recorded in the event.&#xa;        :param event: The object creation event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="handle_create_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="n1YJPJBCcD1q" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JP5VYN3XVTlJ" comment="        Execute the action sequence associated with the destroy event.&#xa;        :param event: The destroy event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="handle_destroy_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="QHL5wiFhhlz6" type="XWJw4Mll0gKA" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="private" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="VGpzjYGaEJ3x" comment=" Return an event type, given the name of the handled event. :param event_name: The name of the received event :type event_name: str :return: An event handler :rtype: callable" name="_select_event_handler">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="84KsCYAgoyfW" type="MrW5KNn3d1gF"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="GI06FRYB6l1a" type="GqxIRxJtYY5A" value="" name="event_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Wt6iC9gRPgXf" comment="        Return the event names handled by this object type, in a list.&#xa;        :return: A list of event names handled by this object type&#xa;        :rtype: list&#xa;" name="keys">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="55oArpixr0p3" type="7qNNDsvzVr6m"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YxhNtMtOFx6Q" comment="        ObjectType instances support obj[event_name] to directly access the&#xa;        action sequence for a particular event.&#xa;        :param itemname: Name of an event&#xa;        :type itemname: str&#xa;        :return: An action sequence, or None&#xa;        :rtype: None | :py:class:`~pygame_maker.actions.action_sequence.ActionSequence`&#xa;" name="__getitem__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="hKDYL0atyHEp" type="yrqFX5ySww5V"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="6mrTRM6URucG" type="GqxIRxJtYY5A" value="" name="itemname"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="c5Dp2KF644YT" comment="        ObjectType instances support obj[event_name] = sequence for&#xa;        directly setting the action sequence for a particular event.&#xa;        After adding the event action sequence, register the event handler&#xa;        for the event.&#xa;        :param itemname: Name of an event&#xa;        :type itemname: str&#xa;        :param val: New action sequence to apply to an event&#xa;        :type val: :py:class:`~pygame_maker.actions.action_sequence.ActionSequence`&#xa;        :raise: KeyError, if itemname is not a string&#xa;        :raise: ValueError, if val is not an ActionSequence&#xa; register our handler for this event" name="__setitem__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="QeyqZa6GtInC" type="GqxIRxJtYY5A" value="" name="itemname"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="A0J3l0R9FmEC" type="yrqFX5ySww5V" value="" name="val"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="afOTxBfDWgQ9" comment="        Remove the named event from the action sequence table.&#xa;        :param itemname: The name of the event to stop handling&#xa;        :type itemname: str&#xa; stop handling the given event name remove the event from the table" name="__delitem__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="yQLIfNcDf2nz" type="GqxIRxJtYY5A" value="" name="itemname"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="ZmECzDTNtUoI" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="J9lQsMIXvSA1" name="ObjectSprite">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="YX1y0p3IFbuP"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="s0Rmti4Ac5ic" type="GqxIRxJtYY5A" comment="The name of the ObjectSprite, usually prefixed with &quot;spr_&quot;" initialValue="spr_" name="name"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="M2VHRlSJHdxT" type="GqxIRxJtYY5A" comment="The filename containing the sprite image" initialValue="&quot;&quot;" name="filename"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="VZyPd0MV0oFr" type="ZCaMVQeibnbk" comment="Flag whether to smooth the image edges" initialValue="False" name="smooth_edges"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="WJ28MijjkC0B" type="ZCaMVQeibnbk" comment="Flag whether to preload the image in the setup() method" initialValue="True" name="preload_texture"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="vQUC1QeWxcva" type="ZCaMVQeibnbk" comment="Flag whether to honor the transparency pixel inside the image file" initialValue="False" name="transparency_pixel"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="cI6a4JRYbRfx" type="7qNNDsvzVr6m" comment="Apply this coordinate offset when drawing the image" initialValue="(0,0)" name="origin"/>
          <UML:Attribute visibility="private" isSpecification="false" xmi.id="oTKNvzL2Lzwt" type="GqxIRxJtYY5A" comment="Mask type for collision detection, see :py:attr:`COLLISION_TYPES`" initialValue="&quot;rectangle&quot;" name="_collision_type"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="fbYN6a8t2QGv" type="GqxIRxJtYY5A" comment="How to produce the rect containing drawable pixels, see :py:attr:`BOUNDING_BOX_TYPES`" initialValue="&quot;automatic&quot;" name="bounding_box_type"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="PZxiXrb7oujF" type="GeGG5XBU47Bb" comment="The dimensions of the boundary rect, if the type is &quot;manual&quot;" initialValue="(0,0,0,0)" name="manual_bounding_box_rect"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="IjYdP41eiHun" type="KtnD5mmeXzoW" comment="The pygame.Surface returned when loading the image from the file" name="image"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="m4Gr9RS7B9qq" type="7qNNDsvzVr6m" comment="The dimensions of the image, determined after loading it" initialValue="(0,0)" name="image_size"/>
          <UML:Attribute visibility="public" isSpecification="false" xmi.id="ZqLMNthgaDH0" type="GeGG5XBU47Bb" comment="The bounding rect, containing all pixels to be drawn to a surface from the image (depends on bounding_box_type)" initialValue="None" name="bounding_box_rect"/>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="qBq3liQzOCDb" comment="        Create a new sprite from a YAML-formatted file.  Checks each key&#xa;        against known ObjectSprite parameters, and uses only those&#xa;        parameters to initialize a new sprite.&#xa;        Expected YAML object format::&#xa;            - spr_name1:&#xa;                filename: &lt;filename>&#xa;                smooth_edges: true|false&#xa;                manual_bounding_box_rect:&#xa;                  top: 0&#xa;                  bottom: 32&#xa;                  left: 0&#xa;                  right: 32&#xa;                ...&#xa;            - spr_name2:&#xa;                ...&#xa;        :param sprite_yaml_stream: File or stream object containing YAML-&#xa;            formatted data&#xa;        :type sprite_yaml_stream: File-like object&#xa;        :param unused: This is a placeholder, since other load_from_yaml()&#xa;            resource methods take an additional argument.&#xa;        :return: An empty list, if the YAML-defined sprite(s) is (are) invalid,&#xa;            or a list of new sprites, for those with YAML fields that pass&#xa;            basic checks&#xa;        :rtype: list&#xa;" name="load_from_yaml">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="iV95gLgDaoBc" type="7qNNDsvzVr6m"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="tXBeCubWt64z" type="uf5QGUH2nhjz" value="" comment="A stream containing YAML-formatted strings" name="sprite_yaml_stream"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="nJQjCfHaF7GQ" type="yfaaXCaCDHE9" value="" name="unused"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="sUlBdu5l6BSK" comment="        Create a new sprite instance.&#xa;        :param name: Name for the new sprite instance&#xa;        :type name: str&#xa;        :param kwargs:&#xa;            Named arguments can be supplied to fill in sprite attributes:&#xa;            * filename: the name of the file containing the sprite graphic&#xa;                * if the file name (minus extension) ends with _strip## (## is&#xa;                  a number > 1), the file is assumed to contain multiple&#xa;                  adjacent subimages (E.G. for animations) - NYI&#xa;            * smooth_edges (bool): not implemented&#xa;            * preload_texture (bool): whether to load the sprite graphic from&#xa;              the file ahead of usage&#xa;            * transparency_pixel (bool): use transparency pixel defined in the&#xa;              sprite graphic&#xa;            * origin (array-like): where to offset the sprite graphic in&#xa;              relation to a supplied x, y in a 2-element list&#xa;            * collision_type (str): where and how to look for collisions:&#xa;                * precise: check every non-transparent edge pixel (slowest)&#xa;                * rectangle: check for edges of a rectangle surrounding the&#xa;                  image (fast)&#xa;                * disk: check for edges of a circle surrounding the image&#xa;                  (slower)&#xa;                * diamond: check for edges of a diamond surrounding the image&#xa;                  (average) - not implemented&#xa;                * polygon: check for edges of a polygon surrounding the image&#xa;                  (slow) - not implemented&#xa;            * bounding_box_type (str): a box containing the pixels that should&#xa;              be drawn&#xa;                * automatic: draw all non-tranparent pixels&#xa;                * full_image: draw the entire sprite graphic&#xa;                * manual: specify left, right, top, bottom dimensions in&#xa;                  manual_bounding_box_rect&#xa;            * manual_bounding_box_rect (dict): the box dimensions for the&#xa;              manual bounding_box_type, in a dict in {'left': left,&#xa;              'right': right, 'top': top, 'bottom': bottom} format&#xa;: The name of the ObjectSprite, usually prefixed with &quot;spr\_&quot;: The filename containing the sprite image: Flag whether to smooth the image edges: Flag whether to preload the image in the setup() method: Flag whether to honor the transparency pixel inside the image file: Apply this coordinate offset when drawing the image: Mask type for collision detection, see :py:attr:`COLLISION_TYPES`: How to produce the rect containing drawable pixels, see: :py:attr:`BOUNDING_BOX_TYPES`: The dimensions of the boundary rect, if the type is &quot;manual&quot;" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="U5n4rwejRNs2" type="J9lQsMIXvSA1"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="RcLrdQ1Lw9Oc" type="GqxIRxJtYY5A" value="" name="name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="FxnL9DfYpzNS" comment="property that returns _collision_type" name="collision_type">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="PPmJYAt0Dh24" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="den21d2GbpZi" comment="property setter for _collision_type, that error-checks the supplied string" name="collision_type">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="2DGsCeIb14vX" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="s8QTvxByARoM" comment="        Perform any tasks that can be done before the main program loop,&#xa;        but only after pygame.init().&#xa;" name="setup"/>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dH6oW9yOHOrD" comment="        Retrieve image data from the file named in the filename&#xa;        attribute.  Collect information about the graphic in the&#xa;        image_size, bounding_box_type, and bounding_box_rect&#xa;        attributes.&#xa;" name="load_graphic"/>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Y3Y79N8lcEZ8" comment="        Reset the sprite's parameters to defaults.&#xa;        This allows a GUI sprite-creation utility to support a &quot;reset&quot;&#xa;        operation.&#xa;" name="set_defaults"/>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="sWAuFd4lgdqo" comment="        Validity test for filename attribute.&#xa;        :return: True if the validity test succeeded, or False&#xa;        :rtype: bool&#xa;" name="check_filename">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="yzXaB4jXaB9V" type="ZCaMVQeibnbk"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="VxhotOVjudd9" comment="        Validity test for origin attribute.&#xa;        :return: True if the validity test succeeded, or False&#xa;        :rtype: bool&#xa;" name="check_origin">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="FiutLjfJiCrr" type="ZCaMVQeibnbk"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HYPrkYKFT01K" comment="        Validity test for collision_type attribute.&#xa;        :return: True if the validity test succeeded, or False&#xa;        :rtype: bool&#xa;" name="check_collision_type">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="OX4J8hQNNJFg" type="ZCaMVQeibnbk"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2uxi5pZMNyB5" comment="        Validity test for bounding_box_type attribute.&#xa;        :return: True if the validity test succeeded, or False&#xa;        :rtype: bool&#xa;" name="check_bounding_box">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="UUKwUMGsrI9z" type="ZCaMVQeibnbk"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="yYLLra0rSxZX" comment="        Validity test for manual_bounding_box_rect attribute.&#xa;        :return: True if the validity test succeeded, or False&#xa;        :rtype: bool&#xa;" name="check_manual_bounding_box_rect">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="k8r653BXXWTz" type="ZCaMVQeibnbk"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qirhyzewXzGM" comment="        Run all validity tests.  Used by the load_from_yaml() method to&#xa;        ensure the YAML defines valid sprite attributes.&#xa;        :return: True if the sprite attributes passed validity tests, or False&#xa;        :rtype: bool&#xa;" name="check">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="XGDyBmVusL0x" type="ZCaMVQeibnbk"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OBVtfwsTch8b" comment="        Produce the YAML string representing the sprite instance.&#xa;        :return: YAML-formatted sprite data&#xa;        :rtype: str&#xa;" name="to_yaml">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="enXBknXG1kED" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Uh7N25KOEnFs" comment=" Equality test, for unit test purposes." name="__eq__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="E8DErRRL7Wi7" type="ZCaMVQeibnbk"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="QenaldOKShgp" type="J9lQsMIXvSA1" value="" name="other"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Z1UnojdWpzrc" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Rm1eDcbQlpea" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="ZmECzDTNtUoI" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="E3vJXcR6dvrR" name="ObjectInstance">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="h47Qtl08mwRJ"/>
          <UML:Generalization xmi.idref="s8racehqXgZT"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3vkZZH2eG7Em" comment="        Initialize an ObjectInstance.&#xa;        :param kind: The object type of this new instance&#xa;        :type kind: :py:class:`~pygame_maker.actors.object_type.ObjectType`&#xa;        :param screen_dims: Width, height of the surface this instance will be&#xa;            drawn to.  Allows boundary collisions to be detected.&#xa;        :type screen_dims: [int, int]&#xa;        :param id\_: A unique integer ID for this instance&#xa;        :type id\_: int&#xa;        :param settings: Used along with kwargs for settings attributes&#xa;            (allows attributes to be set that have a '.' character, which&#xa;            cannot be set in kwargs).  Known attributes are the same as for&#xa;            kwargs.&#xa;        :type settings: None or dict&#xa;        :param kwargs:&#xa;            Supply alternatives to instance attributes&#xa;            * position (list of float or pygame.Rect): Upper left XY coordinate.&#xa;              If not integers, each will be rounded to the next highest&#xa;              integer [(0,0)]&#xa;            * speed (float): How many pixels (or fraction thereof) the object&#xa;              moves in each update [0.0]&#xa;            * direction (float): 0-359 degrees for direction of motion [0.0]&#xa;            * gravity (float): Strength of gravity toward gravity_direction in&#xa;              pixels/frame^2 [0.0]&#xa;            * gravity_direction (float): 0-359 degrees for direction of gravity&#xa;              vector [0.0]&#xa;            * friction (float): Strength of friction vs direction of motion in&#xa;              pixels/frame [0.0]&#xa; Flag when methods shouldn't automatically update speed, direction call the superclasses' __init__ set up the Sprite/DirtySprite expected parameters default visibility comes from this instance's type copy this instance's image and Rect from the sprite resource: Keep a reference to the ObjectSprite's image disk collision type; get the predefined radius for collisions use the instance type's 'depth' parameter as the layer for this  instance print(&quot;{}&quot;.format(self))" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="MADPYq2DWI8I" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="GDYUfMc1TE6G" type="GqxIRxJtYY5A" value="" name="kind"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Qgwk39f64Pfd" type="GqxIRxJtYY5A" value="" name="screen_dims"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="hgGvnUi4hEWK" type="GqxIRxJtYY5A" value="" name="id_"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="b8L2KRJl5DV8" type="GqxIRxJtYY5A" value="" name="settings"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="koMR1smcy5eI" comment=" self.warn(&quot;{}{} visible is {}&quot;.format(self.kind.name, self.inst_id, vis))" name="visible">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Vv3Y8XfTfsqD" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gqQB7XTrJpJK" comment=" self.warn(&quot;{}{} visible is now {}&quot;.format(self.kind.name, self.inst_id, vis))" name="visible">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Un09dqLJgjUn" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="f3ud6XvZSx8Z" type="GqxIRxJtYY5A" value="" name="is_visible"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GxfYkwsPxl03" comment=" Keep track of horizontal and vertical components of velocity. Motion is represented as x and y adjustments that are made every update when using the speed/direction model (as opposed to manually changing the position).  Caching these values reduces the number of times math functions will be called for object instances with constant velocity. print(&quot;new inst {} xyadj {}, {}&quot;.format(self.inst_id, xadj, yadj))" name="_change_motion_x_y">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="IwdirjFLWFS9" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3nQkXtVlo8JZ" comment="Direction of motion in degrees, between 0.0 and 360.0" name="direction">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="4Aw1vx3Btetk" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="N93rMV0QHO8o" name="direction">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Wp3NRu5o16fO" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="HbX6kpdmzZos" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cdmrzsdFTAJB" comment="Speed of motion in pixels (or fractions) per frame" name="speed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="zwywVmo0ZpL0" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kRmjXP572ry1" name="speed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="4SxbIIZ0hLjF" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="hbGBkZMjTKgx" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kpKkeHkMsyVa" comment="Magnitude of friction applied against motion each frame" name="friction">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="WpKzAywCQrmg" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8LgphO2PDNAp" name="friction">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="JGoh6YOEu23Z" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="esBUqe3MULMc" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Q4wbP6R1waVn" comment="Magnitude of gravity applied each frame" name="gravity">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="FW9jrTLAi7so" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gE2aG37h73GW" name="gravity">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="SbXAiNyObywq" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="8hX4I1rXXzGP" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="23V77leFT9Hj" comment="Direction gravity pulls the instance in degrees" name="gravity_direction">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="A9Gg6U3W5ahl" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wd8Va2Lc6ojB" name="gravity_direction">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="SKPVt4EpfMIF" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="aLO1VfkdmyHs" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PcpTQXcys0zL" comment="Horizontal speed" name="hspeed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="dhxQdEG3XdYQ" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hlDL7VaU7OvW" comment=" skip setting motion x,y and hspeed, vspeed" name="hspeed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="GnolRLB66MRB" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="vXUlVS5992Xl" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="s0exOZTH5w2a" comment="Vertical speed" name="vspeed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="O7hV7EGM237R" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OJVUdxfTvJRJ" comment=" skip setting motion x,y and hspeed, vspeed" name="vspeed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Qw9QzHpNYLpB" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="rsawoaUCgCin" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GTfBk4Ubu2Vj" comment="        Return the approximate center pixel coordinate of the object.&#xa;        :return: A 2-element tuple x, y of the approximate position of the&#xa;            object's center point.&#xa;        :rtype: (int, int)&#xa;" name="get_center_point">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="a0tGCZ2aUB1T" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Qqpw9e8P7las" comment="        Move the instance from its current position.&#xa;        Calculate the new position using current speed and direction.  Queue&#xa;        events for boundary collisions or outside-of-room positions.  Make&#xa;        friction and/or gravity changes to speed and/or direction for the next&#xa;        update().&#xa; check for boundary collisions allow boundary collisions for objects completely outside  the other dimension's boundaries to be ignored; this  makes intersect_boundary and outside_room mutually exclusive queue and handle boundary collision event (async) print(&quot;inst {} hit x bound&quot;.format(self.inst_id)) queue and handle boundary collision event (async) print(&quot;inst {} hit y bound&quot;.format(self.inst_id)) check for outside room apply forces for next update transmit outside_room or intersect_boundary event last" name="update">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="n2Rh2xObvGp7" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="prfJ1glPVaMc" comment=" Adjust speed and direction using value and direction of gravity." name="_apply_gravity">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="CU2IDa80bZhb" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="U4CPK0U7rAPq" comment=" Adjust speed based on friction value." name="_apply_friction">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="oAGJiaus2wAF" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UGF5qufIwpiG" comment="        Change the direction of motion toward a given point.&#xa;        :param pointxy: A 2-element list of the x, y coordinate&#xa;        :type pointxy: array-like&#xa;" name="aim_toward_point">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="JKRLEaYhqlke" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="pAMfKlV9tjQZ" type="GqxIRxJtYY5A" value="" name="pointxy"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ePxaFdp4nBj6" comment="        Handle the set_velocity_compass action.&#xa;        Possible directions:&#xa;        * NONE: don't set the direction, just the speed&#xa;        * '|' separated list of possible directions to be chosen at&#xa;          random: UP, UPLEFT, UPRIGHT, RIGHT, DOWN, DOWNLEFT, DOWNRIGHT, LEFT&#xa;          (see :py:attr:`~pygame_maker.actions.action.Action.COMPASS_DIRECTIONS`)&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa; convert compass direction into degrees convert direction name to degrees if stop was selected, set speed to zero" name="set_velocity_compass">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="H6n8rYkTxf4C" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="uDDlubKEujX6" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="IrF40wAu9Ld4" comment="        Handle the move_toward_point action.&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa; change direction apply speed parameter" name="move_toward_point">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="GkACQCOi3bk1" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="wxGoenvwri2h" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YsvfDWj8Rxu6" comment="        Handle the set_horizontal_speed action.&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa; horiz_vec has only x direction" name="set_horizontal_speed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="aLpcwZdSSX8d" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="jp0aY0FmkOy8" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3rjVpeZYTX6z" comment="        Handle the set_vertical_speed action.&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa; vert_vec has only y direction" name="set_vertical_speed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="kWOC1Uo2MXV9" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="XKkFigOI1Dsw" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="94fbZja43IIl" comment="        Perform an action in an action sequence, in response to an event.&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa;        :param event: The Event instance that triggered this method&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa; Apply any setting names that match property names found in the  action_data.  For some actions, this is enough. common exceptions:  apply_to: assumed to have directed the action to this instance  relative: add to instead of replace property settings check for expressions that need to be executed old_dir = self.direction self.debug(&quot;Reverse hdir {} to {}&quot;.format(old_dir, self.direction)) old_dir = self.direction self.debug(&quot;Reverse vdir {} to {}&quot;.format(old_dir, self.direction)) self.debug(&quot;bounce event: {}&quot;.format(event)) print(&quot;Check normal {}&quot;.format(norm)) X component is greater; reverse X Y component is greater; reverse Y" name="execute_action">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ZMaafsKcWMaN" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="zg2yruuZOHkN" type="GqxIRxJtYY5A" value="" name="action"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="lYQ53vCDypoX" type="GqxIRxJtYY5A" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ETubkeyVCOZE" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="IlRGbDl8ZLgC" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="ZmECzDTNtUoI" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="fQNZeFNnd8xK" name="SimpleObjectInstance">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="HM7ErP9pVdtY"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="e5v7gofmlEWX" comment="        Initialize a SimpleObjectInstance.&#xa;        :param kind: The object type of this new instance&#xa;        :type kind: :py:class:`~pygame_maker.actors.object_type.ObjectType`&#xa;        :param screen_dims: Width, height of the surface this instance will be&#xa;            drawn to.  Allows boundary collisions to be detected.&#xa;        :type screen_dims: [int, int]&#xa;        :param id\_: A unique integer ID for this instance&#xa;        :type id\_: int&#xa;        :param settings: Used along with kwargs for settings attributes&#xa;            (allows attributes to be set that have a '.' character, which&#xa;            cannot be set in kwargs).  Known attributes are the same as for&#xa;            kwargs.&#xa;        :type settings: None or dict&#xa;        :param kwargs:&#xa;            Supply alternatives to instance attributes&#xa;            * position (list of float or pygame.Rect): Upper left XY coordinate.&#xa;              If not integers, each will be rounded to the next highest&#xa;              integer [(0,0)]&#xa; call base class init: Name the instance based on the ObjectType's name and the ID: The ObjectType this SimpleObjectInstance belongs to: Keep a handle to the game engine for handling certain actions: Keep track of the screen boundaries for collision detection: Unique ID for this SimpleObjectInstance rect for storing the instance's position Symbols tracked by ObjectInstances: Subclasses override this class variable to add their known symbols: Symbol table print(&quot;Initial symbols:&quot;) self.symbols.dumpVars()" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="qzmG7CN4IGkb" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="MAwtAw4QG2Ik" type="GqxIRxJtYY5A" value="" name="kind"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="wSSChNHLSAS7" type="GqxIRxJtYY5A" value="" name="screen_dims"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="x7tiJNDgX9Zg" type="GqxIRxJtYY5A" value="" name="id_"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="3b6KdM2XmUhT" type="GqxIRxJtYY5A" value="" name="settings"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="exH94op8PuS1" comment=" Automatically called when the X coordinate of the position changes" name="_update_position_x">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="GSY1vESlDF1I" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PNNhb7JF5aN9" comment=" Automatically called when the Y coordinate of the position changes" name="_update_position_y">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="NCFk4flJ8IK3" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WkohxnzNAM4m" comment=" Called when the x coordinate of the position changes, to round the floating-point value to the nearest integer and place it in rect.x for the draw() method." name="_round_position_x_to_rect_x">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="SNzVwKcHVs1Z" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Xlsf3CgXxUEu" comment=" _round_position_y_to_rect_y():  Called when the y coordinate of the position changes, to round  the floating-point value to the nearest integer and place it  in rect.y for the draw() method." name="_round_position_y_to_rect_y">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="GBFOYK8yf6TZ" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Q5qvxsVTdN6e" comment=" Return a unique code block id" name="code_block_id">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="YnBTHNLVYbu4" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="t22Y8V8XbwSW" comment="Position of this instance.  Set a new position using an x, y list" name="position">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="mvzPH41prCG6" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Zbc8AWA3WDad" name="position">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="pmceyqlWRNca" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="igAHccoPWlmn" type="GqxIRxJtYY5A" value="" name="value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rmbLxBygp8xS" comment=" Apply the kwargs dict mappings to the instance's properties. Any keys that don't refer to built-in properties (speed, direction, etc) will instead be tracked in the local symbol table to support code execution actions. Parameters themselves can have attributes up to 1 level, to support     position.x and position.y :param kwargs: A dictionary containing the new attributes to be     applied :type kwargs: dict 'relative' is not an attribute, it instead determines how the  other attributes are applied. Attributes can themselves have attributes, but only 1 level deep is currently supported.  This facilitates setting the position.x  and position.y attributes. keep track of local symbols created by code blocks" name="_apply_kwargs">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="SemrzMRo6394" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="jjpFTZ2GLcvI" type="GqxIRxJtYY5A" value="" name="kwargs"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="C6k2CfStNF8o" comment=" Callback for the SymbolTable. Called whenever a symbol changes while running the language engine. :param sym: The symbol's name :type sym: str :param new_value: The symbol's new value" name="_symbol_change_callback">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="25eNKmB6tDCZ" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="o848ixO8ZA0Y" type="GqxIRxJtYY5A" value="" name="sym"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="UPMaQUebaOdk" type="GqxIRxJtYY5A" value="" name="new_value"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9aiiigHC5bnU" comment="        Handle the execute_code action.&#xa;        Puts local variables into the symbols attribute, which is a symbol&#xa;        table.  Applies any built-in local variable changes for the instance.&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa;        :param keep_code_block: Specify whether the code block will be re-used,&#xa;            and so shouldn't be deleted after execution&#xa;        :type keep_code_block: bool&#xa; print(&quot;action {} runtime: '{}'&quot;.format(action, action.runtime_data)) support one-shot actions" name="execute_code">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="beleFY8LyBwk" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="5R5doiOol2B3" type="GqxIRxJtYY5A" value="" name="action"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="mK7fXKDgsvPb" type="GqxIRxJtYY5A" value="" name="keep_code_block"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rKYaMhb71jkY" comment="        Handle the if_variable_value action.&#xa;        Makes use of both the local symbol table in self.symbols, and the&#xa;        global symbol table managed by the language engine.&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa; look in symbol tables for the answer, local table first replace a string with a symbol value, if the string is in a symbol table update the action's action_result attribute, so that the action sequence can choose the right conditional path" name="if_variable_value">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="kCkiMhSD1yoM" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1xDtsaSREE6R" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="fPTg6DD7BQz3" comment="        Handle the set_variable_value action.&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa;" name="set_variable_value">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="1TJ2P5M5SpjZ" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="yPTAbZbMjM25" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3weCKbDI1gQa" comment=" Queue the destroy event for this instance and run it, then schedule  ourselves for removal from our parent object." name="destroy_object">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="OispXcOYW0ip" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="D2uxMx2LOJLn" type="GqxIRxJtYY5A" value="" name="action"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cw7bcWBqW6lq" comment="        Perform an action in an action sequence, in response to an event.&#xa;        :param action: The Action instance that triggered this method&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa;        :param event: The Event instance that triggered this method&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;        :return: A tuple containing the action parameters (``apply_to`` will&#xa;            be filtered out), and True/False based on whether the action was&#xa;            handled here in the base class or not.&#xa;        :rtype: (dict, bool)&#xa; Apply any setting names that match property names found in the  action_data.  For some actions, this is enough. common exceptions:  apply_to: assumed to have directed the action to this instance  relative: add to instead of replace property settings check for expressions that need to be executed" name="execute_action">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="YxJ434u4q3Rt" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1lBP5WCRE3Gk" type="GqxIRxJtYY5A" value="" name="action"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="dcG7dzwDv2oV" type="GqxIRxJtYY5A" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZcImdZWE9kLk" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="jIxeIj8qhRsi" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="ZmECzDTNtUoI" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="IU3oARv7rFNX" name="ManagerObjectType">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="cziH1VG0Jya7"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="ZmECzDTNtUoI" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5oKPksW0D2Be" name="CollideableObjectType">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="MEN7Ls2tJ4Iz"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="JGvdIEahPqQC" name="gen_kwargs_from_yaml_obj">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="cyb70TvEvNrB" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="cU7DrNY6ArWw" type="GqxIRxJtYY5A" value="" name="cls"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ma361F8IV4tn" type="GqxIRxJtYY5A" value="" name="obj_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="GSSdGsptLv6A" type="GqxIRxJtYY5A" value="" name="obj_yaml"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="IcGQRkLmKMqJ" type="GqxIRxJtYY5A" value="" name="game_engine"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Eh4Zc8juixJA" comment="        Create a new type of object.&#xa;        :param object_name: Supply a name for the object type&#xa;        :type object_name: str&#xa;        :param game_engine: Supply the main game engine&#xa;            containing an event engine, language engine, sprite resources,&#xa;            sound resources, other object types, and handlers for certain game&#xa;            actions&#xa;        :type game_engine: GameEngine&#xa;        :param kwargs: Supply alternatives for default object properties:&#xa;            * visible (bool): Whether instances will be drawn [True]&#xa;            * solid (bool): Whether instances block other object instances&#xa;              (e.g. a platform) [False]&#xa;            * depth (int): Which layer object instances will be placed into [0]&#xa;            * sprite (str): Name of a sprite resource used as the image [None]&#xa; default draw action sequence draws the object's sprite print(&quot;Finished setup of {}&quot;.format(self.name))" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="6JUnBCUVnPlk" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="hew10kIcitih" type="GqxIRxJtYY5A" value="" name="object_name"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="MdvHynRAUVh6" type="GqxIRxJtYY5A" value="" name="game_engine"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="cQyKLFS2tM1s" type="GqxIRxJtYY5A" value="" name="*"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ACscfaiHyfcK" comment="Flag whether the ObjectType is to be drawn" name="visible">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="s4MmRMcVd6Io" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HmI2A3kIDdvs" name="visible">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="AThlXzYmkqpu" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="BbA9EkT7morB" type="GqxIRxJtYY5A" value="" name="is_visible"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tXA685wJh6Tv" comment="Return the YAML string representing this object type." name="to_yaml">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ou2bitmqKTcs" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="RAeB0R3rxDv5" comment="        Create a rectangular mask that covers the opaque pixels of an object.&#xa;        Normally, collisions between objects with collision_type &quot;rectangle&quot;&#xa;        will use the rectangle collision test, which only needs the rect&#xa;        attribute.  The mask is created in the event this object collides with&#xa;        an object that has a different collision_type, in which case the&#xa;        objects fall back to using a mask collision test.  The assumption is&#xa;        that the user wants a simple collision model, so the mask is made from&#xa;        the rect attribute, instead of creating an exact mask from the opaque&#xa;        pixels in the image.&#xa;        :param orig_rect: The Rect from the image&#xa;        :type orig_rect: :py:class:`pygame.Rect`&#xa;        :return: A new mask&#xa;        :rtype: :py:class:`pygame.mask.Mask`&#xa;" name="create_rectangle_mask">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="l8H6Ztw03aB1" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="JrPywqtkkuLR" type="GqxIRxJtYY5A" value="" name="orig_rect"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0CqxQl2hbPfX" comment="        Calculate the radius of a circle that covers the opaque pixels in&#xa;        precise_mask.&#xa;        :param precise_mask: The precise mask for every opaque pixel in the&#xa;            image.  If the original image was circular, this can aid in&#xa;            creating in a more accurate circular mask&#xa;        :type precise_mask: :py:class:`pygame.mask.Mask`&#xa;        :param orig_rect: The Rect from the image&#xa;        :type orig_rect: :py:class:`pygame.Rect`&#xa; find the radius of a circle that contains bound_rect for the worst  case determine whether a smaller radius could be used (i.e.  no corner pixels within the bounding rect are set)" name="get_disk_radius">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="9ggk3JFHpWDE" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="DWHwQbNAheEG" type="GqxIRxJtYY5A" value="" name="precise_mask"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="WAFXiOZibNfz" type="GqxIRxJtYY5A" value="" name="orig_rect"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7YMmCa3gkGES" comment="        Create a circular mask that covers the opaque pixels of an object.&#xa;        Normally, collisions between objects with collision_type &quot;disk&quot; will&#xa;        use the circle collision test, which only needs the radius attribute.&#xa;        The mask is created in the event this object collides with an object&#xa;        that has a different collision_type, in which case the objects fall&#xa;        back to using a mask collision test.  The assumption is that the user&#xa;        wants a simple collision model, so the mask is made from a circle of&#xa;        the right radius, instead of creating an exact mask from the opaque&#xa;        pixels in the image.&#xa;        :param orig_rect: The Rect from the image&#xa;        :type orig_rect: :py:class:`pygame.Rect`&#xa; create a disk mask with a radius sufficient to cover the  opaque pixels NOTE: collisions with objects that have a different collision type  will use this mask; the mask generated here won't fill the sprite's  radius, but will be a circle with the correct radius that is clipped  at the sprite's rect dimensions000000&quot;))000000&quot;))ffffff&quot;), disk_mask_center, self.radius)" name="create_disk_mask">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="9ElxjwBoUVbe" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="el9D8oCHSqzW" type="GqxIRxJtYY5A" value="" name="orig_rect"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5cLpsZFUKOiS" comment="        Called by instances of this ObjectType, to get a new copy of&#xa;        the sprite resource's image.&#xa;        Load the image when the first instance using this image is created.&#xa;        Also, handle the collision type and create a collision mask.&#xa;        :return: A new pygame image, copied from the ObjectSprite resource&#xa;        :rtype: :py:class:`pygame.Surface`&#xa; use the dimensions of the loaded graphic for the bounding  rect in case there's a problem with the sprite resources'  bounding rect create a mask based on the collision type set a mask regardless of the collision type, to enable  collision checks between objects that have different  types other collision types are not supported, fall back to  rectangle queue the image_loaded event" name="get_image">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Buiblf7suqpd" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="myPET0tYcELS" comment="        Check for collisions between this and other object types' instances,&#xa;        and queue collision events when detected.&#xa;        :param other_obj_types: A list of other ObjectTypes to test&#xa;            for collisions with this one&#xa;        :type other_obj_types: array-like&#xa;        :return: A list of collision event names that were queued, or an&#xa;            empty list if none&#xa; skip self collision detection if there's only one sprite print(&quot;Solid collision overlap: {}&quot;.format(overlap)) print(&quot;Collision normal: {}&quot;.format(collision_normal)) in the event of a collision with a solid object (i.e.  stationary), kick the sprite outside of the other  object's collision mask print(&quot;Distance: {}, divisor {}&quot;.format(distance, divisor)) print(&quot;Moving obj {}, {}&quot;.format(adj_x, adj_y))" name="collision_check">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="rl9jcyKMvjbO" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="lZx3vfV4XBgG" type="GqxIRxJtYY5A" value="" name="other_obj_types"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kSvKeElPngSj" comment="        Call to perform position updates for all instances.  After all&#xa;        instances have updated, handle any queued deletions.&#xa; after all instances update(), check the delete list to see which  ones should be removed and remove them" name="update">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Jvnq5R7wDEdn" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Ax95giUOANho" comment="        Respond to draw events.&#xa;        :param event: The ``draw_self`` event&#xa;        :type event: py:class:`~pygame_maker.events.event.Event`&#xa; The normal, default action: each object instance draws its sprite" name="draw">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="JKYUYBHj6Qmm" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="bQDP6d6PZrFe" type="GqxIRxJtYY5A" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9G9Hbq6DGHaM" name="make_new_instance">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="YMKmeu6XYpz1" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="vgjSVy4mHcEn" type="GqxIRxJtYY5A" value="" name="screen"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="lVUruHb1VkI7" type="GqxIRxJtYY5A" value="" name="settings"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="o3m3d0qMWLBO" comment="        For actions with &quot;apply_to&quot; parameters, return a list of the&#xa;        object instances affected.&#xa;        The &quot;apply_to&quot; parameter may be &quot;self&quot;, which can refer to a particular&#xa;        instance (which needs to be part of the event data); or may be &quot;other&quot;,&#xa;        in cases where another instance is involved in the event (collisions);&#xa;        or affect multiple objects if apply_to refers to an object type,&#xa;        in which case all objects of the named type receive the action.  For&#xa;        &quot;create&quot; type actions, &quot;self&quot; instead refers to the object type to be&#xa;        created.&#xa;        :param action: The action with an &quot;apply_to&quot; field&#xa;        :type action: :py:class:`~pygame_maker.actions.action.Action`&#xa;        :param event: The received event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;        :return: A list of instances affected by the event that the action&#xa;            will apply to&#xa;        :rtype: list&#xa; &quot;others&quot; are part of a collision event applies to an object type; this means apply it to all instances  of that object" name="get_applied_instance_list">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="eP88iHWI3tMY" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="amP5VfA32Uqg" type="GqxIRxJtYY5A" value="" name="action"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="MwBsmAsYBeZm" type="GqxIRxJtYY5A" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZWabzQFJKQA4" comment="        Execute action sequences generated by an instance.&#xa;        Possible ObjectInstance events:&#xa;        * intersect_boundary&#xa;        * outside_room&#xa;        :param event: The event generated by an ObjectInstance of this type&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="handle_instance_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="qvWrnqQMMyxJ" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Y2ahg9TIZZPF" type="GqxIRxJtYY5A" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MAdgYnj6nJnR" comment="        Handle mouse events that intersect with any of this object type's&#xa;        instances, after filtering global mouse events through the base class's&#xa;        method.&#xa;        If mouse event's XY coordinate intersects one or more instances and the&#xa;        exact mouse event is handled by this object (button #, press/release),&#xa;        then handle the event.&#xa;" name="handle_mouse_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Zs9wq4DCEorm" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="TEh0n6Fd0lUn" type="GqxIRxJtYY5A" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZaqMtbnMpTKc" comment="        Execute the action sequence associated with the supplied step event, if&#xa;        the exact step event is handled by this object (begin, end, normal),&#xa;        on every instance.&#xa;        :param event: The step event&#xa;        :type event: :py:class:`~pygame_maker.events.event.Event`&#xa;" name="handle_step_event">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="V0XhpOROwFjn" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZaDXJfKtYRnM" type="GqxIRxJtYY5A" value="" name="event"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qUAfxSHV2S2K" name="__repr__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="8NDgmy0IyXxl" type="GqxIRxJtYY5A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="RfKPFLxZush5" name="exceptions">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="I7eCef2MpAsX" name="LoggingException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="YhVjCoOCvmDu"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vzOokZibYRpF" name="__init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="PvgvKTBBGRUe" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="qnGLQQVicynw" type="GqxIRxJtYY5A" value="" name="msg"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="JQoJXPTQNrE5" type="GqxIRxJtYY5A" value="" name="logger"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="EOCK3bMudFtV" name="ExpressionException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="4xo38OmuA447"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="GAHQEKX0hKVy" comment="    Convert a list of tokens in infix notation into postfix notation.&#xa;    :param tok_list: The list of infix tokens (or a single token string)&#xa;    :type tok_list: str | list&#xa;    :param replacement_ops: Optional dict containing mappings from an infix&#xa;        operator to a postfix operator (E.G. {'+': operator.add, ...})&#xa;    :type replacement_ops: dict&#xa;    :return: A list of the tokens in postfix order&#xa;    :rtype: list&#xa; make sure no identifier aliases to python operators @@@@ figure out what exception is thrown if len()  isn't supported.." name="convert_infix_to_postfix">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="TtoADI7f1Xd8" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="SjQz9EY6K0hf" type="GqxIRxJtYY5A" value="" name="tok_list"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ko3ZgRwxcBNo" type="GqxIRxJtYY5A" value="" name="replacement_ops"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="jBC39uiRgj0M" comment="    Sort two operators by precedence.&#xa;    :param a: First operator&#xa;    :type a: str&#xa;    :param b: Second operator&#xa;    :type b: str&#xa;    :return: negative if a has lower precedence than b, 0 if both operators&#xa;        have the same precedence, positive if a has higher precedence&#xa;    :rtype: int&#xa;" name="precedence_check">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="pkjVUiqdc9Og" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="BuJl6fZXWMih" type="GqxIRxJtYY5A" value="" name="a"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="enMdKxj18v4I" type="GqxIRxJtYY5A" value="" name="b"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XN3EdwfMyhIN" name="ColorException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="hnaQN2UYuZZn"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vSAjcCwFIs3P" name="BackgroundException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="Oy2B3UDmsKCo"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="IMhWZ7tbOG7Z" name="GameEngineException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="yCcc76FNSvs0"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UknKnCBKoT6P" name="ObjectTypeException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="0adALzu4FqhX"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="hg7wWmT3boGp" comment="    Determine whether 2 sprites intersect.&#xa;    Currently, there are three types of collision masks that may be used to&#xa;    detect a collision:&#xa;    * rectangle: Used if both sprites have collision_type 'rectangle'&#xa;    * disk: Used if both sprites have collision_type 'disk'&#xa;    * precise: Used if both sprites have collision_type 'precise', or&#xa;      their collision types don't match&#xa;    :param sprite_a: The sprite to test for a collision&#xa;    :type sprite_a: :py:class:`~pygame_maker.actors.object_sprite.ObjectSprite`&#xa;    :param sprite_b: The other sprite to test for a collision&#xa;    :type sprite_b: :py:class:`~pygame_maker.actors.object_sprite.ObjectSprite`&#xa;    :return: True if the two sprites collided, or False&#xa;    :rtype: bool&#xa; simple cases first: both rectangular or disk collision types any mismatches fall back to mask collisions" name="sprite_collision_test">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="UH153Hv4SR0L" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1DYytaglmkQP" type="GqxIRxJtYY5A" value="" name="sprite_a"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="rX4bFqduWiq0" type="GqxIRxJtYY5A" value="" name="sprite_b"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="zg5jOV8G0BrD" comment="    Create a precise mask of an ObjectSprite's pixels.&#xa;    Set a mask pixel if the corresponding surface's pixel has an alpha value&#xa;    greater than threshold (for a surface with an alpha channel), or if the&#xa;    pixel doesn't match the surface's color key.  Borrowed from pygame's&#xa;    mask.py demo code. For some reason, this works and&#xa;    :py:func:`pygame.mask.from_surface` doesn't for the sample image used in&#xa;    the unit test for object_type.&#xa;    :param surface: The drawing surface to create a mask from&#xa;    :type surface: :py:class:`pygame.Surface`&#xa;    :param threshold: The minimum alpha value for a pixel on the Surface to&#xa;        appear in the mask (ignored if the surface has a color key)&#xa;    :type threshold: int&#xa;    :return: The mask created from the surface&#xa;    :rtype: :py:class:`pygame.mask.Mask`&#xa;" name="mask_from_surface">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="4ua33PG4rMX2" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="1S7VBvTfAUlD" type="GqxIRxJtYY5A" value="" name="surface"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="keHA5HU2vZmK" type="GqxIRxJtYY5A" value="" name="threshold"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="H0iSTRfB3vL6" comment="    Get an approximate collision normal between overlapping instances,&#xa;    from instance_a's perspective.&#xa;    :param instance_a: The first ObjectInstance to calculate a collision&#xa;        normal from&#xa;    :type instance_a: :py:class:`~pygame_maker.actors.object_instance.ObjectInstance`&#xa;    :param instance_b: The second ObjectInstance to calculate a collision&#xa;        normal from&#xa;    :type instance_b: :py:class:`~pygame_maker.actors.object_instance.ObjectInstance`&#xa;    :return: The normal vector&#xa;    :rtype: (int, int)&#xa; print(&quot;Solid collision overlap for normal: {}&quot;.format(overlap)) no collision here.. can't get a normal when one object is inside another.." name="get_collision_normal">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="MN1NIKTT8ZXS" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="An86MuQPnySq" type="GqxIRxJtYY5A" value="" name="instance_a"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="NgtE2OFKPvkq" type="GqxIRxJtYY5A" value="" name="instance_b"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="SxrFvH3GyuUy" comment="    Return the position offset between instance_a and instance_b from&#xa;        instance_a's perspective.&#xa;    :param instance_a: The first ObjectInstance to calculate the offset from&#xa;    :type instance_a: :py:class:`~pygame_maker.actors.object_instance.ObjectInstance`&#xa;    :param instance_b: The second ObjectInstance to calculate the offset from&#xa;    :type instance_b: :py:class:`~pygame_maker.actors.object_instance.ObjectInstance`&#xa;    :return: The offset in pixels&#xa;    :rtype: int&#xa;" name="get_offset_between_instances">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="T0gPtBNAqeqT" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="JhIgc0UwOTJe" type="GqxIRxJtYY5A" value="" name="instance_a"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="nk5tKcMkXBzQ" type="GqxIRxJtYY5A" value="" name="instance_b"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="eIP0lhfYRkQj" comment="    Return the number of pixels that instance_a overlaps instance_b.&#xa;    :param instance_a: The first ObjectInstance with overlapping pixels&#xa;    :type instance_a: :py:class:`~pygame_maker.actors.object_instance.ObjectInstance`&#xa;    :param instance_b: The second ObjectInstance with overlapping pixels&#xa;    :type instance_b: :py:class:`~pygame_maker.actors.object_instance.ObjectInstance`&#xa;    :return: The number of pixels that overlap&#xa;    :rtype: int&#xa;" name="get_mask_overlap">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="U5punFd8z5zx" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="LmTqxQHOPxnI" type="GqxIRxJtYY5A" value="" name="instance_a"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="6BSxnGQRYnSJ" type="GqxIRxJtYY5A" value="" name="instance_b"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="VEJuB7AIGcD3" comment="    Calculate a dot product between 2 vectors.&#xa;    :param v1: The first vector&#xa;    :type v1: (float, float)&#xa;    :param v2: The second vector&#xa;    :type v2: (float, float)&#xa;    :return: The dot product&#xa;    :rtype: float&#xa;" name="dot_product">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="3yUHYhKPInng" type="GqxIRxJtYY5A"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="qdUOOuhtzVln" type="GqxIRxJtYY5A" value="" name="v1"/>
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="iMtiRqdv4wnE" type="GqxIRxJtYY5A" value="" name="v2"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7KJDccPI8GlT" name="RoomException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="859fsPDSX2Ud"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="eeGBEmHIlppY" name="UnknownCodeBlockError">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="rN7EPXTcLoW6"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="t8CEwjJrfuKP" name="OpStackOverflowError">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="oJmMZL6Y98Jm"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jPXsYofTNubG" name="OpStackUnderflowError">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="pJ4rE5qpMg4Y"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="oMVrsBN8jzmX" name="DuplicateCodeBlockError">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="kTNn0sLhXaY8"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tN8pcpdTJl8F" name="ObjectSpriteException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="DOkEomYw7jau"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bST0EQCvkQNJ" name="ActionParameterException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="VDH2HLNM8aBA"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="RfKPFLxZush5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="u7ChmewgEM9z" name="SoundException">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="j7P9MHI776Oh"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="ztTEK9mCoQu8" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="fpdIHNY4WyQS" type="R03svvsthTIg" name="" aggregation="aggregate"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="HSzlL9BK2eXL" type="R03svvsthTIg" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gQMJKbaS6hbm" name="Exception"/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="u7ChmewgEM9z" xmi.id="j7P9MHI776Oh" parent="gQMJKbaS6hbm" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6NEBRctI6MWW" name="Sound">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="NwpWbnOqfxLu"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="a46XmxvVQA4t" type="GqxIRxJtYY5A" comment="Set the name this sound resource will be known by" initialValue="&quot;snd_&quot;" name="name"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="iKuF2kQ3rIF3" type="GqxIRxJtYY5A" comment="The file name containing the audio data" initialValue="None" name="sound_file"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="eCAvdCICFPj1" type="GqxIRxJtYY5A" comment="A string selecting the kind of sound file this is (effect or music)" initialValue="&quot;effect&quot;" name="sound_type"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="MeVkmXdUpWir" type="ZCaMVQeibnbk" comment="Flag whether to pre-load the audio data in setup() or wait until used" initialValue="True" name="preload"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="E8s6P791HJxv" type="ZCaMVQeibnbk" comment="Flag set when the audio data has been read from the file" initialValue="False" name="loaded"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="LKtdcqW63dng" type="UF7jeoizRBjD" comment="The `pygame.mixer.Sound` object created when the file is loaded" initialValue="None" name="audio"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="PTfqfM2NhgvY" type="4JeWXpQsAHVk" comment="The `pygame.mixer.Channel` returned when the audio is played" initialValue="None" name="channel"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="UIpAD84ovrBV" comment="        Create a new sound from a YAML-formatted file.  Expected YAML format::&#xa;            - sound_name1:&#xa;                sound_file: &lt;sound_file_path>&#xa;                sound_type: &lt;type>&#xa;                preload: true|false&#xa;            - sound_name2:&#xa;                ...&#xa;        Check each key against known Sound parameters, and use only those&#xa;        parameters to initalize a new sound.&#xa;        :param yaml_stream: A stream containing YAML-formatted text&#xa;        :type yaml_stream: file-like&#xa;        :param unused: This is a placeholder, since other load_from_yaml()&#xa;            resource methods take an additional argument&#xa;        :return: A list of new sound instances, one for each listed in the&#xa;            YAML stream that pass basic checks; if none are found, returns an&#xa;            empty list&#xa;        :rtype: list&#xa;" name="load_from_yaml">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="UNNNEXs0B32W" type="7qNNDsvzVr6m"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RmRVuWelMgqS" type="uf5QGUH2nhjz" value="" name="yaml_stream"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="fqf7S3brp2Li" type="yfaaXCaCDHE9" value="" name="unused"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4mApVHafGmEw" comment="        Initialize a new Sound instance.&#xa;        :param sound_name: The name this sound will be referenced by in other&#xa;            resources&#xa;        :type sound_name: str&#xa;        :param kwargs: Sound options passed in keyword args.  The following&#xa;            options are available:&#xa;            * ``sound_file`` (str): The path to a file containing the audio&#xa;              data&#xa;            * ``sound_type`` (str): The type of sound this is, see&#xa;              :py:attr:`SOUND_TYPES`&#xa;            * ``preload`` (bool): True if the sound should be loaded before&#xa;              the game loop begins&#xa;        :return:&#xa; convert to boolean" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="dm0mq1GunRhG" type="6NEBRctI6MWW"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pl7B6SlYn6w2" type="GqxIRxJtYY5A" value="" name="sound_name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gFtw15qppy0v" comment="        Preload the sound if preload is set.  Must be done after&#xa;        ``pygame.init().``&#xa;" name="setup"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="BUqwvXAbm2Vm" comment="        Load the audio data from the file, if it exists.&#xa;        :raise: SoundException if the file is not found&#xa;" name="load_file"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="e0cm9qkKJaFE" comment="        Play the sound.  Load it first if it wasn't already loaded.&#xa;        :param loop: Loop this sound until stopped using :py:meth:`stop_sound`&#xa;" name="play_sound">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wxWu694lxirP" type="ZCaMVQeibnbk" value="" name="loop"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dfmwE19JPvBm" comment="Stop the sound from playing." name="stop_sound"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WvWrkPLN37IH" comment="        Answer whether the sound is currently playing.&#xa;        :return: True if the sound is playing&#xa;        :rtype: bool&#xa;" name="is_sound_playing">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="7RaUMkEWVWKQ" type="ZCaMVQeibnbk"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="By359lTfezUM" comment="        Generate the YAML string describing this Sound instance.&#xa;        :return: The YAML-formatted string&#xa;        :rtype: str&#xa;" name="to_yaml">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="NpiQv0f0PFSl" type="GqxIRxJtYY5A"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zgFTAarLWuQd" comment="        Error-check the ``sound_type`` attribute.&#xa;        :raise: SoundException if the type string is unrecognized&#xa;        :return: True if the sound type is known&#xa;" name="check_type">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="dtHGrlcEZIcS" type="ZCaMVQeibnbk"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="IHSfWsOUYevj" comment="        Run error-checking on this sound resource.&#xa;        :return: The results from the error check, True if OK&#xa;        :rtype: bool&#xa;" name="check">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Cm2ieTLHMcVD" type="ZCaMVQeibnbk"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="O8PvO1NhInKn" name="__eq__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="OapiDLuZRHUp" type="ZCaMVQeibnbk"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="19sEBOx7JT2N" type="6NEBRctI6MWW" value="" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="6NEBRctI6MWW" xmi.id="NwpWbnOqfxLu" parent="3JMWAQJnfwGH" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="sNb5Zl9DLiYP" name="array"/>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="FSunS3VqfIOQ" name="resources['sounds']">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="tmkLTR91lcAI" type="R03svvsthTIg" name="" aggregation="aggregate"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="*" xmi.id="LG3N1muEFm1h" type="6NEBRctI6MWW" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="oq7TW02YHg5o" name="resources['sprites']">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="VThdkANpCBxm" type="R03svvsthTIg" name="" aggregation="none"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="*" xmi.id="mkmrBdYxRfRy" type="J9lQsMIXvSA1" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="n0HSlbq4RhdU" name="resources['sounds']">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="vdO03beGzOh8" type="R03svvsthTIg" name="" aggregation="none"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="*" xmi.id="ATbg9RJuPaKA" type="6NEBRctI6MWW" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="4Ma6qso7vFrJ" name="resources['backgrounds']">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="XNjx2LkpOsMH" type="R03svvsthTIg" name="" aggregation="none"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="*" xmi.id="8sGwOePTyxXm" type="7JL0dW5tx0Sk" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="rOXR2J7q5tlJ" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="sFJQYsmaQeoP" type="R03svvsthTIg" name="" aggregation="none"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="Ip6LvCokYJBa" type="hTXfwIQefHK6" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="24EqAY99w0ZO" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="sz3ZGDnN4bFl" type="R03svvsthTIg" name="" aggregation="none"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="k1JT2bn2dzrl" type="Usx1sPdWUnvV" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
     </UML:Namespace.ownedElement>
     <XMI.extension xmi.extender="umbrello">
      <diagrams>
       <diagram showopsig="1" linecolor="#ff0000" snapx="25" showattribassocs="1" snapy="25" linewidth="0" showattsig="1" textcolor="#000000" isopen="1" showpackage="1" showpubliconly="0" showstereotype="1" name="class diagram for game engine" font="Sans Serif,9,-1,0,50,0,0,0,0,0" canvasheight="2377.169494628906" canvaswidth="2350.88427734375" localid="-1" snapcsgrid="0" showgrid="0" showops="1" griddotcolor="#d3d3d3" backgroundcolor="#ffffff" usefillcolor="1" fillcolor="#ffff00" zoom="76" xmi.id="UmlmjnoenIsJ" documentation="" showscope="1" snapgrid="0" showatts="1" type="1">
        <widgets>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="110" showattsigs="601" showstereotype="1" y="-112" showattributes="1" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="NW8QvpnEZhfu" width="638" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="R03svvsthTIg" showscope="1" height="406" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="-565.079345703125" showattsigs="601" showstereotype="1" y="-182.5396881103516" showattributes="1" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="lW0nH5jW8Z7b" width="486" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="YfJQ4mNWIUmA" showscope="1" height="135.2380981445312" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="-568.2539672851562" showattsigs="601" showstereotype="1" y="-17.46031761169434" showattributes="1" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="Xh0bFpJIrQK8" width="493" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="3Qfk5hbxOfv7" showscope="1" height="126" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="952.579345703125" showattsigs="601" showstereotype="1" y="-874.0079345703125" showattributes="1" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="p8QOwK1ZUv9S" width="442" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="J9lQsMIXvSA1" showscope="1" height="406" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="952.5625610351562" showattsigs="601" showstereotype="1" y="-442.6923522949219" showattributes="1" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="aMT8Xl8n1kjZ" width="401" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="6NEBRctI6MWW" showscope="1" height="266" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="1008.609985351562" showattsigs="601" showstereotype="1" y="406.6853637695312" showattributes="1" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="AnqBxVvSJbln" width="401" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="7JL0dW5tx0Sk" showscope="1" height="322" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="955.0298461914062" showattsigs="601" showstereotype="1" y="-157.5382995605469" showattributes="1" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="2xY306dJMtjZ" width="661" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="hTXfwIQefHK6" showscope="1" height="490" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="953.7415161132812" showattsigs="601" showstereotype="1" y="834.8775024414062" showattributes="1" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="FDjCnz7sF6Yy" width="807" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="Usx1sPdWUnvV" showscope="1" height="574" showopsigs="601"/>
         <boxwidget width="849.8139038085938" showstereotype="1" x="932.81640625" usesdiagramusefillcolor="0" y="-893.6104125976562" usesdiagramfillcolor="0" isinstance="0" localid="iNLbkn7K0Rzu" fillcolor="#ffff00" height="2323.3623046875" linecolor="#000000" xmi.id="WgmTTt3QUnA2" textcolor="#000000" usefillcolor="1" linewidth="0" font="Sans Serif,9,-1,0,50,0,0,0,0,0"/>
         <floatingtext linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="1241.593383789062" showstereotype="1" y="-947.4176025390625" text="Game Resources" font="Sans Serif,20,-1,0,50,0,0,0,0,0" localid="01ySp8Ug2gFJ" pretext="" role="700" width="232" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="Rb4Yi46g648t" height="35"/>
        </widgets>
        <messages/>
        <associations>
         <assocwidget linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="YfJQ4mNWIUmA" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" widgetaid="R03svvsthTIg" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" xmi.id="acx2CwDdfaLK" changeabilityB="900" type="510">
          <linepath layout="Polyline">
           <startpoint startx="110" starty="-112"/>
           <endpoint endx="-79.079345703125" endy="-112"/>
          </linepath>
          <floatingtext linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-41.41269683837891" showstereotype="1" y="-155.5238037109375" text="language_engine" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="CjPUx1x1X6fC" pretext="+" role="710" width="121" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="pxV0dVDPzEAF" height="18"/>
         </assocwidget>
         <assocwidget linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="3Qfk5hbxOfv7" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" widgetaid="R03svvsthTIg" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" xmi.id="vhL5z2EIDAUT" changeabilityB="900" type="510">
          <linepath layout="Polyline">
           <startpoint startx="110" starty="11.11111068725586"/>
           <endpoint endx="-75.25396728515625" endy="11.11111068725586"/>
          </linepath>
          <floatingtext linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-23" showstereotype="1" y="17.33333396911621" text="event_engine" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="dafhbc9Qa9nw" pretext="+" role="710" width="99" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="EfdI0GNXwN99" height="18"/>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" usesdiagramusefillcolor="0" widgetaid="R03svvsthTIg" usesdiagramfillcolor="0" fillcolor="#ffff00" linecolor="#ff0000" seqnum="" totalcounta="2" xmi.id="oq7TW02YHg5o" widgetbid="J9lQsMIXvSA1" totalcountb="2" type="503" textcolor="#000000" usefillcolor="1" linewidth="0" font="Sans Serif,9,-1,0,50,0,0,0,0,0">
          <linepath layout="Polyline">
           <startpoint startx="748" starty="-112"/>
           <endpoint endx="952.579345703125" endy="-468.0079345703125"/>
          </linepath>
          <floatingtext linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="728.3650512695312" showstereotype="1" y="-312.9206237792969" text="resources['sprites']" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="eRWv7bia4NEo" pretext="" role="703" width="123" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="XZbjlZUVJGKS" height="18"/>
          <floatingtext linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="735.8728637695312" showstereotype="1" y="-134.7666473388672" text="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="rtQJWpFAGj4L" pretext="" role="701" width="16" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="LkvN77AeflMQ" height="18"/>
          <floatingtext linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="934.212646484375" showstereotype="1" y="-471.9413757324219" text="*" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="Iqtb4E2w7QDd" pretext="" role="702" width="14" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="DQmT9omUYhqd" height="18"/>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" usesdiagramusefillcolor="0" widgetaid="R03svvsthTIg" usesdiagramfillcolor="0" fillcolor="#ffff00" linecolor="#ff0000" seqnum="" totalcounta="2" xmi.id="n0HSlbq4RhdU" widgetbid="6NEBRctI6MWW" totalcountb="2" type="503" textcolor="#000000" usefillcolor="1" linewidth="0" font="Sans Serif,9,-1,0,50,0,0,0,0,0">
          <linepath layout="Polyline">
           <startpoint startx="748" starty="-112"/>
           <endpoint endx="952.5625610351562" endy="-176.6923522949219"/>
          </linepath>
          <floatingtext linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="808.7061767578125" showstereotype="1" y="-190.2376403808594" text="resources['sounds']" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="AACbro5lPRlT" pretext="" role="703" width="125" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="2Nh1lN8vojZx" height="18"/>
          <floatingtext linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="760.4542236328125" showstereotype="1" y="-139.5922393798828" text="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="8spXR9hbJsA9" pretext="" role="701" width="16" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="eEu3ffUg1Afm" height="18"/>
          <floatingtext linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="937.5404052734375" showstereotype="1" y="-189.5272216796875" text="*" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="XngJWFHc649X" pretext="" role="702" width="14" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="Ep8VhGeJUWKA" height="18"/>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" usesdiagramusefillcolor="0" widgetaid="R03svvsthTIg" usesdiagramfillcolor="0" fillcolor="#ffff00" linecolor="#ff0000" seqnum="" totalcounta="2" xmi.id="4Ma6qso7vFrJ" widgetbid="7JL0dW5tx0Sk" totalcountb="2" type="503" textcolor="#000000" usefillcolor="1" linewidth="0" font="Sans Serif,9,-1,0,50,0,0,0,0,0">
          <linepath layout="Polyline">
           <startpoint startx="748" starty="294"/>
           <endpoint endx="1008.609985351562" endy="406.6853637695312"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="930.8806762695312" showstereotype="1" y="355.8766174316406" text="resources['backgrounds']" font="Sans Serif,9,-1,5,50,0,0,0,0,0" localid="nJtiZiz46iz8" pretext="" role="703" width="160" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="4ixSaHig8ycU" height="18"/>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="754.7117919921875" showstereotype="1" y="278.6289672851562" text="1" font="Sans Serif,9,-1,5,50,0,0,0,0,0" localid="c0xaxSMlmDRJ" pretext="" role="701" width="16" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="wPN27L8913ab" height="18"/>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="1004.457458496094" showstereotype="1" y="385.5140380859375" text="*" font="Sans Serif,9,-1,5,50,0,0,0,0,0" localid="KGGQEsvpqqNm" pretext="" role="702" width="14" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="JiV5vwMpLhpR" height="18"/>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" usesdiagramusefillcolor="1" widgetaid="R03svvsthTIg" usesdiagramfillcolor="0" fillcolor="#ffff00" linecolor="none" seqnum="" totalcounta="2" xmi.id="rOXR2J7q5tlJ" widgetbid="hTXfwIQefHK6" totalcountb="2" type="503" textcolor="none" usefillcolor="1" linewidth="none" font="Sans Serif,9,-1,0,50,0,0,0,0,0">
          <linepath layout="Polyline">
           <startpoint startx="748" starty="138.9953308105469"/>
           <endpoint endx="955.0298461914062" endy="138.9953308105469"/>
          </linepath>
         </assocwidget>
         <assocwidget linecolor="#ff0000" indexa="1" usesdiagramfillcolor="0" widgetbid="R03svvsthTIg" indexb="1" linewidth="0" seqnum="" textcolor="#000000" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" widgetaid="hTXfwIQefHK6" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="3" visibilityB="3" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" xmi.id="nNnflYfvYwwK" changeabilityB="900" type="503">
          <linepath layout="Polyline">
           <startpoint startx="955.0298461914062" starty="138.9953308105469"/>
           <endpoint endx="748" endy="138.9953308105469"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="798.1621704101562" showstereotype="1" y="117.1815032958984" text="resources['objects']" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="AAiiUrI66gmC" pretext="" role="703" width="126" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="oi890W26cUcM" height="18"/>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="942.7015991210938" showstereotype="1" y="120.1591796875" text="*" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="iWPlVlhfwNOQ" pretext="" role="701" width="14" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="EgUILEU7xcGv" height="18"/>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="748.8673706054688" showstereotype="1" y="119.0921096801758" text="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="6I1gkb3S8QBb" pretext="" role="702" width="16" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="CsG8FeYSJ0kc" height="18"/>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="814.0690307617188" showstereotype="1" y="141.8391723632812" text="game_engine" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="cGOh89yyNHOt" pretext="~" role="710" width="99" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="88RWkGw330Oy" height="18"/>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" usesdiagramusefillcolor="1" widgetaid="R03svvsthTIg" usesdiagramfillcolor="0" fillcolor="#ffff00" linecolor="none" seqnum="" totalcounta="2" xmi.id="24EqAY99w0ZO" widgetbid="Usx1sPdWUnvV" totalcountb="2" type="503" textcolor="none" usefillcolor="1" linewidth="none" font="Sans Serif,9,-1,0,50,0,0,0,0,0">
          <linepath layout="Polyline">
           <startpoint startx="748" starty="294"/>
           <endpoint endx="953.7415161132812" endy="834.8775024414062"/>
          </linepath>
         </assocwidget>
         <assocwidget linecolor="#ff0000" indexa="1" usesdiagramfillcolor="0" widgetbid="R03svvsthTIg" indexb="1" linewidth="0" seqnum="" textcolor="#000000" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" widgetaid="Usx1sPdWUnvV" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="3" visibilityB="3" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" xmi.id="x1WD8Haj3eix" changeabilityB="900" type="503">
          <linepath layout="Polyline">
           <startpoint startx="953.7415161132812" starty="834.8775024414062"/>
           <endpoint endx="748" endy="294"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="808.5498657226562" showstereotype="1" y="430.3521423339844" text="resources['rooms']" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="kjKMh97C80e6" pretext="" role="703" width="120" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="RTxsHKXKVZSI" height="18"/>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="957.904296875" showstereotype="1" y="812.1661987304688" text="1..*" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="qIn6TlOBSgX9" pretext="" role="701" width="29" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="qdMydy24Rzui" height="18"/>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="737.7913208007812" showstereotype="1" y="306.6430969238281" text="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="KP1pyR5ojssA" pretext="" role="702" width="16" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="bEK4vpDjSXf3" height="18"/>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="743.2579345703125" showstereotype="1" y="540.816162109375" text="game_engine" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="X0uSyRoqQqPh" pretext="~" role="710" width="99" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="3D48mHrVIByI" height="18"/>
         </assocwidget>
         <assocwidget linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="7JL0dW5tx0Sk" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" widgetaid="Usx1sPdWUnvV" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" xmi.id="4VsU3VYZAeSn" changeabilityB="900" type="510">
          <linepath layout="Polyline">
           <startpoint startx="1182.803466796875" starty="834.8775024414062"/>
           <endpoint endx="1182.803466796875" endy="728.6853637695312"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="1193.33740234375" showstereotype="1" y="760.9928588867188" text="background" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="c4k0hVNkJWUz" pretext="+" role="710" width="89" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="XOFldZuf5k96" height="18"/>
         </assocwidget>
        </associations>
       </diagram>
       <diagram showopsig="1" linecolor="#ff0000" snapx="25" showattribassocs="1" snapy="25" linewidth="0" showattsig="1" textcolor="#000000" isopen="1" showpackage="1" showpubliconly="1" showstereotype="1" name="state diagram for game engine" font="Sans Serif,9,-1,0,50,0,0,0,0,0" canvasheight="1341.240963855422" canvaswidth="1091.650602409639" localid="-1" snapcsgrid="0" showgrid="0" showops="1" griddotcolor="#d3d3d3" backgroundcolor="#ffffff" usefillcolor="1" fillcolor="#ffff00" zoom="83" xmi.id="yN8Hkgy8A8zq" documentation="" showscope="1" snapgrid="0" showatts="1" type="5">
        <widgets>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-30" showstereotype="1" y="-341" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="iZ0tNO1UjM67" statename="State" statetype="0" width="10" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="XA3eLXNHsTYc" documentation="" height="10">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-99" showstereotype="1" y="-230" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="8WkIej6KG6Bb" statename="load game resources" statetype="1" width="151" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="TC3CZAJ4ILgd" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-95" showstereotype="1" y="-291" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="s1uiVRLdv3tY" statename="load game settings" statetype="1" width="140" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="l0sz62ZZEcjl" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-78" showstereotype="1" y="-165" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="m3p2MTfCVYu0" statename="load style sheet" statetype="1" width="118" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="xDbsHUQ2SH1Z" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-24" showstereotype="1" y="-98" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="JY6VBqHvt4yD" statename="State" statetype="2" width="10" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="YdP39J16Xazm" documentation="" height="10">
          <Activities/>
         </statewidget>
         <floatingtext linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-64" showstereotype="1" y="-378" text="initialization" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="jIEEsB0vYmQB" pretext="" role="700" width="81" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="9TG9uYHbqTpj" height="18"/>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-24.48979591836735" showstereotype="1" y="5.102040816326531" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="epcAZ0L5SSu2" statename="State" statetype="0" width="10" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="zFbF02D9VRHN" documentation="" height="10">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-83.89057750759879" showstereotype="1" y="39.53538862353453" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="zWzqzmXba7l9" statename="initialize pygame" statetype="1" width="126" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="75CZX7ZWMBjM" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-171.4719930525401" showstereotype="1" y="92.37950499348675" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="DuTgMi1LC09B" statename="run setup() for each resource w/ preload flags" statetype="1" width="321" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="lekLlUUsZhP4" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-100.412505427703" showstereotype="1" y="199.0447242726877" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="mza8AIULCv1Y" statename="collect pygame events" statetype="1" width="162" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="e2sq1z0mei5N" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="317.1571668913655" showstereotype="1" y="469.4594330939202" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="AuombtAlQQVd" statename="draw current room's background" statetype="1" width="232" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="1GbcaiKCGO1i" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="352.5056892790441" showstereotype="1" y="588.1483554713814" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="QMoTXjXfdJSC" statename="transmit draw event" statetype="1" width="157.2352941176471" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="AcyZ0TC1hlbI" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-95.66717432935747" showstereotype="1" y="308.8292594658987" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="TwUiKVQipFCK" statename="create new instance" statetype="1" width="156.6987951807229" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="yh0Z1Qm92ki0" documentation="" height="27.44436569808647">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-105.3467436705521" showstereotype="1" y="529.4073917698329" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="Bszqeb85Vbnn" statename="transmit begin_step event" statetype="1" width="188" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="6EVuRhCNNCuO" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-163.9718322602048" showstereotype="1" y="695.6777296922368" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="aeVaMCaX4aOi" statename="queue and transmit collected mouse/kb events" statetype="1" width="328" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="9Uoc5ZPAnu2C" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-15.78660072078046" showstereotype="1" y="641.960583259195" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="aEZxPUJz8oaV" statename="State" statetype="8" width="25" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="0A03iMjprXRu" documentation="" height="25">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-75.18584978210713" showstereotype="1" y="589.7077672391696" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="34usaLmfApTt" statename="quit event received?" statetype="1" width="148" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="tWAC9OsDtaQA" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-99.6539348884901" showstereotype="1" y="749.2822353242767" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="28Jvik6VoWjZ" statename="transmit normal_step event" statetype="1" width="197" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="I3L6FzSkMRQZ" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="292.5531914893617" showstereotype="1" y="286.849525762625" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="tycsfsyf0Ibg" statename="call all object types' update() methods" statetype="1" width="271" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="0fBo9uMRvfV8" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="266.5983081261215" showstereotype="1" y="347.9876954627006" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="dvtzKJWEF94s" statename="call all object types' collision_check() methods" statetype="1" width="324" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="13YzL7dLmo7t" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="305.0371699564214" showstereotype="1" y="408.6259933350399" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="hRJa7ohkiaj2" statename="transmit all queued collision events" statetype="1" width="252" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="rDE6MJxLMVIf" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="341.2073827223789" showstereotype="1" y="527.7749295052513" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="av0Mi5DPXWxe" statename="transmit end_step event" statetype="1" width="175" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="LeM1C333GI8d" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="377.3775954883363" showstereotype="1" y="652.2430146116371" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="b3wvYFa88YSq" statename="update display" statetype="1" width="110" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="bfD8ABmTn6U0" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-6.177903101768774" showstereotype="1" y="893.6042040502441" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="9X1Qn71MAvFg" statename="State" statetype="2" width="10" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="ApmJLE7xsL30" documentation="" height="10">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-40.07946680338374" showstereotype="1" y="818.4311714944896" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="UoTHuxH4SHSG" statename="shutdown" statetype="1" width="76" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="OTaZMqFXd0oz" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-73.40425531914893" showstereotype="1" y="148.9361702127659" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="9pYiWwd2X499" statename="load first room" statetype="1" width="110" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="IFxODnj8ikl7" documentation="" height="24">
          <Activities/>
         </statewidget>
         <floatingtext linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-52.12765957446808" showstereotype="1" y="-17.02127659574468" text="main loop" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="j4wv3eaCT6sx" pretext="" role="700" width="67" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="Nwf4gQ9PT5IW" height="18"/>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-154.2168674698796" showstereotype="1" y="371.0843373493976" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="hrh8vZ5w31Sb" statename="transmit create event to new instance" statetype="1" width="283" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="75QRffx2Za4F" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-150.6024096385542" showstereotype="1" y="255.4216867469879" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="zDcSGsyxjd5f" statename="for each object in new object queue" statetype="1" width="252" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="B9ZEAzqF4Geh" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-91.56626506024097" showstereotype="1" y="424.0963855421687" font="Sans Serif,9,-1,5,75,0,0,0,0,0" localid="tchSCmfBzFdG" statename="done creating objects?" statetype="1" width="164" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="7aBpBFSMO1bW" documentation="" height="24">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-25.30120481927711" showstereotype="1" y="480.7228915662652" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="yPj2dOhUyMuA" statename="State" statetype="8" width="25" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="8XK6mvKrVTgf" documentation="" height="25">
          <Activities/>
         </statewidget>
         <statewidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="374.6987951807229" showstereotype="1" y="715.6626506024096" font="Sans Serif,9,-1,0,75,0,0,0,0,0" localid="FfDjjVwh6zBB" statename="frame rate delay" statetype="1" width="123" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="lJxbTnaCBbuq" documentation="" height="24">
          <Activities/>
         </statewidget>
        </widgets>
        <messages/>
        <associations>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="l0sz62ZZEcjl" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="XA3eLXNHsTYc" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-21" starty="-331"/>
           <endpoint endx="-21" endy="-291"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="TC3CZAJ4ILgd" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="l0sz62ZZEcjl" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-21" starty="-267"/>
           <endpoint endx="-21" endy="-230"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="xDbsHUQ2SH1Z" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="TC3CZAJ4ILgd" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-23" starty="-206"/>
           <endpoint endx="-23" endy="-165"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="YdP39J16Xazm" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="xDbsHUQ2SH1Z" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-24" starty="-141"/>
           <endpoint endx="-24" endy="-98"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="75CZX7ZWMBjM" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="zFbF02D9VRHN" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-18.52887537993922" starty="15.10204081632653"/>
           <endpoint endx="-18.52887537993922" endy="39.53538862353453"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="lekLlUUsZhP4" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="75CZX7ZWMBjM" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-18.28050369083806" starty="63.53538862353453"/>
           <endpoint endx="-18.28050369083806" endy="92.37950499348675"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="tWAC9OsDtaQA" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="6EVuRhCNNCuO" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-10.16602077898578" starty="553.4073917698329"/>
           <endpoint endx="-10.16602077898578" endy="589.7077672391696"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="0A03iMjprXRu" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="208" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="tWAC9OsDtaQA" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-9.762504335238297" starty="613.7077672391696"/>
           <endpoint endx="-9.762504335238297" endy="641.960583259195"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="#ff0000" indexa="1" usesdiagramfillcolor="0" widgetbid="9Uoc5ZPAnu2C" indexb="1" linewidth="0" seqnum="" textcolor="#000000" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="0A03iMjprXRu" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-9.762504335238305" starty="666.960583259195"/>
           <endpoint endx="-9.762504335238305" endy="695.6777296922368"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-5.773655322164714" showstereotype="1" y="668.3191564757159" text="no" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="VdS9dE6q80sK" pretext="" role="703" width="23" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="vv3fOzJrC1kh" height="18"/>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="I3L6FzSkMRQZ" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="120" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="9Uoc5ZPAnu2C" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-14.89361702127658" starty="719.6777296922368"/>
           <endpoint endx="-14.89361702127658" endy="749.2822353242767"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="0fBo9uMRvfV8" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="48" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="I3L6FzSkMRQZ" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="97.3460651115099" starty="760.2409638554218"/>
           <endpoint endx="292.5531914893617" endy="301.2048192771085"/>
           <point x="193.9759036144578" y="760.2409638554218"/>
           <point x="190.3614457831326" y="301.2048192771085"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="#ff0000" indexa="1" usesdiagramfillcolor="0" widgetbid="OTaZMqFXd0oz" indexb="1" linewidth="0" seqnum="" textcolor="#000000" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="0A03iMjprXRu" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-15.78660072078046" starty="653.5375544732127"/>
           <endpoint endx="-40.07946680338374" endy="831.197128941298"/>
           <point x="-197.526275314022" y="653.5375544732127"/>
           <point x="-197.526275314022" y="831.197128941298"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-55.06069333655024" showstereotype="1" y="633.3247885157658" text="yes" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="Etu4Ex2ilVyg" pretext="" role="703" width="29" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="SDitUA7rbhQx" height="18"/>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="ApmJLE7xsL30" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="OTaZMqFXd0oz" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-0.1538067162266117" starty="842.4311714944896"/>
           <endpoint endx="-0.1538067162266117" endy="893.6042040502441"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="rDE6MJxLMVIf" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="13YzL7dLmo7t" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="428.0440912586516" starty="371.9876954627006"/>
           <endpoint endx="428.0440912586516" endy="408.6259933350399"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="1GbcaiKCGO1i" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="rDE6MJxLMVIf" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="426.0348905519654" starty="432.6259933350399"/>
           <endpoint endx="426.0348905519654" endy="469.4594330939202"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="LeM1C333GI8d" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="1GbcaiKCGO1i" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="426.0348905519654" starty="493.4594330939202"/>
           <endpoint endx="426.0348905519654" endy="527.7749295052513"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="AcyZ0TC1hlbI" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="LeM1C333GI8d" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="427.2557533651759" starty="551.7749295052513"/>
           <endpoint endx="427.2557533651759" endy="588.1483554713814"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="bfD8ABmTn6U0" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="AcyZ0TC1hlbI" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="427.2557533651759" starty="612.1483554713814"/>
           <endpoint endx="427.2557533651759" endy="652.2430146116371"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="IFxODnj8ikl7" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="lekLlUUsZhP4" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-19.78723404255317" starty="116.3795049934867"/>
           <endpoint endx="-19.78723404255317" endy="148.9361702127659"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="e2sq1z0mei5N" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="IFxODnj8ikl7" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-19.78723404255317" starty="172.9361702127659"/>
           <endpoint endx="-19.78723404255317" endy="199.0447242726877"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="B9ZEAzqF4Geh" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="e2sq1z0mei5N" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-18.07228915662648" starty="223.0447242726877"/>
           <endpoint endx="-18.07228915662648" endy="255.4216867469879"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="yh0Z1Qm92ki0" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="B9ZEAzqF4Geh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-18.07228915662648" starty="279.4216867469879"/>
           <endpoint endx="-18.07228915662648" endy="308.8292594658987"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="75QRffx2Za4F" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="yh0Z1Qm92ki0" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-15.66265060240966" starty="336.2736251639852"/>
           <endpoint endx="-15.66265060240966" endy="371.0843373493976"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="7aBpBFSMO1bW" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="208" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="75QRffx2Za4F" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-15.66265060240966" starty="395.0843373493976"/>
           <endpoint endx="-15.66265060240966" endy="424.0963855421687"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="8XK6mvKrVTgf" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="64" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="7aBpBFSMO1bW" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-13.25301204819277" starty="448.0963855421687"/>
           <endpoint endx="-13.25301204819277" endy="480.7228915662652"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="#ff0000" indexa="1" usesdiagramfillcolor="0" widgetbid="6EVuRhCNNCuO" indexb="1" linewidth="0" seqnum="" textcolor="#000000" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="8XK6mvKrVTgf" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-13.25301204819277" starty="505.7228915662652"/>
           <endpoint endx="-13.25301204819277" endy="529.4073917698329"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-8.433734939759038" showstereotype="1" y="503.1073103427478" text="yes" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="i8147cY5zI5a" pretext="" role="703" width="29" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="em4c7wmFT4JD" height="18"/>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="#ff0000" indexa="1" usesdiagramfillcolor="0" widgetbid="B9ZEAzqF4Geh" indexb="1" linewidth="0" seqnum="" textcolor="#000000" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="8XK6mvKrVTgf" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="-25.30120481927711" starty="490.3614457831326"/>
           <endpoint endx="-150.6024096385542" endy="262.6506024096386"/>
           <point x="-216.8674698795181" y="490.3614457831326"/>
           <point x="-219.277108433735" y="262.6506024096386"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-57.22891566265058" showstereotype="1" y="468.6746987951807" text="no" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="0b5T5l8nsAsz" pretext="" role="703" width="23" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="kO3ig8IItLu0" height="18"/>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="lJxbTnaCBbuq" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="bfD8ABmTn6U0" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="427.710843373494" starty="676.2430146116371"/>
           <endpoint endx="427.710843373494" endy="715.6626506024096"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="e2sq1z0mei5N" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="lJxbTnaCBbuq" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="497.6987951807229" starty="727.7108433734941"/>
           <endpoint endx="61.58749457229702" endy="213.2530120481928"/>
           <point x="624.0963855421687" y="727.7108433734941"/>
           <point x="620.4819277108435" y="213.2530120481928"/>
          </linepath>
         </assocwidget>
         <assocwidget roleBdoc="" linecolor="none" indexa="1" usesdiagramfillcolor="0" widgetbid="13YzL7dLmo7t" indexb="1" linewidth="none" seqnum="" textcolor="none" usesdiagramusefillcolor="0" totalcounta="2" totalcountb="2" roleAdoc="" widgetaid="0fBo9uMRvfV8" font="Sans Serif,9,-1,0,50,0,0,0,0,0" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" changeabilityB="900" documentation="" type="514">
          <linepath layout="Polyline">
           <startpoint startx="428.0440912586516" starty="310.849525762625"/>
           <endpoint endx="428.0440912586516" endy="347.9876954627006"/>
          </linepath>
         </assocwidget>
        </associations>
       </diagram>
       <diagram showopsig="1" linecolor="#ff0000" snapx="25" showattribassocs="1" snapy="25" linewidth="0" showattsig="1" textcolor="#000000" isopen="1" showpackage="1" showpubliconly="1" showstereotype="1" name="sequence diagram for incoming ObjectType events" font="Sans Serif,9,-1,0,50,0,0,0,0,0" canvasheight="407.5683394532844" canvaswidth="1348.058823529412" localid="-1" snapcsgrid="0" showgrid="0" showops="1" griddotcolor="#d3d3d3" backgroundcolor="#ffffff" autoincrementsequence="1" usefillcolor="1" fillcolor="#ffff00" zoom="85" xmi.id="FG9Rs3FaDLBh" documentation="" showscope="1" snapgrid="0" showatts="1" type="3">
        <widgets>
         <objectwidget linecolor="none" usesdiagramfillcolor="1" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="1" x="-493" decon="0" showstereotype="1" y="80" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="MiSySuKiGN4c" width="97" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="none" xmi.id="3Qfk5hbxOfv7" height="24" drawasactor="0"/>
         <objectwidget linecolor="none" usesdiagramfillcolor="1" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="1" x="-31" decon="0" showstereotype="1" y="80" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="ZXh40PzDe8cU" width="88" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="none" xmi.id="hTXfwIQefHK6" height="24" drawasactor="0"/>
         <objectwidget linecolor="none" usesdiagramfillcolor="1" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="1" x="-759" decon="0" showstereotype="1" y="80" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="ULViloCO99uu" width="98" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="none" xmi.id="R03svvsthTIg" height="24" drawasactor="0"/>
         <floatingtext linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="-375.4385964912281" showstereotype="1" y="203.5087719298246" text="* substitute any event handler for handle_create_event()" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="WC2kpRvSRU0W" pretext="" role="700" width="350" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="oCGmbV35h4pU" height="18"/>
         <floatingtext linecolor="none" usesdiagramfillcolor="0" linewidth="0" textcolor="#000000" usesdiagramusefillcolor="0" x="18.8235294117647" showstereotype="1" y="221.1764705882353" text="* handler filters events and/or selects target instances as needed" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="VixuDvODVRSx" pretext="" role="700" width="402" isinstance="0" posttext="" usefillcolor="1" fillcolor="#ffff00" xmi.id="2mVhqLCL37GE" height="18"/>
        </widgets>
        <messages>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="MiSySuKiGN4c" textid="Bd03iVF9ukT2" operation="ivGILDQ00G50" linewidth="none" seqnum="1" textcolor="none" usesdiagramusefillcolor="1" x="-443" showstereotype="1" y="122" widgetaid="ZXh40PzDe8cU" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="Rgs32JA7s7XE" width="455" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="ivGILDQ00G50" height="20" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-438" showstereotype="1" y="104" text="register_event_handler(event_name : string, event_handler : method)" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="xqLw1C1SquVt" pretext="" role="704" width="443" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="Bd03iVF9ukT2" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="MiSySuKiGN4c" textid="eOcOvO7eDIDs" operation="afkawNHpyGnf" linewidth="none" seqnum="2" textcolor="none" usesdiagramusefillcolor="1" x="-709" showstereotype="1" y="145" widgetaid="ULViloCO99uu" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="rEySvtFtkZnl" width="264" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="afkawNHpyGnf" height="20" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-704" showstereotype="1" y="127" text="queue_event(an_event : events.Event)" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="v88osboiqkAl" pretext="" role="704" width="256" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="eOcOvO7eDIDs" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="MiSySuKiGN4c" textid="w9BiavIZScPj" operation="Zf9Vvx9lh97E" linewidth="none" seqnum="3" textcolor="none" usesdiagramusefillcolor="1" x="-709" showstereotype="1" y="175" widgetaid="ULViloCO99uu" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="yekH4dIylRkc" width="264" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="Zf9Vvx9lh97E" height="20" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-693" showstereotype="1" y="157" text="transmit_event(event_name : string)" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="YOLjgXbeBJtD" pretext="" role="704" width="244" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="w9BiavIZScPj" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZXh40PzDe8cU" textid="S7ihz0aOu5y7" operation="70bPITIsC9Ja" linewidth="none" seqnum="4" textcolor="none" usesdiagramusefillcolor="1" x="-443" showstereotype="1" y="198" widgetaid="MiSySuKiGN4c" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="2xcr6tYcFuKv" width="455" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="70bPITIsC9Ja" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-286" showstereotype="1" y="180" text="handle_create_event(event : events.Event)" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="q7hIh4zk0ZZ6" pretext="" role="704" width="282" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="S7ihz0aOu5y7" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZXh40PzDe8cU" textid="tkS2YErPyOFJ" operation="MhFkkNt191iS" linewidth="none" seqnum="5" textcolor="none" usesdiagramusefillcolor="1" x="14" showstereotype="1" y="254.0027359781122" widgetaid="ZXh40PzDe8cU" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="VkE3h49X9qor" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="MhFkkNt191iS" height="20" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="19" showstereotype="1" y="236" text="execute_action_sequence(event : events.Event, targets : array = None)" font="Sans Serif,9,-1,0,50,0,0,0,0,0" localid="dzZX5WeYGrbv" pretext="" role="705" width="455" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="tkS2YErPyOFJ" height="18"/>
         </messagewidget>
        </messages>
        <associations/>
       </diagram>
      </diagrams>
     </XMI.extension>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Use Case View" name="Use Case View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Component View" name="Component View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Deployment View" name="Deployment View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Entity Relationship Model" name="Entity Relationship Model">
     <UML:Namespace.ownedElement/>
    </UML:Model>
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello">
  <docsettings viewid="FG9Rs3FaDLBh" uniqueid="2mVhqLCL37GE" documentation=""/>
  <listview>
   <listitem open="1" type="800" id="Views">
    <listitem open="1" type="821" id="Component View"/>
    <listitem open="1" type="827" id="Deployment View"/>
    <listitem open="1" type="836" id="Entity Relationship Model"/>
    <listitem open="1" type="801" id="Logical View">
     <listitem open="0" type="803" id="2GSLg8hm6juR">
      <listitem open="0" type="813" id="yrqFX5ySww5V">
       <listitem open="0" type="815" id="WhCC0iwDVgAN"/>
       <listitem open="0" type="815" id="jJGRb5q0X66M"/>
       <listitem open="0" type="815" id="BbXaMDFsuR2v"/>
       <listitem open="0" type="815" id="8Wj0vlt4gzfJ"/>
       <listitem open="0" type="815" id="M4KnFo2XfJYk"/>
       <listitem open="0" type="815" id="RUF7p2gtjKdR"/>
       <listitem open="0" type="815" id="IpvniCdogMpb"/>
      </listitem>
      <listitem open="0" type="813" id="tQtp1bmFWTII">
       <listitem open="0" type="815" id="azbQDOdftgdB"/>
       <listitem open="0" type="815" id="xryfaqkxKkxz"/>
       <listitem open="0" type="815" id="2DN2pGFja8K3"/>
       <listitem open="0" type="815" id="qzJR5dSeNVfB"/>
       <listitem open="0" type="815" id="X0buVG6TVTzb"/>
       <listitem open="0" type="815" id="nT8fPfcwdDp9"/>
       <listitem open="0" type="815" id="OU22hr97kj26"/>
      </listitem>
      <listitem open="0" type="813" id="cgp6Lc9DptPV">
       <listitem open="0" type="815" id="93R9YjlvGsLH"/>
       <listitem open="0" type="815" id="Zx3zWJgTw6MC"/>
       <listitem open="0" type="815" id="UF2k8N0ZLtEk"/>
       <listitem open="0" type="815" id="KPDfIQOkucaM"/>
       <listitem open="0" type="815" id="AKbjJ1NeQZHj"/>
      </listitem>
      <listitem open="0" type="813" id="kDjaHh8ese0C">
       <listitem open="0" type="815" id="RIAWl67ewdky"/>
      </listitem>
      <listitem open="0" type="813" id="j8tpeSCDNGAr">
       <listitem open="0" type="815" id="UgwerYZXibVo"/>
       <listitem open="0" type="815" id="NAWOMhxGly0q"/>
       <listitem open="0" type="815" id="t6Ybh1PVS0aj"/>
       <listitem open="0" type="815" id="v51m5nhoatpc"/>
       <listitem open="0" type="815" id="u7AK7i2FIGL1"/>
       <listitem open="0" type="815" id="inC14V2ft7Hr"/>
      </listitem>
      <listitem open="0" type="813" id="B0mhKN2Xqx8Y">
       <listitem open="0" type="815" id="89aQe4WkO2XY"/>
       <listitem open="0" type="815" id="rDkEg2meNFYz"/>
       <listitem open="0" type="815" id="DD3ZDY6vuEVy"/>
       <listitem open="0" type="815" id="RConblgDPhMP"/>
       <listitem open="0" type="815" id="VPVAWCSiNTHa"/>
      </listitem>
     </listitem>
     <listitem open="0" type="803" id="e2DVdutzJQiN">
      <listitem open="0" type="813" id="wla5RUXoUEgq">
       <listitem open="0" type="815" id="ZtWHRZtcXe9D"/>
      </listitem>
      <listitem open="0" type="813" id="4xgAXrKwF8qC">
       <listitem open="0" type="815" id="XJyEh15Pnzd7"/>
       <listitem open="0" type="815" id="5Llb8UdlDdPC"/>
       <listitem open="0" type="815" id="Bh0Jyx7yTv9F"/>
       <listitem open="0" type="815" id="kovEK2bx3u1i"/>
       <listitem open="0" type="815" id="69JKkhUhqJaQ"/>
       <listitem open="0" type="815" id="UTkRioNvzGW4"/>
       <listitem open="0" type="815" id="bg0hfla5BII2"/>
       <listitem open="0" type="815" id="FvjCADGRcN3E"/>
       <listitem open="0" type="815" id="gK8ct9gIeImp"/>
       <listitem open="0" type="815" id="KgQbgLyuWnj4"/>
      </listitem>
      <listitem open="0" type="813" id="vHEhouCUTLfO">
       <listitem open="0" type="815" id="t3rr4f7XlMrC"/>
      </listitem>
      <listitem open="0" type="813" id="iLoWxPLNOGVD">
       <listitem open="0" type="815" id="dBBSbhsfJr1u"/>
      </listitem>
      <listitem open="0" type="813" id="f0THCCWlQjac">
       <listitem open="0" type="815" id="UC45Jv1iN6ce"/>
      </listitem>
      <listitem open="0" type="813" id="Zh8wzD5Avqsj">
       <listitem open="0" type="815" id="MaffYuCf93lM"/>
      </listitem>
      <listitem open="0" type="813" id="JE56BjCBvGD0">
       <listitem open="0" type="815" id="SwmUDttDOFEC"/>
      </listitem>
      <listitem open="0" type="813" id="teXn03JaxnK1">
       <listitem open="0" type="815" id="7mdXHw3dLPm8"/>
      </listitem>
      <listitem open="0" type="813" id="L0gUFJgmPZz6">
       <listitem open="0" type="815" id="oYBSJ2akGXw0"/>
      </listitem>
      <listitem open="0" type="813" id="TEE6pV71Nzcg">
       <listitem open="0" type="815" id="WTr8p8MFYq9y"/>
      </listitem>
      <listitem open="0" type="813" id="oz4zETSDLkmD">
       <listitem open="0" type="815" id="mveUJNLU3Eg9"/>
      </listitem>
      <listitem open="0" type="813" id="r3EE7yy6oTDw">
       <listitem open="0" type="815" id="A4F0jJdHzamp"/>
      </listitem>
      <listitem open="0" type="813" id="6VEK9WQJLlqg">
       <listitem open="0" type="815" id="EMh6JpSWS99P"/>
      </listitem>
      <listitem open="0" type="813" id="22XzP2PwcSok">
       <listitem open="0" type="815" id="JKFrwQaveTVi"/>
      </listitem>
      <listitem open="0" type="813" id="pr1HfaBOEzMF">
       <listitem open="0" type="815" id="sYmQNbpR5PEd"/>
      </listitem>
      <listitem open="0" type="813" id="cvgIfrUidRa1">
       <listitem open="0" type="815" id="iZhGZYIV3Moc"/>
      </listitem>
     </listitem>
     <listitem open="1" type="813" id="sNb5Zl9DLiYP"/>
     <listitem open="0" type="813" id="7JL0dW5tx0Sk">
      <listitem open="0" type="815" id="01yukEYUKUls"/>
      <listitem open="0" type="815" id="Di7CP2pfA9Q0"/>
      <listitem open="0" type="815" id="f45zWrpS27pk"/>
      <listitem open="0" type="815" id="k7vJYUQRTYLj"/>
      <listitem open="0" type="815" id="wcrFqSJcnPoX"/>
      <listitem open="0" type="814" id="wmRoeDkqoUW1"/>
      <listitem open="0" type="814" id="1eaAMjIN8G0I"/>
      <listitem open="0" type="814" id="ycNlIKV1G7Wc"/>
      <listitem open="0" type="815" id="moiJ0GzWeKJA"/>
      <listitem open="0" type="815" id="mN8CmLbdfOqV"/>
      <listitem open="0" type="814" id="n5AXtFY1oYNT"/>
      <listitem open="0" type="814" id="8a2OfYy61UIk"/>
      <listitem open="0" type="814" id="rGXuNCK9xvx9"/>
      <listitem open="0" type="814" id="cQHOtnNw9hBA"/>
      <listitem open="0" type="815" id="tLnFqDi3j2yB"/>
      <listitem open="0" type="814" id="w46tz30unRiR"/>
      <listitem open="0" type="814" id="J5RkQIYSPgcn"/>
      <listitem open="0" type="814" id="3NMG1NEqcmkz"/>
      <listitem open="0" type="814" id="RVXBjpniTLrn"/>
      <listitem open="0" type="814" id="49ACO8SMkq70"/>
      <listitem open="0" type="814" id="jweXLMyxkGJd"/>
      <listitem open="0" type="814" id="3P0fBkc5miyk"/>
     </listitem>
     <listitem open="0" type="807" id="UmlmjnoenIsJ" label="class diagram for game engine"/>
     <listitem open="0" type="803" id="KZvADSEhvEzZ">
      <listitem open="0" type="813" id="b7GCDECjDOPq">
       <listitem open="0" type="815" id="PyIJZZZsFL0p"/>
       <listitem open="0" type="815" id="4n8R1pKm66nh"/>
       <listitem open="0" type="815" id="fpm5nGlucVIF"/>
       <listitem open="0" type="815" id="WfZuA5VMQ0Wh"/>
       <listitem open="0" type="815" id="wMSfqKjY2Jlb"/>
       <listitem open="0" type="815" id="eUb9EYvJ5esm"/>
       <listitem open="0" type="815" id="6wcoziJUjTXI"/>
       <listitem open="0" type="815" id="9SiFXTwM4qXP"/>
       <listitem open="0" type="815" id="Bqk5T22ZMNpa"/>
       <listitem open="0" type="815" id="H5OBMEqUUsCZ"/>
       <listitem open="0" type="815" id="LeJGX5gtlQHG"/>
       <listitem open="0" type="815" id="dLoPfKhysUem"/>
       <listitem open="0" type="815" id="7mYwtlbLipmv"/>
       <listitem open="0" type="815" id="1SPe4V6PBuSh"/>
       <listitem open="0" type="815" id="zDoymtTQZolg"/>
       <listitem open="0" type="815" id="TZWDII5J2BNb"/>
       <listitem open="0" type="815" id="vT98BI0D5p5L"/>
       <listitem open="0" type="815" id="FwGtiOWOBQh2"/>
       <listitem open="0" type="815" id="AG561oJ5eoAd"/>
       <listitem open="0" type="815" id="pEF1dx3PSn9r"/>
       <listitem open="0" type="815" id="6QoqrL6QOVWb"/>
       <listitem open="0" type="815" id="u7lFwllIULHZ"/>
       <listitem open="0" type="815" id="fBhTpqHkksYO"/>
       <listitem open="0" type="815" id="cO5nrneg0tfd"/>
       <listitem open="0" type="815" id="5Wkbj8vlmxWJ"/>
      </listitem>
      <listitem open="0" type="813" id="5N0JyKgb7Qfu">
       <listitem open="0" type="815" id="6nIMnCRgZz9R"/>
      </listitem>
      <listitem open="0" type="813" id="t7gnYCOEGUBl">
       <listitem open="0" type="815" id="HOn3cpdIqITW"/>
       <listitem open="0" type="815" id="SisRnUw5Ugbx"/>
       <listitem open="0" type="815" id="x5dBSns7NI96"/>
       <listitem open="0" type="815" id="Ux76vT6DEmT7"/>
       <listitem open="0" type="815" id="4jgFW7MjiM6R"/>
       <listitem open="0" type="815" id="1qzcy2gDPS78"/>
      </listitem>
     </listitem>
     <listitem open="0" type="813" id="jq6bNgO9KwST">
      <listitem open="0" type="815" id="QlaUFtrZlG2L"/>
      <listitem open="0" type="815" id="anib2uUrJPNm"/>
      <listitem open="0" type="815" id="dOgM6UhfGNGI"/>
      <listitem open="0" type="815" id="iAIsraE5g5G9"/>
      <listitem open="0" type="815" id="rEIBes1M3HEs"/>
      <listitem open="0" type="815" id="zs9rCYmWxOmy"/>
      <listitem open="0" type="815" id="ualGTJaSAhKM"/>
      <listitem open="0" type="815" id="ngVNXNBoPuH9"/>
      <listitem open="0" type="815" id="uo1e42xhveMB"/>
      <listitem open="0" type="815" id="hw6ux6KpsKRx"/>
      <listitem open="0" type="815" id="LhWb3lsHT0ob"/>
      <listitem open="0" type="815" id="iWrTNrKiXpIa"/>
     </listitem>
     <listitem open="0" type="813" id="CMnlbH5eaToH">
      <listitem open="0" type="815" id="kX6nHEew47nv"/>
      <listitem open="0" type="815" id="Bc5QDDuKCPcE"/>
      <listitem open="0" type="815" id="nk8FLZS0s3E5"/>
      <listitem open="0" type="815" id="j24wR0VClbS4"/>
      <listitem open="0" type="815" id="AqlDxY8d75Ih"/>
      <listitem open="0" type="815" id="WFQge3shaJms"/>
      <listitem open="0" type="815" id="P3TLMqRq5sUi"/>
      <listitem open="0" type="815" id="wxQ0nuggG36u"/>
      <listitem open="0" type="815" id="W7dmF9MA5kAq"/>
     </listitem>
     <listitem open="0" type="813" id="p3KdZT6Quj5Z">
      <listitem open="0" type="815" id="Gekf9zujrNbR"/>
      <listitem open="0" type="815" id="cAcOqTC67wjE"/>
      <listitem open="0" type="815" id="zxRfwyLUi3fS"/>
      <listitem open="0" type="815" id="j1Mpv43pi1Zf"/>
      <listitem open="0" type="815" id="ojEWkuwMM0YU"/>
     </listitem>
     <listitem open="0" type="813" id="SIxSCHut1yE4">
      <listitem open="0" type="815" id="nfG9X8A7bHVK"/>
      <listitem open="0" type="815" id="MNZbGx8BXFAT"/>
     </listitem>
     <listitem open="0" type="813" id="r5GhteShLgB3">
      <listitem open="0" type="815" id="OzhVpFFSploL"/>
      <listitem open="0" type="815" id="hk4N4TufDWO4"/>
      <listitem open="0" type="815" id="xtCse6wvMY7k"/>
      <listitem open="0" type="815" id="2gn20Ns21ykM"/>
      <listitem open="0" type="815" id="3M34BWOaw83b"/>
      <listitem open="0" type="815" id="ZtbJWA3UaqRx"/>
      <listitem open="0" type="815" id="nQ58MZwO7F1Q"/>
      <listitem open="0" type="815" id="uO7xsj4GgjjW"/>
     </listitem>
     <listitem open="0" type="830" id="Datatypes">
      <listitem open="0" type="829" id="I4V2yvLUjgbV"/>
      <listitem open="1" type="829" id="7qNNDsvzVr6m"/>
      <listitem open="1" type="829" id="ZCaMVQeibnbk"/>
      <listitem open="1" type="829" id="69NwCU3eGoQx"/>
      <listitem open="1" type="829" id="ARKixNq4EDQP"/>
      <listitem open="1" type="829" id="9wWOiwJF9rZc"/>
      <listitem open="1" type="829" id="HtT6taKxhhtt"/>
      <listitem open="1" type="829" id="DDBvBTHjr27F"/>
      <listitem open="1" type="829" id="uf5QGUH2nhjz"/>
      <listitem open="1" type="829" id="beZJJSARMgp2"/>
      <listitem open="1" type="829" id="MrW5KNn3d1gF"/>
      <listitem open="1" type="829" id="3JMWAQJnfwGH"/>
      <listitem open="1" type="829" id="CFr6jeMBJfYX"/>
      <listitem open="1" type="829" id="4JeWXpQsAHVk"/>
      <listitem open="1" type="829" id="UF7jeoizRBjD"/>
      <listitem open="1" type="829" id="GeGG5XBU47Bb"/>
      <listitem open="1" type="829" id="KtnD5mmeXzoW"/>
      <listitem open="1" type="829" id="7V99iHcqgvWd"/>
      <listitem open="1" type="829" id="FDIq1uaGl3Kc"/>
      <listitem open="1" type="829" id="GqxIRxJtYY5A"/>
      <listitem open="1" type="829" id="dEfVeDFs4CAT"/>
      <listitem open="0" type="829" id="yfaaXCaCDHE9"/>
      <listitem open="1" type="829" id="b6HiwqIB2a21"/>
      <listitem open="1" type="829" id="mfy8JlAssPam"/>
      <listitem open="1" type="829" id="SaHBebnDGMUX"/>
     </listitem>
     <listitem open="0" type="813" id="GYZSMxwjtXLe">
      <listitem open="0" type="815" id="A7yLNAnNrXtP"/>
      <listitem open="0" type="815" id="i20sI9bSGZld"/>
      <listitem open="0" type="815" id="gnVwMEZ6nafs"/>
      <listitem open="0" type="815" id="av6rhkmEu2Wc"/>
      <listitem open="0" type="815" id="rQegfJwT25ck"/>
      <listitem open="0" type="815" id="MkhTdMHDpGgI"/>
     </listitem>
     <listitem open="0" type="813" id="3Qfk5hbxOfv7">
      <listitem open="0" type="815" id="fpp41JTErMKv"/>
      <listitem open="0" type="814" id="ASR2rj8SHnAs"/>
      <listitem open="0" type="814" id="OHHwR4rdjUtk"/>
      <listitem open="0" type="815" id="afkawNHpyGnf"/>
      <listitem open="0" type="815" id="ivGILDQ00G50"/>
      <listitem open="0" type="815" id="wBkcIroSuGso"/>
      <listitem open="0" type="815" id="Zf9Vvx9lh97E"/>
      <listitem open="0" type="815" id="furi9wAERdUa"/>
     </listitem>
     <listitem open="0" type="803" id="k46CIpywsAPT">
      <listitem open="0" type="813" id="apPZqzH0Xf26">
       <listitem open="0" type="815" id="hcFQbIU84P0o"/>
      </listitem>
      <listitem open="0" type="813" id="l3k1G1B68R7o">
       <listitem open="0" type="815" id="klUBajI9wG7B"/>
       <listitem open="0" type="815" id="tj4ylIaI59sr"/>
       <listitem open="0" type="815" id="TDqNtnQZa2IS"/>
       <listitem open="0" type="815" id="iwx9Czo62eAX"/>
      </listitem>
      <listitem open="0" type="813" id="8Df6Qeh8ZEH7">
       <listitem open="0" type="815" id="zs4WLVctYQQ6"/>
      </listitem>
      <listitem open="0" type="813" id="XWJw4Mll0gKA">
       <listitem open="0" type="815" id="0UhSETYg3NN4"/>
       <listitem open="0" type="815" id="rB7AbDeASlm8"/>
       <listitem open="0" type="815" id="DgDyfesyVaSF"/>
       <listitem open="0" type="815" id="KWeLt1OAIclq"/>
       <listitem open="0" type="815" id="RlRWZwxydbmD"/>
       <listitem open="0" type="815" id="rbj5B66d7SdB"/>
       <listitem open="0" type="815" id="727PeeJznVIL"/>
       <listitem open="0" type="815" id="LriUm8CyiQz9"/>
      </listitem>
      <listitem open="0" type="813" id="gt4jHwPlAHxd">
       <listitem open="0" type="815" id="WTzLE9eveYRV"/>
       <listitem open="0" type="815" id="q8I1iZTdpdbQ"/>
       <listitem open="0" type="815" id="MrGgtog90lep"/>
       <listitem open="0" type="815" id="jdYIokqhEr6o"/>
      </listitem>
      <listitem open="0" type="813" id="YZ3wYIMM5YlJ">
       <listitem open="0" type="815" id="cJ4zbWMdOoyp"/>
      </listitem>
      <listitem open="0" type="813" id="Lyoghm6tTKr8">
       <listitem open="0" type="815" id="an6jhTtlMhuf"/>
      </listitem>
      <listitem open="0" type="813" id="2GEyarhFRJ9l">
       <listitem open="0" type="815" id="EQL4iCzYZn9E"/>
      </listitem>
      <listitem open="0" type="813" id="bCmkgTjndajQ">
       <listitem open="0" type="815" id="KAWVWtTNkZGA"/>
      </listitem>
     </listitem>
     <listitem open="0" type="813" id="gQMJKbaS6hbm"/>
     <listitem open="0" type="803" id="RfKPFLxZush5">
      <listitem open="0" type="813" id="bST0EQCvkQNJ"/>
      <listitem open="0" type="813" id="vSAjcCwFIs3P"/>
      <listitem open="0" type="813" id="XN3EdwfMyhIN"/>
      <listitem open="0" type="813" id="oMVrsBN8jzmX"/>
      <listitem open="0" type="813" id="EOCK3bMudFtV">
       <listitem open="0" type="815" id="GAHQEKX0hKVy"/>
       <listitem open="0" type="815" id="jBC39uiRgj0M"/>
      </listitem>
      <listitem open="0" type="813" id="IMhWZ7tbOG7Z"/>
      <listitem open="0" type="813" id="I7eCef2MpAsX">
       <listitem open="0" type="815" id="vzOokZibYRpF"/>
      </listitem>
      <listitem open="0" type="813" id="tN8pcpdTJl8F"/>
      <listitem open="0" type="813" id="UknKnCBKoT6P">
       <listitem open="0" type="815" id="VEJuB7AIGcD3"/>
       <listitem open="0" type="815" id="H0iSTRfB3vL6"/>
       <listitem open="0" type="815" id="eIP0lhfYRkQj"/>
       <listitem open="0" type="815" id="SxrFvH3GyuUy"/>
       <listitem open="0" type="815" id="zg5jOV8G0BrD"/>
       <listitem open="0" type="815" id="hg7wWmT3boGp"/>
      </listitem>
      <listitem open="0" type="813" id="t8CEwjJrfuKP"/>
      <listitem open="0" type="813" id="jPXsYofTNubG"/>
      <listitem open="0" type="813" id="7KJDccPI8GlT"/>
      <listitem open="0" type="813" id="u7ChmewgEM9z"/>
      <listitem open="0" type="813" id="eeGBEmHIlppY"/>
     </listitem>
     <listitem open="0" type="813" id="R03svvsthTIg">
      <listitem open="0" type="815" id="YabnNuWPodGE"/>
      <listitem open="0" type="815" id="KnjGIqTkKNUc"/>
      <listitem open="0" type="814" id="dURi35Vn1l4y"/>
      <listitem open="0" type="814" id="kwGJwV1uLPp1"/>
      <listitem open="0" type="815" id="25iW9BQfa4Pe"/>
      <listitem open="0" type="815" id="WQej4eFX7UKv"/>
      <listitem open="0" type="814" id="clFp2Twp7ben"/>
      <listitem open="0" type="814" id="vhL5z2EIDAUT"/>
      <listitem open="0" type="815" id="yHqXQ0CsPyaa"/>
      <listitem open="0" type="815" id="RJxlkzuk2aEC"/>
      <listitem open="0" type="814" id="aMBFwUXaxrd9"/>
      <listitem open="0" type="815" id="ZpCgYZuzqpiY"/>
      <listitem open="0" type="814" id="acx2CwDdfaLK"/>
      <listitem open="0" type="815" id="SPmkDmD8Zzir"/>
      <listitem open="0" type="815" id="xnocKu9qVlds"/>
      <listitem open="0" type="815" id="Hmk7qmOgyX9F"/>
      <listitem open="0" type="814" id="Kheq8qwkbBYd"/>
      <listitem open="0" type="814" id="H5scVfcnKGeS"/>
      <listitem open="0" type="814" id="4RJHbll9NgBX"/>
      <listitem open="0" type="814" id="4YBghjHIDi0F"/>
      <listitem open="0" type="815" id="1BDsGMnnCyTi"/>
      <listitem open="0" type="814" id="0V4sLmxddiqj"/>
      <listitem open="0" type="815" id="IFJGdPe1hsmx"/>
      <listitem open="0" type="815" id="odMVU9R9FKMO"/>
      <listitem open="0" type="815" id="qC9TIxMeJo87"/>
      <listitem open="0" type="815" id="W7SlRm8se6ot"/>
      <listitem open="0" type="814" id="fTL3COi743D3"/>
      <listitem open="0" type="815" id="UTEnqiNBxSer"/>
     </listitem>
     <listitem open="0" type="813" id="fiyoWBeVKsNb">
      <listitem open="0" type="815" id="OfNzWkXM7hrV"/>
      <listitem open="0" type="815" id="QMBAxAAJpYGL"/>
      <listitem open="0" type="815" id="EZsMIneNbtMa"/>
     </listitem>
     <listitem open="0" type="813" id="YfJQ4mNWIUmA">
      <listitem open="0" type="815" id="8fiBL21N159k"/>
      <listitem open="0" type="814" id="3472GFHX41xS"/>
      <listitem open="0" type="815" id="ipEOKpSU4wLE"/>
      <listitem open="0" type="814" id="PzWu5B4s6Zrk"/>
      <listitem open="0" type="814" id="JrlROq1aXO4U"/>
      <listitem open="0" type="814" id="ry2PM4rj4Nd7"/>
      <listitem open="0" type="815" id="zCmgE86KnpV6"/>
      <listitem open="0" type="815" id="njxsrZfNwvpQ"/>
     </listitem>
     <listitem open="0" type="813" id="u3BVMyBlyFdr"/>
     <listitem open="0" type="818" id="9EKEVIeMoVK1">
      <listitem open="0" type="813" id="u3BVMyBlyFdr"/>
     </listitem>
     <listitem open="0" type="813" id="pzMRw8LFY9X3">
      <listitem open="0" type="815" id="5lEcOMVSgWmR"/>
      <listitem open="0" type="815" id="po7eouKITszz"/>
      <listitem open="0" type="815" id="Lz5zTpQUZNya"/>
      <listitem open="0" type="815" id="zoRrvMR9EqPU"/>
      <listitem open="0" type="815" id="05aTxaRptDic"/>
      <listitem open="0" type="815" id="UZYjY2MrzPoT"/>
      <listitem open="0" type="815" id="qfOaIwPur9vc"/>
      <listitem open="0" type="815" id="oO2hcjHQmk04"/>
      <listitem open="0" type="815" id="I0r2kp7ckfaq"/>
     </listitem>
     <listitem open="1" type="803" id="ZmECzDTNtUoI">
      <listitem open="0" type="813" id="5oKPksW0D2Be">
       <listitem open="0" type="815" id="Eh4Zc8juixJA"/>
       <listitem open="0" type="815" id="qUAfxSHV2S2K"/>
       <listitem open="0" type="815" id="myPET0tYcELS"/>
       <listitem open="0" type="815" id="7YMmCa3gkGES"/>
       <listitem open="0" type="815" id="RAeB0R3rxDv5"/>
       <listitem open="0" type="815" id="Ax95giUOANho"/>
       <listitem open="0" type="815" id="JGvdIEahPqQC"/>
       <listitem open="0" type="815" id="o3m3d0qMWLBO"/>
       <listitem open="0" type="815" id="0CqxQl2hbPfX"/>
       <listitem open="0" type="815" id="5cLpsZFUKOiS"/>
       <listitem open="0" type="815" id="ZWabzQFJKQA4"/>
       <listitem open="0" type="815" id="MAdgYnj6nJnR"/>
       <listitem open="0" type="815" id="ZaqMtbnMpTKc"/>
       <listitem open="0" type="815" id="9G9Hbq6DGHaM"/>
       <listitem open="0" type="815" id="tXA685wJh6Tv"/>
       <listitem open="0" type="815" id="kSvKeElPngSj"/>
       <listitem open="0" type="815" id="ACscfaiHyfcK"/>
       <listitem open="0" type="815" id="HmI2A3kIDdvs"/>
      </listitem>
      <listitem open="0" type="813" id="IU3oARv7rFNX"/>
      <listitem open="0" type="813" id="E3vJXcR6dvrR">
       <listitem open="0" type="815" id="3vkZZH2eG7Em"/>
       <listitem open="0" type="815" id="ETubkeyVCOZE"/>
       <listitem open="0" type="815" id="U4CPK0U7rAPq"/>
       <listitem open="0" type="815" id="prfJ1glPVaMc"/>
       <listitem open="0" type="815" id="GxfYkwsPxl03"/>
       <listitem open="0" type="815" id="UGF5qufIwpiG"/>
       <listitem open="0" type="815" id="3nQkXtVlo8JZ"/>
       <listitem open="0" type="815" id="N93rMV0QHO8o"/>
       <listitem open="0" type="815" id="94fbZja43IIl"/>
       <listitem open="0" type="815" id="kpKkeHkMsyVa"/>
       <listitem open="0" type="815" id="8LgphO2PDNAp"/>
       <listitem open="0" type="815" id="GTfBk4Ubu2Vj"/>
       <listitem open="0" type="815" id="23V77leFT9Hj"/>
       <listitem open="0" type="815" id="wd8Va2Lc6ojB"/>
       <listitem open="0" type="815" id="Q4wbP6R1waVn"/>
       <listitem open="0" type="815" id="gE2aG37h73GW"/>
       <listitem open="0" type="815" id="PcpTQXcys0zL"/>
       <listitem open="0" type="815" id="hlDL7VaU7OvW"/>
       <listitem open="0" type="815" id="IrF40wAu9Ld4"/>
       <listitem open="0" type="815" id="YsvfDWj8Rxu6"/>
       <listitem open="0" type="815" id="ePxaFdp4nBj6"/>
       <listitem open="0" type="815" id="3rjVpeZYTX6z"/>
       <listitem open="0" type="815" id="cdmrzsdFTAJB"/>
       <listitem open="0" type="815" id="kRmjXP572ry1"/>
       <listitem open="0" type="815" id="Qqpw9e8P7las"/>
       <listitem open="0" type="815" id="koMR1smcy5eI"/>
       <listitem open="0" type="815" id="gqQB7XTrJpJK"/>
       <listitem open="0" type="815" id="s0exOZTH5w2a"/>
       <listitem open="0" type="815" id="OJVUdxfTvJRJ"/>
      </listitem>
      <listitem open="0" type="813" id="J9lQsMIXvSA1">
       <listitem open="0" type="815" id="Uh7N25KOEnFs"/>
       <listitem open="0" type="815" id="sUlBdu5l6BSK"/>
       <listitem open="0" type="815" id="Z1UnojdWpzrc"/>
       <listitem open="0" type="814" id="oTKNvzL2Lzwt"/>
       <listitem open="0" type="814" id="ZqLMNthgaDH0"/>
       <listitem open="0" type="814" id="fbYN6a8t2QGv"/>
       <listitem open="0" type="815" id="2uxi5pZMNyB5"/>
       <listitem open="0" type="815" id="HYPrkYKFT01K"/>
       <listitem open="0" type="815" id="sWAuFd4lgdqo"/>
       <listitem open="0" type="815" id="yYLLra0rSxZX"/>
       <listitem open="0" type="815" id="VxhotOVjudd9"/>
       <listitem open="0" type="815" id="qirhyzewXzGM"/>
       <listitem open="0" type="815" id="FxnL9DfYpzNS"/>
       <listitem open="0" type="815" id="den21d2GbpZi"/>
       <listitem open="0" type="814" id="M2VHRlSJHdxT"/>
       <listitem open="0" type="814" id="IjYdP41eiHun"/>
       <listitem open="0" type="814" id="m4Gr9RS7B9qq"/>
       <listitem open="0" type="815" id="qBq3liQzOCDb"/>
       <listitem open="0" type="815" id="dH6oW9yOHOrD"/>
       <listitem open="0" type="814" id="PZxiXrb7oujF"/>
       <listitem open="0" type="814" id="s0Rmti4Ac5ic"/>
       <listitem open="0" type="814" id="cI6a4JRYbRfx"/>
       <listitem open="0" type="814" id="WJ28MijjkC0B"/>
       <listitem open="0" type="815" id="Y3Y79N8lcEZ8"/>
       <listitem open="0" type="815" id="s8QTvxByARoM"/>
       <listitem open="0" type="814" id="VZyPd0MV0oFr"/>
       <listitem open="0" type="815" id="OBVtfwsTch8b"/>
       <listitem open="0" type="814" id="vQUC1QeWxcva"/>
      </listitem>
      <listitem open="0" type="813" id="hTXfwIQefHK6">
       <listitem open="0" type="815" id="afOTxBfDWgQ9"/>
       <listitem open="0" type="815" id="YxhNtMtOFx6Q"/>
       <listitem open="0" type="815" id="UDUYDEJV82oM"/>
       <listitem open="0" type="815" id="c5Dp2KF644YT"/>
       <listitem open="0" type="814" id="kYOJVLbPi2Zq"/>
       <listitem open="0" type="815" id="VGpzjYGaEJ3x"/>
       <listitem open="0" type="815" id="BtboWKbMLvKN"/>
       <listitem open="0" type="815" id="9TrFEFPwXWbV"/>
       <listitem open="0" type="815" id="pv5n4xN11ghp"/>
       <listitem open="0" type="815" id="JCvySfrtpesV"/>
       <listitem open="0" type="814" id="1asGzg0h487T"/>
       <listitem open="0" type="815" id="MhFkkNt191iS"/>
       <listitem open="0" type="814" id="nNnflYfvYwwK"/>
       <listitem open="0" type="815" id="9Wk5bRJP6svk"/>
       <listitem open="0" type="815" id="CqjzScUTy435"/>
       <listitem open="0" type="814" id="obpXoi2WHPpk"/>
       <listitem open="0" type="815" id="hurOjLllJIst"/>
       <listitem open="0" type="815" id="tir6YlMjlooB"/>
       <listitem open="0" type="815" id="70bPITIsC9Ja"/>
       <listitem open="0" type="815" id="JP5VYN3XVTlJ"/>
       <listitem open="0" type="815" id="z5UKQVecM7fo"/>
       <listitem open="0" type="815" id="NsC7hrbaFstG"/>
       <listitem open="0" type="815" id="8B1UHfHukqhU"/>
       <listitem open="0" type="815" id="wspfeeq3hrVP"/>
       <listitem open="0" type="814" id="omovEyW2aLZM"/>
       <listitem open="0" type="814" id="kO9QPjG5agof"/>
       <listitem open="0" type="814" id="gtPk5A097SCa"/>
       <listitem open="0" type="815" id="Wt6iC9gRPgXf"/>
       <listitem open="0" type="815" id="5DqPPPKdf8dZ"/>
       <listitem open="0" type="815" id="Yk2giLB1yLzk"/>
       <listitem open="0" type="815" id="69cQ4un1Vyt2"/>
       <listitem open="0" type="814" id="UStBBsFE1VuM"/>
       <listitem open="0" type="815" id="mtVXkgoF9V3Q"/>
       <listitem open="0" type="815" id="TBpzgOU9YmUM"/>
      </listitem>
      <listitem open="0" type="813" id="fQNZeFNnd8xK">
       <listitem open="0" type="815" id="e5v7gofmlEWX"/>
       <listitem open="0" type="815" id="ZcImdZWE9kLk"/>
       <listitem open="0" type="815" id="rmbLxBygp8xS"/>
       <listitem open="0" type="815" id="WkohxnzNAM4m"/>
       <listitem open="0" type="815" id="Xlsf3CgXxUEu"/>
       <listitem open="0" type="815" id="C6k2CfStNF8o"/>
       <listitem open="0" type="815" id="exH94op8PuS1"/>
       <listitem open="0" type="815" id="PNNhb7JF5aN9"/>
       <listitem open="0" type="815" id="Q5qvxsVTdN6e"/>
       <listitem open="0" type="815" id="3weCKbDI1gQa"/>
       <listitem open="0" type="815" id="cw7bcWBqW6lq"/>
       <listitem open="0" type="815" id="9aiiigHC5bnU"/>
       <listitem open="0" type="815" id="rKYaMhb71jkY"/>
       <listitem open="0" type="815" id="t22Y8V8XbwSW"/>
       <listitem open="0" type="815" id="Zbc8AWA3WDad"/>
       <listitem open="0" type="815" id="fPTg6DD7BQz3"/>
      </listitem>
     </listitem>
     <listitem open="0" type="813" id="Usx1sPdWUnvV">
      <listitem open="0" type="815" id="X7dwuD4sdLRP"/>
      <listitem open="0" type="814" id="OML9gnqAb6Kr"/>
      <listitem open="0" type="814" id="AutyyL76Gj6I"/>
      <listitem open="0" type="814" id="ddR8EjFc5blm"/>
      <listitem open="0" type="814" id="MZuxeEoo6gn3"/>
      <listitem open="0" type="814" id="hwtQ3hAjZqty"/>
      <listitem open="0" type="815" id="gjVq1eb1vUZd"/>
      <listitem open="0" type="815" id="Z8Trf3ClCYpp"/>
      <listitem open="0" type="814" id="4VsU3VYZAeSn"/>
      <listitem open="0" type="814" id="q1hGufFMYvuE"/>
      <listitem open="0" type="815" id="Nt1dCMKtf61j"/>
      <listitem open="0" type="815" id="2TOjdGDy9CaL"/>
      <listitem open="0" type="814" id="jV5CmKy6iba1"/>
      <listitem open="0" type="815" id="kP8rbgDAYOKW"/>
      <listitem open="0" type="815" id="U4b3WmDHBJ8l"/>
      <listitem open="0" type="814" id="8rgsg2KV1zlv"/>
      <listitem open="0" type="814" id="8e49bn4EmMSh"/>
      <listitem open="0" type="814" id="mkXTL5STu8JZ"/>
      <listitem open="0" type="814" id="7vc22vZAXbK7"/>
      <listitem open="0" type="814" id="VpIAI6Z2q4T9"/>
      <listitem open="0" type="814" id="FhdOJ5BuAusp"/>
      <listitem open="0" type="815" id="1tVPeFAhqB4E"/>
      <listitem open="0" type="814" id="fsgCQqoEX97r"/>
      <listitem open="0" type="814" id="x1WD8Haj3eix"/>
      <listitem open="0" type="814" id="f1HDuBPdhSnR"/>
      <listitem open="0" type="814" id="OUwAjXX3k9qk"/>
      <listitem open="0" type="815" id="j4KtSNv3TpHu"/>
      <listitem open="0" type="815" id="KByrnD1WILNi"/>
      <listitem open="0" type="814" id="Wh6vf0cxQdkM"/>
      <listitem open="0" type="815" id="EO8j729RraQk"/>
      <listitem open="0" type="815" id="q6ak1U7nOnkn"/>
      <listitem open="0" type="814" id="1K0Me6cGTovH"/>
      <listitem open="0" type="814" id="4qBmg1uIGEK9"/>
      <listitem open="0" type="814" id="AvUZsjEGBAPs"/>
      <listitem open="0" type="815" id="6pDUtwaQuxwM"/>
      <listitem open="0" type="815" id="0y1APrMJP4k6"/>
      <listitem open="0" type="814" id="MQeUIXJhkrLS"/>
      <listitem open="0" type="814" id="PDXgj1fFQv01"/>
      <listitem open="0" type="814" id="UvgXfpdtVGFm"/>
      <listitem open="0" type="814" id="phLtM3qcPzFh"/>
     </listitem>
     <listitem open="0" type="813" id="L1DL636nznLv"/>
     <listitem open="0" type="810" id="FG9Rs3FaDLBh" label="sequence diagram for incoming ObjectType events"/>
     <listitem open="0" type="818" id="eVwTSn3rX5Vj"/>
     <listitem open="0" type="813" id="6NEBRctI6MWW">
      <listitem open="0" type="815" id="O8PvO1NhInKn"/>
      <listitem open="0" type="815" id="4mApVHafGmEw"/>
      <listitem open="0" type="814" id="LKtdcqW63dng"/>
      <listitem open="0" type="814" id="PTfqfM2NhgvY"/>
      <listitem open="0" type="815" id="zgFTAarLWuQd"/>
      <listitem open="0" type="815" id="IHSfWsOUYevj"/>
      <listitem open="0" type="815" id="WvWrkPLN37IH"/>
      <listitem open="0" type="815" id="BUqwvXAbm2Vm"/>
      <listitem open="0" type="815" id="UIpAD84ovrBV"/>
      <listitem open="0" type="814" id="E8s6P791HJxv"/>
      <listitem open="0" type="814" id="a46XmxvVQA4t"/>
      <listitem open="0" type="815" id="e0cm9qkKJaFE"/>
      <listitem open="0" type="814" id="MeVkmXdUpWir"/>
      <listitem open="0" type="815" id="gFtw15qppy0v"/>
      <listitem open="0" type="814" id="iKuF2kQ3rIF3"/>
      <listitem open="0" type="814" id="eCAvdCICFPj1"/>
      <listitem open="0" type="815" id="dfmwE19JPvBm"/>
      <listitem open="0" type="815" id="By359lTfezUM"/>
     </listitem>
     <listitem open="0" type="808" id="yN8Hkgy8A8zq" label="state diagram for game engine"/>
     <listitem open="0" type="813" id="AgBVKF36taGy">
      <listitem open="0" type="815" id="nhdkz9OZp53I"/>
      <listitem open="0" type="815" id="YIsG18AaQ1Lr"/>
      <listitem open="0" type="815" id="4ElGmOYTNSda"/>
      <listitem open="0" type="815" id="K13i2MZimwpS"/>
      <listitem open="0" type="815" id="j1uBDncVmdEo"/>
      <listitem open="0" type="815" id="nKhaOkq9Gdp2"/>
     </listitem>
     <listitem open="0" type="813" id="t89lSLYdgGci">
      <listitem open="0" type="815" id="btGKh0JRuMD7"/>
      <listitem open="0" type="815" id="pQddUzqykokz"/>
     </listitem>
     <listitem open="0" type="818" id="HFyOB2e0mLUE">
      <listitem open="0" type="813" id="3KreRFKCBWSS"/>
     </listitem>
    </listitem>
    <listitem open="1" type="802" id="Use Case View"/>
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="Python">
    <sourcecode value="self.event_engine=event_engine.EventEngine()&#xa;self.language_engine=language_engine.LanguageEngine()&#xa;self.symbols=language_engine.SymbolTable()&#xa;self.resources=:&#xa;&#xa;  'sprites'::&#xa;&#xa;  ,'sounds'::&#xa;&#xa;  ,'backgrounds'::&#xa;&#xa;  ,'objects'::&#xa;&#xa;  ,'rooms':[]&#xa;&#xa;self.game_settings=dict(self.DEFAULT_GAME_SETTINGS)&#xa;self.screen=None&#xa;self.draw_surface=None&#xa;self.done=False&#xa;self.mouse_pos=[0,0]&#xa;self.current_events=[]&#xa;self.new_object_queue=[]&#xa;self.room_index=0&#xa;self.clock=None&#xa;self.load_game_settings()&#xa;if'logging_config'in self.game_settings.keys():&#xa;  logging.config.dictConfig(self.game_settings['logging_config'])&#xa;&#xa;else:&#xa;  logging.setLevel(logging.WARNING)&#xa;&#xa;super(GameEngine,self).__init__(type(self).__name__)&#xa;self.info(&quot;Loading game resources..&quot;)&#xa;self.global_style_settings=None&#xa;if&quot;stylesheet&quot;in self.game_settings and len(self.game_settings[&quot;stylesheet&quot;])>0:&#xa;  with open(self.game_settings[&quot;stylesheet&quot;],&quot;r&quot;)as style_f:&#xa;    self.global_style_settings=css_to_style.CSSStyleGenerator.get_css_style(style_f.read())&#xa;&#xa;&#xa;with logging_object.Indented(self):&#xa;  self.load_game_resources()&#xa;&#xa;if len(self.resources['rooms'])==0:&#xa;  raise(GameEngineException(&quot;No game room resource found&quot;))&#xa;&#xa;" id="YabnNuWPodGE"/>
    <sourcecode value="if os.path.exists(self.GAME_SETTINGS_FILE):&#xa;  with open(self.GAME_SETTINGS_FILE,&quot;r&quot;)as yaml_f:&#xa;    yaml_info=yaml.load(yaml_f)&#xa;    if yaml_info:&#xa;      for yaml_key in yaml_info.keys():&#xa;        if yaml_key in self.game_settings:&#xa;          self.game_settings[yaml_key]=yaml_info[yaml_key]&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" id="xnocKu9qVlds"/>
    <sourcecode value="topdir=os.getcwd()&#xa;for res_path,res_type in self.RESOURCE_TABLE:&#xa;  self.info(&quot;Loading {}..&quot;.format(res_path))&#xa;  if not os.path.exists(res_path):&#xa;    continue&#xa;&#xa;  res_files=os.listdir(res_path)&#xa;  res_yaml_files=[]&#xa;  for rf in res_files:&#xa;    if rf.endswith('.yaml')or rf.endswith('.yml'):&#xa;      res_yaml_files.append(rf)&#xa;&#xa;&#xa;  os.chdir(res_path)&#xa;  with logging_object.Indented(self):&#xa;    for res_file in res_yaml_files:&#xa;      self.info(&quot;Import {}&quot;.format(res_file))&#xa;      with open(res_file,&quot;r&quot;)as yaml_f:&#xa;        new_resources=res_type.load_from_yaml(yaml_f,self)&#xa;&#xa;      if res_path!=&quot;rooms&quot;:&#xa;        with logging_object.Indented(self):&#xa;          for res in new_resources:&#xa;            self.debug(&quot;{}&quot;.format(res))&#xa;            self.resources[res_path][res.name]=res&#xa;&#xa;&#xa;&#xa;      else:&#xa;        self.resources[res_path]=new_resources&#xa;&#xa;&#xa;&#xa;  os.chdir(topdir)&#xa;&#xa;" id="SPmkDmD8Zzir"/>
    <sourcecode value="action_params=:&#xa;&#xa;&#xa;for param in action.action_data.keys():&#xa;  if param=='apply_to':&#xa;    continue&#xa;&#xa;  if param=='child_instance'and action.action_data['child_instance']and instance is not None:&#xa;    action_params['parent']=instance&#xa;&#xa;  action_params[param]=action.get_parameter_expression_result(&#xa;  param,self.symbols,self.language_engine)&#xa;self.debug(&quot;Handle action '{}'&quot;.format(action.name))&#xa;self.bump_indent_level()&#xa;if action.name==&quot;play_sound&quot;:&#xa;  if((len(action_params['sound'])>0)and&#xa;  (action_params['sound']in self.resources['sounds'].keys())):&#xa;    self.debug(&quot;Playing sound '{}'&quot;.format(action_params['sound']))&#xa;    self.resources['sounds'][action_params['sound']].play_sound()&#xa;&#xa;  else:&#xa;    self.debug(&quot;Sound '{}' not played&quot;.format(action_params['sound']))&#xa;&#xa;&#xa;elif action.name in[&quot;create_object&quot;,&quot;create_object_with_velocity&quot;]:&#xa;  if(self.screen and(len(action_params['object'])>0)and&#xa;  (action_params['object']in self.resources['objects'].keys())):&#xa;    self.info(&quot;Creating object '{}'&quot;.format(action_params['object']))&#xa;    self.new_object_queue.append(&#xa;    (self.resources['objects'][action_params['object']],action_params))&#xa;&#xa;  else:&#xa;    self.debug(&quot;Object '{}' not created&quot;.format(action_params['object']))&#xa;&#xa;&#xa;else:&#xa;  self.debug(&quot;No handler for action '{}'&quot;.format(action.name))&#xa;&#xa;self.drop_indent_level()&#xa;" id="yHqXQ0CsPyaa"/>
    <sourcecode value="pk_map=event.KeyEvent.PYGAME_KEY_TO_KEY_EVENT_MAP&#xa;key_event_init_name=None&#xa;key_event_name=None&#xa;if not key_event:&#xa;  key_event_init_name=&quot;kb_no_key&quot;&#xa;  key_event_name=key_event_init_name&#xa;&#xa;elif key_event.key in pk_map:&#xa;  key_event_name=str(pk_map[key_event.key])&#xa;  if key_event.type==pygame.KEYDOWN:&#xa;    key_event_init_name=&quot;{}_keydn&quot;.format(pk_map[key_event.key])&#xa;&#xa;  elif key_event.type==pygame.KEYUP:&#xa;    key_event_init_name=&quot;{}_keyup&quot;.format(pk_map[key_event.key])&#xa;&#xa;&#xa;ev=event.KeyEvent(key_event_init_name)&#xa;self.event_engine.queue_event(ev)&#xa;self.event_engine.transmit_event(key_event_name)&#xa;self.debug(&quot;Event '{}' queued and transmitted&quot;.format(key_event_init_name))&#xa;" id="IFJGdPe1hsmx"/>
    <sourcecode value="if mouse_event:&#xa;  self.mouse_pos[0]=mouse_event.pos[0]&#xa;  self.mouse_pos[1]=mouse_event.pos[1]&#xa;  self.language_engine.global_symbol_table.set_constant('mouse.x',&#xa;  self.mouse_pos[0])self.language_engine.global_symbol_table.set_constant('mouse.y',&#xa;  self.mouse_pos[1])if mouse_event.type==pygame.MOUSEMOTION:&#xa;    return&#xa;&#xa;&#xa;event_names=[]&#xa;if mouse_event:&#xa;  mouse_button=mouse_event.button&#xa;  if len(self.MOUSE_EVENT_TABLE)>mouse_button:&#xa;    ev_table_entry=self.MOUSE_EVENT_TABLE[mouse_button]&#xa;    self.event_engine.queue_event(&#xa;    event.MouseEvent(ev_table_entry[&quot;instance_event_name&quot;],:&#xa;      &quot;position&quot;:mouse_event.pos&#xa;    ))&#xa;    event_names.append(ev_table_entry[&quot;instance_event_name&quot;])&#xa;    self.event_engine.queue_event(&#xa;    event.MouseEvent(ev_table_entry[&quot;global_event_name&quot;],:&#xa;      &quot;position&quot;:mouse_event.pos&#xa;    ))&#xa;    event_names.append(ev_table_entry[&quot;global_event_name&quot;])&#xa;    if mouse_event.type==pygame.MOUSEBUTTONDOWN:&#xa;      if'instance_pressed_name'in ev_table_entry:&#xa;        self.event_engine.queue_event(&#xa;        event.MouseEvent(ev_table_entry[&quot;instance_pressed_name&quot;],:&#xa;          &quot;position&quot;:mouse_event.pos&#xa;        ))&#xa;        event_names.append(ev_table_entry[&quot;instance_pressed_name&quot;])&#xa;        self.event_engine.queue_event(&#xa;        event.MouseEvent(ev_table_entry[&quot;global_pressed_name&quot;],:&#xa;          &quot;position&quot;:mouse_event.pos&#xa;        ))&#xa;        event_names.append(ev_table_entry[&quot;global_pressed_name&quot;])&#xa;&#xa;&#xa;    if mouse_event.type==pygame.MOUSEBUTTONUP:&#xa;      if'instance_released_name'in ev_table_entry:&#xa;        self.event_engine.queue_event(&#xa;        event.MouseEvent(ev_table_entry[&quot;instance_released_name&quot;],:&#xa;          &quot;position&quot;:mouse_event.pos&#xa;        ))&#xa;        event_names.append(ev_table_entry[&quot;instance_released_name&quot;])&#xa;        self.event_engine.queue_event(&#xa;        event.MouseEvent(ev_table_entry[&quot;global_released_name&quot;],:&#xa;          &quot;position&quot;:mouse_event.pos&#xa;        ))&#xa;        event_names.append(ev_table_entry[&quot;global_released_name&quot;])&#xa;&#xa;&#xa;&#xa;&#xa;else:&#xa;  self.event_engine.queue_event(&#xa;  event.MouseEvent(&quot;mouse_nobutton&quot;,:&#xa;    &quot;position&quot;:self.mouse_pos&#xa;  ))&#xa;  event_names.append(&quot;mouse_nobutton&quot;)&#xa;  self.event_engine.queue_event(&#xa;  event.MouseEvent(&quot;mouse_global_nobutton&quot;,:&#xa;    &quot;position&quot;:self.mouse_pos&#xa;  ))&#xa;  event_names.append(&quot;mouse_global_nobutton&quot;)&#xa;&#xa;for ev_name in event_names:&#xa;  self.event_engine.transmit_event(ev_name)&#xa;  if not ev_name in['mouse_nobutton','mouse_global_nobutton']:&#xa;    self.debug(&quot;Event '{}' queued and transmitted&quot;.format(ev_name))&#xa;&#xa;&#xa;" id="odMVU9R9FKMO"/>
    <sourcecode value="self.info(&quot;Setup:&quot;)&#xa;with logging_object.Indented(self):&#xa;  self.screen=screen&#xa;  self.symbols.set_constant('screen_width',screen.get_width())&#xa;  self.symbols.set_constant('screen_height',screen.get_height())&#xa;  self.info(&quot;Pre-load game resources..&quot;)&#xa;  with logging_object.Indented(self):&#xa;    self.setup_game_resources()&#xa;&#xa;  self.info(&quot;Load first room..&quot;)&#xa;  with logging_object.Indented(self):&#xa;    self.load_room(0)&#xa;&#xa;&#xa;" id="W7SlRm8se6ot"/>
    <sourcecode value="topdir=os.getcwd()&#xa;if os.path.exists('sprites'):&#xa;  os.chdir('sprites')&#xa;  self.info(&quot;Preloading sprite images..&quot;)&#xa;  with logging_object.Indented(self):&#xa;    for spr in self.resources['sprites'].keys():&#xa;      self.info(&quot;{}&quot;.format(spr))&#xa;      self.resources['sprites'][spr].setup()&#xa;&#xa;&#xa;&#xa;sound_dir=os.path.join(topdir,'sounds')&#xa;if os.path.exists(sound_dir):&#xa;  os.chdir(sound_dir)&#xa;  self.info(&quot;Preloading sound files..&quot;)&#xa;  with logging_object.Indented(self):&#xa;    for snd in self.resources['sounds'].keys():&#xa;      self.info(&quot;{}&quot;.format(snd))&#xa;      self.resources['sounds'][snd].setup()&#xa;&#xa;&#xa;&#xa;background_dir=os.path.join(topdir,'background')&#xa;if os.path.exists(background_dir):&#xa;  os.chdir(background_dir)&#xa;  self.info(&quot;Preloading background images..&quot;)&#xa;  with logging_object.Indented(self):&#xa;    for bkg in self.resources['backgrounds'].keys():&#xa;      self.info(&quot;{}&quot;.format(bkg))&#xa;      self.resources['background'][bkg].setup()&#xa;&#xa;&#xa;&#xa;os.chdir(topdir)&#xa;" id="qC9TIxMeJo87"/>
    <sourcecode value="self.info(&quot;Loading room {:d} ('{}')..&quot;.format(room_n,&#xa;self.resources['rooms'][room_n].name))self.room_index=room_n&#xa;room_width=self.resources['rooms'][room_n].width&#xa;room_height=self.resources['rooms'][room_n].height&#xa;self.draw_surface=pygame.Surface((room_width,room_height))&#xa;self.resources['rooms'][room_n].draw_room_background(self.draw_surface)&#xa;self.resources['rooms'][room_n].load_room(self.draw_surface)&#xa;self.symbols.set_constant('room_width',room_width)&#xa;self.symbols.set_constant('room_height',room_height)&#xa;self.info(&quot;Room {:d} loaded.&quot;.format(room_n))&#xa;" id="Hmk7qmOgyX9F"/>
    <sourcecode value="self.current_events.append(event)&#xa;" id="KnjGIqTkKNUc"/>
    <sourcecode value="key_pressed=False&#xa;mouse_button=False&#xa;for new_obj,params in self.new_object_queue:&#xa;  new_obj.create_instance(self.draw_surface,params)&#xa;&#xa;self.new_object_queue=[]&#xa;ev=event.StepEvent('begin_step')&#xa;self.event_engine.queue_event(ev)&#xa;self.event_engine.transmit_event(ev.name)&#xa;for ev in self.current_events:&#xa;  if ev.type==pygame.QUIT:&#xa;    self.done=True&#xa;    break&#xa;&#xa;  elif ev.type in(pygame.KEYDOWN,pygame.KEYUP):&#xa;    key_pressed=True&#xa;    if(ev.key==pygame.K_ESCAPE):&#xa;      self.done=True&#xa;      break&#xa;&#xa;    else:&#xa;      self.send_key_event(ev)&#xa;&#xa;&#xa;  elif ev.type in[pygame.MOUSEBUTTONDOWN,pygame.MOUSEBUTTONUP,&#xa;  pygame.MOUSEMOTION]:&#xa;    self.send_mouse_event(ev)&#xa;    if ev.type in[pygame.MOUSEBUTTONDOWN,pygame.MOUSEBUTTONUP]:&#xa;      mouse_button=True&#xa;&#xa;&#xa;&#xa;if not key_pressed:&#xa;  self.send_key_event(None)&#xa;&#xa;if not mouse_button:&#xa;  self.send_mouse_event(None)&#xa;&#xa;self.current_events=[]&#xa;ev=event.StepEvent('normal_step')&#xa;self.event_engine.queue_event(ev)&#xa;self.event_engine.transmit_event(ev.name)&#xa;for obj_name in self.resources['objects'].keys():&#xa;  self.resources['objects'][obj_name].update()&#xa;&#xa;obj_types=self.resources['objects'].values()&#xa;collision_types=[]&#xa;for obj_name in self.resources['objects'].keys():&#xa;  collision_types+=self.resources['objects'][obj_name].collision_check(obj_types)&#xa;&#xa;if len(collision_types)>0:&#xa;  for coll_type in collision_types:&#xa;    self.event_engine.transmit_event(coll_type)&#xa;&#xa;&#xa;" id="UTEnqiNBxSer"/>
    <sourcecode value="ev=event.StepEvent('end_step')&#xa;self.event_engine.queue_event(ev)&#xa;self.event_engine.transmit_event(ev.name)&#xa;ev=event.DrawEvent('draw')&#xa;self.event_engine.queue_event(ev)&#xa;self.event_engine.transmit_event(ev.name)&#xa;" id="WQej4eFX7UKv"/>
    <sourcecode value="if(self.room_index&lt;len(self.resources['rooms'])):&#xa;  self.resources['rooms'][self.room_index].draw_room_background(self.draw_surface)&#xa;&#xa;" id="25iW9BQfa4Pe"/>
    <sourcecode value="self.screen.blit(self.draw_surface,(0,0))&#xa;" id="RJxlkzuk2aEC"/>
    <sourcecode value="return self.done&#xa;" id="ZpCgYZuzqpiY"/>
    <sourcecode value="pygame.init()&#xa;self.screen=pygame.display.set_mode(self.game_settings['screen_dimensions'])&#xa;self.setup(self.screen)&#xa;pygame.display.set_caption(self.game_settings['game_name'])&#xa;self.clock=pygame.time.Clock()&#xa;while not self.done:&#xa;  for event in pygame.event.get():&#xa;    self.collect_event(event)&#xa;&#xa;  self.update()&#xa;  self.draw_background()&#xa;  self.draw_objects()&#xa;  self.final_pass()&#xa;  pygame.display.flip()&#xa;  self.clock.tick(self.game_settings['frames_per_second'])&#xa;&#xa;pygame.quit()&#xa;" id="1BDsGMnnCyTi"/>
    <sourcecode value="self.logger=logger&#xa;" id="EZsMIneNbtMa"/>
    <sourcecode value="self.logger.log_indent+=self.logger.indent_size&#xa;" id="OfNzWkXM7hrV"/>
    <sourcecode value="self.logger.log_indent-=self.logger.indent_size&#xa;" id="QMBAxAAJpYGL"/>
    <sourcecode value="self.logger_name=logger_name&#xa;self.log_indent=0&#xa;self.logger=logging.getLogger(self.logger_name)&#xa;self.indent_size=2&#xa;" id="5lEcOMVSgWmR"/>
    <sourcecode value="self.log_indent+=self.indent_size&#xa;" id="Lz5zTpQUZNya"/>
    <sourcecode value="if self.log_indent>=self.indent_size:&#xa;  self.log_indent-=self.indent_size&#xa;&#xa;" id="UZYjY2MrzPoT"/>
    <sourcecode value="name_field=&quot;&quot;&#xa;if hasattr(self,'name'):&#xa;  name_field=&quot; [{}]&quot;.format(self.name)&#xa;&#xa;format_string=&quot;{}{}{}&quot;.format(&quot; &quot;*self.log_indent,message,&#xa;name_field)return format_string&#xa;" id="po7eouKITszz"/>
    <sourcecode value="self.logger.debug(self._get_format_string(message))&#xa;" id="05aTxaRptDic"/>
    <sourcecode value="self.logger.info(self._get_format_string(message))&#xa;" id="oO2hcjHQmk04"/>
    <sourcecode value="self.logger.warn(self._get_format_string(message))&#xa;" id="I0r2kp7ckfaq"/>
    <sourcecode value="self.logger.error(self._get_format_string(message))&#xa;" id="qfOaIwPur9vc"/>
    <sourcecode value="self.logger.critical(self._get_format_string(message))" id="zoRrvMR9EqPU"/>
    <sourcecode value="self.element_table=:&#xa;&#xa;&#xa;for prop in self.PROPERTY_PRECEDENCE:&#xa;  if&quot;attribute&quot;in prop:&#xa;    attribute_table=:&#xa;&#xa;&#xa;    for attr_sel in self.ATTR_SELECTOR_PRECEDENCE:&#xa;      attribute_table[attr_sel]=[]&#xa;&#xa;    self.element_table[prop]=attribute_table&#xa;&#xa;  else:&#xa;    self.element_table[prop]=[]&#xa;&#xa;&#xa;" id="A7yLNAnNrXtP"/>
    <sourcecode value="for fset in self.PROPERTY_PRECEDENCE:&#xa;  if element.selector_types==fset:&#xa;    if&quot;attribute&quot;in fset:&#xa;      self.element_table[fset][element.attr_type].append(element)&#xa;&#xa;    else:&#xa;      self.element_table[fset].append(element)&#xa;&#xa;    break&#xa;&#xa;&#xa;" id="i20sI9bSGZld"/>
    <sourcecode value="matched=False&#xa;if element.attr_str in attribute_dict.keys():&#xa;  attr_val=attribute_dict[element.attr_str]&#xa;  if element.attr_type==&quot;matches&quot;:&#xa;    matched=(element.attr_val==attr_val)&#xa;&#xa;  elif element.attr_type==&quot;starts_with_word&quot;:&#xa;    minfo=re.search(&quot;^{}\W&quot;.format(element.attr_val),attr_val)&#xa;    matched=(minfo is not None)&#xa;&#xa;  elif element.attr_type==&quot;contains_word&quot;:&#xa;    minfo=re.search(&quot;\W{}\W&quot;.format(element.attr_val),attr_val)&#xa;    matched=(minfo is not None)&#xa;&#xa;  elif element.attr_type==&quot;starts_with&quot;:&#xa;    matched=element.attr_val.startswith(attr_val)&#xa;&#xa;  elif element.attr_type==&quot;ends_with&quot;:&#xa;    matched=element.attr_val.endswith(attr_val)&#xa;&#xa;  elif element.attr_type==&quot;contains&quot;:&#xa;    matched=(element.attr_val in attr_val)&#xa;&#xa;  elif element.attr_type==&quot;any&quot;:&#xa;    matched=True&#xa;&#xa;&#xa;return matched&#xa;" id="gnVwMEZ6nafs"/>
    <sourcecode value="matched=False&#xa;prop_list=[]&#xa;pseudo_class=None&#xa;element_type=None&#xa;element_class=None&#xa;element_id=None&#xa;attribute_dict=None&#xa;if&quot;pseudo_class&quot;in kwargs:&#xa;  pseudo_class=kwargs[&quot;pseudo_class&quot;]&#xa;&#xa;if&quot;element_type&quot;in kwargs:&#xa;  element_type=kwargs[&quot;element_type&quot;]&#xa;&#xa;if&quot;element_class&quot;in kwargs:&#xa;  element_class=kwargs[&quot;element_class&quot;]&#xa;&#xa;if&quot;element_id&quot;in kwargs:&#xa;  element_id=kwargs[&quot;element_id&quot;]&#xa;&#xa;if&quot;attribute_dict&quot;in kwargs:&#xa;  attribute_dict=kwargs[&quot;attribute_dict&quot;]&#xa;&#xa;for idx,prop_type in enumerate(match_props):&#xa;  if prop_type in element.selector_types:&#xa;    if(idx>0):&#xa;      if not matched:&#xa;        break&#xa;&#xa;      else:&#xa;        matched=False&#xa;&#xa;&#xa;    if(prop_type==&quot;type&quot;)and(element_type is not None)and(element.type_str==element_type):&#xa;      matched=True&#xa;&#xa;    elif(prop_type==&quot;class&quot;)and(element_class is not None)and(element.class_str==element_class):&#xa;      matched=True&#xa;&#xa;    elif(prop_type==&quot;pclass&quot;)and(pseudo_class is not None)and(element.pclass_str==pseudo_class):&#xa;      matched=True&#xa;&#xa;    elif(prop_type==&quot;id&quot;)and(element_id is not None)and(element.id_str==element_id):&#xa;      matched=True&#xa;&#xa;    elif(prop_type==&quot;attribute&quot;)and(attribute_dict is not None):&#xa;      matched=self.attribute_match(element,attribute_dict)&#xa;&#xa;&#xa;&#xa;return matched&#xa;" id="av6rhkmEu2Wc"/>
    <sourcecode value="matched_element=None&#xa;for prop in self.PROPERTY_PRECEDENCE:&#xa;  if&quot;attribute&quot;in prop:&#xa;    for attr_type_name in self.ATTR_SELECTOR_PRECEDENCE:&#xa;      for element in self.element_table[prop][attr_type_name]:&#xa;        if self.element_matched(element,list(prop),**kwargs):&#xa;          print(&quot;Matched {} (attr); using parameters {}&quot;.format(prop,element.parameters))&#xa;          matched_element=element&#xa;          break&#xa;&#xa;&#xa;      if matched_element is not None:&#xa;        break&#xa;&#xa;&#xa;&#xa;  else:&#xa;    for element in self.element_table[prop]:&#xa;      if self.element_matched(element,list(prop),**kwargs):&#xa;        print(&quot;Matched {}; using parameters {}&quot;.format(prop,element.parameters))&#xa;        matched_element=element&#xa;        break&#xa;&#xa;&#xa;&#xa;  if matched_element is not None:&#xa;    break&#xa;&#xa;&#xa;return matched_element&#xa;" id="MkhTdMHDpGgI"/>
    <sourcecode value="for prop_set in self.PROPERTY_PRECEDENCE:&#xa;  if&quot;attribute&quot;in prop_set:&#xa;    for attr_type_name in self.ATTR_SELECTOR_PRECEDENCE:&#xa;      for el in self.element_table[prop_set][attr_type_name]:&#xa;        print(&quot;{}:&quot;.format(el.name))&#xa;        el.pretty_print(2)&#xa;&#xa;&#xa;&#xa;  else:&#xa;    for el in self.element_table[prop_set]:&#xa;      print(&quot;{}:&quot;.format(el.name))&#xa;      el.pretty_print(2)&#xa;&#xa;&#xa;&#xa;" id="rQegfJwT25ck"/>
    <sourcecode value="super(CSSStyleParser,self).__init__()&#xa;self.__value_list=[]&#xa;self.__param_name=&quot;&quot;&#xa;self.__ident_list=[]&#xa;self.__style_block=:&#xa;&#xa;&#xa;self.logger=logging.getLogger(&quot;CSSStyleParser&quot;)&#xa;" id="OzhVpFFSploL"/>
    <sourcecode value="self.logger.debug(&quot;push_value(&lt;css str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;new_value=&quot;&quot;.join(toks.asList())&#xa;self.logger.debug(&quot;add {} to value list&quot;.format(new_value))&#xa;self.__value_list.append(new_value)&#xa;self.logger.debug(&quot;self.__value_list is now: {}&quot;.format(self.__value_list))&#xa;" id="uO7xsj4GgjjW"/>
    <sourcecode value="self.logger.debug(&quot;push_ident_list(&lt;css str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;self.__ident_list=list(toks.asList())&#xa;self.logger.debug(&quot;self.__ident_list is now: {}&quot;.format(self.__ident_list))&#xa;" id="2gn20Ns21ykM"/>
    <sourcecode value="self.logger.debug(&quot;push_param_name(&lt;css str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;self.__param_name=&quot;&quot;.join(toks.asList())&#xa;self.logger.debug(&quot;Param name is now: {}&quot;.format(self.__param_name))&#xa;" id="ZtbJWA3UaqRx"/>
    <sourcecode value="self.logger.debug(&quot;push_parameter(&lt;css str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;self.__style_block[self.__param_name]=list(self.__value_list)&#xa;self.logger.debug(&quot;__style_block is now {}&quot;.format(self.__style_block))&#xa;self.__param_name=&quot;&quot;&#xa;self.__value_list=[]&#xa;" id="nQ58MZwO7F1Q"/>
    <sourcecode value="self.logger.debug(&quot;push_param_block(&lt;css str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;for an_ident in self.__ident_list:&#xa;  self.logger.debug(&quot;Create new style entry named '{}'&quot;.format(an_ident))&#xa;  new_style_entry=CSSStyleEntry(an_ident)&#xa;  new_style_entry.parameters.update(self.__style_block)&#xa;  self.add_element(new_style_entry)&#xa;&#xa;self.__ident_list=[]&#xa;self.__style_block=:&#xa;&#xa;&#xa;" id="3M34BWOaw83b"/>
    <sourcecode value="substr_len=min(len(s)-loc,10)&#xa;self.logger.debug(&quot;missing_or_bad_value(&lt;css str>, loc={}, s='{}', err='{}'):&quot;.format(loc,s[loc:loc+substr_len],err))&#xa;" id="xtCse6wvMY7k"/>
    <sourcecode value="self.element_table=ElementPrioritizerTable()&#xa;self.styles=:&#xa;&#xa;&#xa;self.__value_list=[]&#xa;self.__param_name=&quot;&quot;&#xa;self.__ident_list=[]&#xa;self.__style_block=:&#xa;&#xa;&#xa;" id="hk4N4TufDWO4"/>
    <sourcecode value="self.element_table=ElementPrioritizerTable()&#xa;self.styles=:&#xa;&#xa;&#xa;" id="Gekf9zujrNbR"/>
    <sourcecode value="self.element_table.add_element(element)&#xa;self.styles[element.name]=element&#xa;" id="cAcOqTC67wjE"/>
    <sourcecode value="style=:&#xa;&#xa;&#xa;matched_element=self.element_table.priority_match(**kwargs)&#xa;if matched_element is not None:&#xa;  style.update(matched_element.parameters)&#xa;&#xa;return style&#xa;" id="j1Mpv43pi1Zf"/>
    <sourcecode value="self.element_table=other.element_table&#xa;self.styles.update(other.styles)&#xa;" id="zxRfwyLUi3fS"/>
    <sourcecode value="self.element_table.pretty_print()&#xa;" id="ojEWkuwMM0YU"/>
    <sourcecode value="cls.css_bnf=BNF(cls.css_style_obj)&#xa;new_css_obj=CSSStyle()&#xa;try:&#xa;  astree=cls.css_bnf.parseString(css_string_data)&#xa;  new_css_obj.copy(cls.css_style_obj)&#xa;&#xa;finally:&#xa;  cls.css_style_obj.clear()&#xa;&#xa;return new_css_obj&#xa;" id="MNZbGx8BXFAT"/>
    <sourcecode value="global bnf&#xa;if bnf is None:&#xa;  fnumber=Regex(r&quot;[+-]?\d+(:?\.\d*)?(:?[eE][+-]?\d+)?&quot;)&#xa;  identifier=Word(&quot;_&quot;+alphas+nums)&#xa;  tilde=Literal(&quot;~&quot;)&#xa;  asterisk=Literal(&quot;*&quot;)&#xa;  caret=Literal(&quot;^&quot;)&#xa;  dsign=Literal(&quot;$&quot;)&#xa;  pipe=Literal(&quot;|&quot;)&#xa;  equal=Literal(&quot;=&quot;)&#xa;  squote=Literal(&quot;'&quot;)&#xa;  sqstring=squote+Regex(r&quot;[^']+&quot;)+squote&#xa;  dquote=Literal('&quot;')&#xa;  dqstring=dquote+Regex(r&quot;[^\&quot;]+&quot;)+dquote&#xa;  string=sqstring|dqstring&#xa;  class_or_id=Word(&quot;;pclass=Combine(Word(&quot;:&quot;,&quot;-&quot;+alphas)+Optional('('+(Word(nums)|identifier)+')'))&#xa;  attr_selector=Combine(&quot;[&quot;+identifier+Optional(Optional(tilde|asterisk|caret|dsign|pipe)+equal+string)+&quot;]&quot;)&#xa;  selector=Combine(Word(&quot;_&quot;+alphas,&quot;_&quot;+alphas+nums)+Optional(attr_selector|class_or_id)+Optional(pclass))|Combine(class_or_id+Optional(pclass))|attr_selector&#xa;  integer=Word(nums)&#xa;  parameter_name=Word(alphas,alphas+nums+&quot;_-&quot;)&#xa;  param_str=Word(alphas,alphas+nums+&quot;_-&quot;)&#xa;  comment=Regex(r&quot;[/][*].*?[*][/]&quot;,flags=re.S)&#xa;  lbrack=Literal(&quot;{&quot;)&#xa;  rbrack=Literal(&quot;}&quot;)&#xa;  px_suffix=Literal(&quot;px&quot;)&#xa;  pix_count=Combine(Word(nums)+px_suffix)&#xa;  percent=Literal(&quot;%&quot;)&#xa;  percentage=Combine(Word(nums)+percent)&#xa;  color=Word(&quot;;urlstr=Keyword(&quot;url&quot;)&#xa;  url=urlstr+'('+string+')'&#xa;  parameter_val=url|color|pix_count|percentage|param_str|fnumber|integer&#xa;  parameter=(parameter_name.setParseAction(css_style_obj.push_param_name)+':'+ZeroOrMore(comment.suppress())+OneOrMore(parameter_val.setParseAction(css_style_obj.push_value)+ZeroOrMore(comment.suppress()))+';').setParseAction(css_style_obj.push_parameter)&#xa;  parameter_block=(delimitedList(selector).setParseAction(css_style_obj.push_ident_list)+lbrack+OneOrMore(comment.suppress()|parameter)+rbrack).setParseAction(css_style_obj.push_param_block)&#xa;  bnf=OneOrMore(comment.suppress()|parameter_block)&#xa;&#xa;return bnf" id="nfG9X8A7bHVK"/>
    <sourcecode value="self._x=x&#xa;self._y=y&#xa;self.x_callback=x_change_callback&#xa;self.y_callback=y_change_callback&#xa;" id="Bc5QDDuKCPcE"/>
    <sourcecode value="return self._x&#xa;" id="WFQge3shaJms"/>
    <sourcecode value="self._x=value&#xa;if self.x_callback:&#xa;  self.x_callback()&#xa;&#xa;" id="P3TLMqRq5sUi"/>
    <sourcecode value="return self._y&#xa;" id="wxQ0nuggG36u"/>
    <sourcecode value="self._y=value&#xa;if self.y_callback:&#xa;  self.y_callback()&#xa;&#xa;" id="W7dmF9MA5kAq"/>
    <sourcecode value="if itemkey==0:&#xa;  return self.x&#xa;&#xa;elif itemkey==1:&#xa;  return self.y&#xa;&#xa;else:&#xa;  raise IndexError(&quot;Coordinates only have indices 0 or 1&quot;)&#xa;&#xa;" id="kX6nHEew47nv"/>
    <sourcecode value="if not isinstance(value,Number):&#xa;  raise ValueError(&quot;Coordinates can only hold numbers&quot;)&#xa;&#xa;if itemkey==0:&#xa;  self.x=value&#xa;&#xa;elif itemkey==1:&#xa;  self.y=value&#xa;&#xa;else:&#xa;  raise IndexError(&quot;Coordinates only have indices 0 or 1&quot;)&#xa;&#xa;" id="AqlDxY8d75Ih"/>
    <sourcecode value="return 2&#xa;" id="nk8FLZS0s3E5"/>
    <sourcecode value="return&quot;({:d}, {:d})&quot;.format(int(self.x),int(self.y))" id="j24wR0VClbS4"/>
    <sourcecode value="if len(all_known_colors)==0:&#xa;  cls.all_known_colors=pygame.colordict.THECOLORS.keys()+cls.ADDITIONAL_COLORS.keys()&#xa;&#xa;return color_name.lower()in cls.all_known_colors&#xa;" id="ngVNXNBoPuH9"/>
    <sourcecode value="color_str=params[0]&#xa;self.color=None&#xa;if params[0]in self.ADDITIONAL_COLORS.keys():&#xa;  color_str=self.ADDITIONAL_COLORS[params[0]]&#xa;  self.color=pygame.Color(color_str)&#xa;&#xa;elif not isinstance(params[0],str):&#xa;  clist=list(params[0])&#xa;  if len(clist)>=3:&#xa;    self.color=pygame.Color(*clist)&#xa;&#xa;&#xa;else:&#xa;  self.color=pygame.Color(*params)&#xa;&#xa;" id="QlaUFtrZlG2L"/>
    <sourcecode value="return self.color.r&#xa;" id="uo1e42xhveMB"/>
    <sourcecode value="self.color.r=red&#xa;" id="hw6ux6KpsKRx"/>
    <sourcecode value="return self.color.g&#xa;" id="zs9rCYmWxOmy"/>
    <sourcecode value="self.color.g=green&#xa;" id="ualGTJaSAhKM"/>
    <sourcecode value="return self.color.b&#xa;" id="iAIsraE5g5G9"/>
    <sourcecode value="self.color.b=blue&#xa;" id="rEIBes1M3HEs"/>
    <sourcecode value="return self.color.a&#xa;" id="anib2uUrJPNm"/>
    <sourcecode value="self.color.a=alpha&#xa;" id="dOgM6UhfGNGI"/>
    <sourcecode value="return self.color.r,self.color.g,self.color.b&#xa;" id="LhWb3lsHT0ob"/>
    <sourcecode value="return self.color.r,self.color.g,self.color.b,self.color.a" id="iWrTNrKiXpIa"/>
    <sourcecode value="new_room_list=[]&#xa;yaml_repr=yaml.load(yaml_stream)&#xa;if yaml_repr:&#xa;  for top_level in yaml_repr:&#xa;    kwargs=:&#xa;&#xa;&#xa;    room_name=top_level.keys()[0]&#xa;    room_yaml=top_level[room_name]&#xa;    for attr in Room.ATTRIBUTES_TABLE.keys():&#xa;      if attr in room_yaml.keys():&#xa;        kwargs[attr]=room_yaml[attr]&#xa;&#xa;&#xa;    if'object_instances'in room_yaml.keys():&#xa;      kwargs['object_instances']=room_yaml['object_instances']&#xa;&#xa;    new_room_list.append(Room(room_name,game_engine,**kwargs))&#xa;&#xa;&#xa;return new_room_list&#xa;" id="EO8j729RraQk"/>
    <sourcecode value="super(Room,self).__init__(type(self).__name__)&#xa;self.name=name&#xa;self.game_engine=game_engine&#xa;self.width=self.DEFAULT_DIMENSIONS[0]&#xa;self.height=self.DEFAULT_DIMENSIONS[1]&#xa;self.frame_rate=self.DEFAULT_FRAME_RATE&#xa;self.persistent=False&#xa;self._init_code=&quot;&quot;&#xa;self.init_code_block=None&#xa;self.init_object_instances=[]&#xa;self.object_instances=[]&#xa;self.background=None&#xa;self.draw_background_color=True&#xa;self.tile_horizontal=False&#xa;self.tile_vertical=False&#xa;self.stretch=False&#xa;self.background_color=self.DEFAULT_BACKGROUND_COLOR&#xa;self._background_horizontal_offset=0&#xa;self._background_vertical_offset=0&#xa;self.background_offsets=[0,0]&#xa;self.background_visible=True&#xa;self.grid=pygame.Rect(0,0,16,16)&#xa;self._cached_background=None&#xa;self._cached_rect=pygame.Rect(0,0,0,0)&#xa;self.bkg_width=0&#xa;self.bkg_height=0&#xa;self.disp_width=0&#xa;self.disp_height=0&#xa;if kwargs:&#xa;  for attr in self.ATTRIBUTES_TABLE.keys():&#xa;    if attr in kwargs:&#xa;      attr_type=self.ATTRIBUTES_TABLE[attr]&#xa;      if attr_type!=bool:&#xa;        setattr(self,attr,attr_type(kwargs[attr]))&#xa;&#xa;      else:&#xa;        setattr(self,attr,(kwargs[attr]==True))&#xa;&#xa;&#xa;&#xa;  if'object_instances'in kwargs:&#xa;    obj_list=list(kwargs['object_instances'])&#xa;    for obj_check in obj_list:&#xa;      obj_ok=True&#xa;      err_msg=&quot;&quot;&#xa;      init_code=None&#xa;      obj_name=obj_check.keys()[0]&#xa;      if'position'not in obj_check[obj_name]:&#xa;        obj_ok=False&#xa;        err_msg=&quot;Missing position for object '{}'&quot;.format(obj_name)&#xa;&#xa;      pos_list=list(obj_check[obj_name]['position'])&#xa;      if len(pos_list)&lt;2:&#xa;        obj_ok=False&#xa;        err_msg=&quot;Invalid position '{}' for object '{}'&quot;.format(obj_check[obj_name]['position'],&#xa;        obj_name)&#xa;      if'init_code'in obj_check[obj_name].keys():&#xa;        if not isinstance(obj_check[obj_name]['init_code'],str):&#xa;          obj_ok=False&#xa;          err_msg=&quot;Invalid code block '{}' for object '{}'&quot;.format(obj_check[obj_name]['init_code'],&#xa;          obj_name)&#xa;        init_code=obj_check[obj_name]['init_code']&#xa;&#xa;      if not obj_ok:&#xa;        self.error(&quot;{}: Failed to create room: {}&quot;.format(type(self).__name__,&#xa;        err_msg))raise RoomException(&quot;{}: Failed to create room: {}&quot;.format(type(self).__name__,&#xa;        err_msg))&#xa;      self.add_init_object_instance_at(obj_name,&#xa;      obj_check[obj_name]['position'],init_code)&#xa;&#xa;&#xa;" id="X7dwuD4sdLRP"/>
    <sourcecode value="return self._init_code&#xa;" id="j4KtSNv3TpHu"/>
    <sourcecode value="self._init_code=value&#xa;self.set_init_code_block(value)&#xa;" id="KByrnD1WILNi"/>
    <sourcecode value="return self._background_horizontal_offset&#xa;" id="Nt1dCMKtf61j"/>
    <sourcecode value="self._background_horizontal_offset=value&#xa;self.background_offsets[0]=value&#xa;" id="2TOjdGDy9CaL"/>
    <sourcecode value="return self._background_vertical_offset&#xa;" id="kP8rbgDAYOKW"/>
    <sourcecode value="self._background_vertical_offset=value&#xa;self.background_offsets[1]=value&#xa;" id="U4b3WmDHBJ8l"/>
    <sourcecode value="self.debug(&quot;add_init_object_instance_at({}, {}, {}):&quot;.format(object_type_name,&#xa;locationxy,init_code))loc=[int(locationxy[0]),int(locationxy[1])]&#xa;self.init_object_instances.append((object_type_name,loc,init_code))&#xa;" id="gjVq1eb1vUZd"/>
    <sourcecode value="self.debug(&quot;add_object_instance_at({}, {}, {}, {}):&quot;.format(surface,&#xa;object_type_name,locationxy,init_code))if object_type_name in self.game_engine.resources['objects'].keys():&#xa;  self.object_instances.append(self.game_engine.resources['objects'][object_type_name].create_instance(&#xa;  surface,position=locationxy))new_obj=self.object_instances[-1]&#xa;  self.info(&quot;  Room {}: Created obj {} id {:d}&quot;.format(self.name,&#xa;  object_type_name,new_obj.inst_id))if init_code is not None:&#xa;    code_action=action.CodeAction('execute_code',code=init_code)&#xa;    self.object_instances[-1].execute_code(code_action,&#xa;    keep_code_block=False)&#xa;&#xa;" id="Z8Trf3ClCYpp"/>
    <sourcecode value="self.debug(&quot;set_init_code_block({}):&quot;.format(code_block_string))&#xa;self.init_code_block=self.game_engine.language_engine.register_code_block(&#xa;&quot;{}_init&quot;.format(self.name),code_block_string)" id="0y1APrMJP4k6"/>
    <sourcecode value="self.debug(&quot;set_background({}):&quot;.format(background))&#xa;self.background=background&#xa;" id="6pDUtwaQuxwM"/>
    <sourcecode value="self.debug(&quot;load_room({}):&quot;.format(surface))&#xa;self.info(&quot;  load room named '{}'&quot;.format(self.name))&#xa;if(self.background and(self.background in&#xa;self.game_engine.resources['backgrounds'].keys())):&#xa;  self.game_engine.resources['backgrounds'][self.background].load_graphic()&#xa;&#xa;if self.init_code_block:&#xa;  self.game_engine.language_engine.execute_code_block(&#xa;  &quot;{}_init&quot;.format(self.name))&#xa;for an_object,positionxy,init_code in self.init_object_instances:&#xa;  self.add_object_instance_at(surface,an_object,positionxy,&#xa;  init_code)&#xa;" id="q6ak1U7nOnkn"/>
    <sourcecode value="self.debug(&quot;draw_room_background({}):&quot;.format(surface))&#xa;if self.draw_background_color:&#xa;  surface.fill(self.background_color.rgb)&#xa;&#xa;if self.background:&#xa;  if self.background in self.game_engine.resources['backgrounds'].keys():&#xa;    bkg=self.game_engine.resources['backgrounds'][self.background]&#xa;    if((self.disp_width!=surface.get_width())or&#xa;    (self.disp_height!=surface.get_height())):&#xa;      if self._cached_background is not None:&#xa;        self.error(&quot;room {} draw_room_background(): display surface changed dimensions!&quot;.format(name))&#xa;        raise RoomException(&#xa;        &quot;room {} draw_room_background(): display surface changed dimensions!&quot;.format(name))&#xa;      self.disp_width=surface.get_width()&#xa;      self.disp_height=surface.get_height()&#xa;&#xa;    if self._cached_background:&#xa;      surface.blit(self._cached_background,&#xa;      (self._cached_rect[0],self._cached_rect[1]),area=self._cached_rect)&#xa;    elif bkg.image:&#xa;      rows=1&#xa;      cols=1&#xa;      if self.bkg_width!=bkg.image.get_width():&#xa;        self.bkg_width=bkg.image.get_width()&#xa;&#xa;      if self.bkg_height!=bkg.image.get_height():&#xa;        self.bkg_height=bkg.image.get_height()&#xa;&#xa;      self._cached_background=surface.copy()&#xa;      self._cached_rect.x=self.background_offsets[0]&#xa;      self._cached_rect.y=self.background_offsets[1]&#xa;      if bkg.tileset:&#xa;        self._cached_rect.width=self.disp_width-self.background_offsets[0]&#xa;        self._cached_rect.height=self.disp_height-self.background_offsets[1]&#xa;        bkg.draw_background(self._cached_background,&#xa;        self.background_offsets)&#xa;      else:&#xa;        pix_width=self.disp_width-self.background_offsets[0]&#xa;        if self.tile_horizontal and(self.bkg_width&lt;pix_width):&#xa;          cols=pix_width/self.bkg_width&#xa;          overage=pix_width%self.bkg_width&#xa;          if overage!=0:&#xa;            cols+=1&#xa;&#xa;&#xa;        pix_height=self.disp_height-self.background_offsets[1]&#xa;        if self.tile_vertical and(self.bkg_height&lt;pix_height):&#xa;          rows=pix_height/self.bkg_height&#xa;          overage=pix_height%self.bkg_height&#xa;          if overage!=0:&#xa;            rows+=1&#xa;&#xa;&#xa;        self._cached_rect.height=(rows*self.bkg_height)&#xa;        self._cached_rect.width=(cols*self.bkg_width)&#xa;        for bkg_row in range(rows):&#xa;          for bkg_col in range(cols):&#xa;            offsets=[self.background_offsets[0]+&#xa;            bkg_col*self.bkg_width,self.background_offsets[1]+bkg_row*self.bkg_height]bkg.draw_background(self._cached_background,&#xa;            offsets" id="1tVPeFAhqB4E"/>
    <sourcecode value="self.tile_width=self.DEFAULT_TILE_WIDTH&#xa;self.tile_height=self.DEFAULT_TILE_HEIGHT&#xa;self.horizontal_offset=0&#xa;self.vertical_offset=0&#xa;self.horizontal_padding=0&#xa;self.vertical_padding=0&#xa;if kwargs:&#xa;  if'tile_width'in kwargs.keys():&#xa;    self.tile_width=int(kwargs['tile_width'])&#xa;&#xa;  if'tile_height'in kwargs.keys():&#xa;    self.tile_height=int(kwargs['tile_height'])&#xa;&#xa;  if'horizontal_offset'in kwargs.keys():&#xa;    self.horizontal_offset=int(kwargs['horizontal_offset'])&#xa;&#xa;  if'vertical_offset'in kwargs.keys():&#xa;    self.vertical_offset=int(kwargs['vertical_offset'])&#xa;&#xa;  if'horizontal_padding'in kwargs.keys():&#xa;    self.horizontal_padding=int(kwargs['horizontal_padding'])&#xa;&#xa;  if'vertical_padding'in kwargs.keys():&#xa;    self.vertical_padding=int(kwargs['vertical_padding'])&#xa;&#xa;&#xa;" id="pQddUzqykokz"/>
    <sourcecode value="return(isinstance(other,TileProperties)and&#xa;(self.tile_width==other.tile_width)and(self.tile_height==other.tile_height)and(self.horizontal_offset==other.horizontal_offset)and(self.vertical_offset==other.vertical_offset)and(self.horizontal_padding==other.horizontal_padding))" id="btGKh0JRuMD7"/>
    <sourcecode value="new_background_list=[]&#xa;yaml_repr=yaml.load(yaml_stream)&#xa;if yaml_repr:&#xa;  for top_level in yaml_repr:&#xa;    kwargs=:&#xa;&#xa;&#xa;    bkg_name=top_level.keys()[0]&#xa;    bkg_yaml=top_level[bkg_name]&#xa;    if'filename'in bkg_yaml.keys():&#xa;      kwargs['filename']=bkg_yaml['filename']&#xa;&#xa;    if'smooth_edges'in bkg_yaml.keys():&#xa;      kwargs['smooth_edges']=(bkg_yaml['smooth_edges']==True)&#xa;&#xa;    if'preload_texture'in bkg_yaml.keys():&#xa;      kwargs['preload_texture']=(bkg_yaml['preload_texture']is True)&#xa;&#xa;    if'transparent'in bkg_yaml.keys():&#xa;      kwargs['transparent']=(bkg_yaml['transparent']is True)&#xa;&#xa;    if'tileset'in bkg_yaml.keys():&#xa;      kwargs['tileset']=(bkg_yaml['tileset']is True)&#xa;&#xa;    if'tile_width'in bkg_yaml.keys():&#xa;      kwargs['tile_width']=bkg_yaml['tile_width']&#xa;&#xa;    if'tile_height'in bkg_yaml.keys():&#xa;      kwargs['tile_height']=bkg_yaml['tile_height']&#xa;&#xa;    if'horizontal_offset'in bkg_yaml.keys():&#xa;      kwargs['horizontal_offset']=bkg_yaml['horizontal_offset']&#xa;&#xa;    if'vertical_offset'in bkg_yaml.keys():&#xa;      kwargs['vertical_offset']=bkg_yaml['vertical_offset']&#xa;&#xa;    if'horizontal_padding'in bkg_yaml.keys():&#xa;      kwargs['horizontal_padding']=bkg_yaml['horizontal_padding']&#xa;&#xa;    if'vertical_padding'in bkg_yaml.keys():&#xa;      kwargs['vertical_padding']=bkg_yaml['vertical_padding']&#xa;&#xa;    new_background_list.append(Background(bkg_name,**kwargs))&#xa;&#xa;&#xa;return new_background_list&#xa;" id="moiJ0GzWeKJA"/>
    <sourcecode value="self.name=name&#xa;self.filename=&quot;&quot;&#xa;self.tile_properties=TileProperties(**kwargs)&#xa;self.smooth_edges=False&#xa;self.preload_texture=False&#xa;self.transparent=False&#xa;self.tileset=False&#xa;self.image=None&#xa;self.image_size=(0,0)&#xa;self.tile_rect=None&#xa;self.tile_row_spacing=-1&#xa;self.max_tile_rows=-1&#xa;self.tile_col_spacing=-1&#xa;self.max_tile_cols=-1&#xa;if kwargs:&#xa;  if'filename'in kwargs:&#xa;    self.filename=kwargs['filename']&#xa;&#xa;  if'smooth_edges'in kwargs:&#xa;    self.smooth_edges=(kwargs['smooth_edges']==True)&#xa;&#xa;  if'preload_texture'in kwargs:&#xa;    self.preload_texture=(kwargs['preload_texture']==True)&#xa;&#xa;  if'transparent'in kwargs:&#xa;    self.transparent=(kwargs['transparent']==True)&#xa;&#xa;  if'tileset'in kwargs:&#xa;    self.tileset=(kwargs['tileset']==True)&#xa;&#xa;&#xa;" id="Di7CP2pfA9Q0"/>
    <sourcecode value="if self.filename and self.preload_texture and self.check_filename():&#xa;  self.load_graphic()&#xa;&#xa;" id="tLnFqDi3j2yB"/>
    <sourcecode value="if len(self.filename)>0 and self.check_filename():&#xa;  img=pygame.image.load(self.filename).convert_alpha()&#xa;  if not self.transparent:&#xa;    backfill=pygame.Surface.copy(img)&#xa;    backfill.fill((0,0,0))&#xa;    backfill.blit(img,(0,0))&#xa;    self.image=backfill&#xa;&#xa;  else:&#xa;    self.image=img&#xa;&#xa;  self.image_size=self.image.get_size()&#xa;&#xa;" id="mN8CmLbdfOqV"/>
    <sourcecode value="if(len(self.filename)>0)and self.check_filename():&#xa;  if not self.image:&#xa;    self.load_graphic()&#xa;&#xa;  if not self.tileset:&#xa;    screen.blit(self.image,xy_offset)&#xa;&#xa;  else:&#xa;    if not self.tile_rect:&#xa;      self.tile_rect=pygame.Rect(0,0,&#xa;      self.tile_properties.tile_width,self.tile_properties.tile_height)&#xa;    if self.tile_row_spacing&lt;0:&#xa;      self.tile_row_spacing=(self.tile_properties.tile_height+&#xa;      self.tile_properties.vertical_padding)&#xa;    if self.max_tile_rows&lt;0:&#xa;      self.max_tile_rows=((screen.get_height()-xy_offset[1]-&#xa;      self.tile_properties.vertical_offset)/self.tile_row_spacing)&#xa;    if self.tile_col_spacing&lt;0:&#xa;      self.tile_col_spacing=(self.tile_properties.tile_width+&#xa;      self.tile_properties.horizontal_padding)&#xa;    if self.max_tile_cols&lt;0:&#xa;      self.max_tile_cols=((screen.get_width()-&#xa;      self.tile_properties.horizontal_offset)/self.tile_col_spacing)&#xa;    for col in range(self.max_tile_cols):&#xa;      for row in range(self.max_tile_rows):&#xa;        position_x=(self.tile_properties.horizontal_offset+&#xa;        xy_offset[0]+col*(self.tile_properties.tile_width+self.tile_properties.horizontal_padding))position_y=(self.tile_properties.vertical_offset+&#xa;        xy_offset[1]+row*(self.tile_properties.tile_height+self.tile_properties.vertical_padding))screen.blit(self.image,(position_x,position_y),&#xa;        area=self.tile_rect)&#xa;&#xa;&#xa;&#xa;" id="wcrFqSJcnPoX"/>
    <sourcecode value="if not isinstance(self.filename,str):&#xa;  raise BackgroundException(&quot;Background error ({}): filename '{}' is not a string&quot;.format(str(self),&#xa;  self.filename))&#xa;elif len(self.filename)==0:&#xa;  raise BackgroundException(&quot;Background error ({}): filename is empty&quot;.format(str(self),&#xa;  self.filename))&#xa;if len(self.filename)>0:&#xa;  if not os.path.exists(self.filename):&#xa;    raise BackgroundException(&quot;Background error ({}): filename '{}' not found&quot;.format(str(self),&#xa;    self.filename))&#xa;&#xa;return True&#xa;" id="k7vJYUQRTYLj"/>
    <sourcecode value="return(isinstance(other,Background)and&#xa;(self.name==other.name)and(self.filename==other.filename)and(self.smooth_edges==other.smooth_edges)and(self.preload_texture==other.preload_texture)and(self.transparent==other.transparent)and(self.tileset==other.tileset)and(self.tile_properties==other.tile_properties))" id="01yukEYUKUls"/>
    <sourcecode value="return&quot;&lt;{} name='{}'>&quot;.format(type(self).__name__,self.name)" id="f45zWrpS27pk"/>
    <sourcecode value="self.vars=:&#xa;&#xa;&#xa;if initial_symbols is not None:&#xa;  self.vars.update(initial_symbols)&#xa;&#xa;self.sym_change_callback=sym_change_callback&#xa;self.consts=:&#xa;&#xa;&#xa;" id="YIsG18AaQ1Lr"/>
    <sourcecode value="constlist=list(self.consts.keys())&#xa;constlist.sort()&#xa;print(&quot;constants:&quot;)&#xa;for const in constlist:&#xa;  print(&quot;{} = {}&quot;.format(const,self.consts[const]))&#xa;&#xa;varlist=list(self.vars.keys())&#xa;varlist.sort()&#xa;print(&quot;variables:&quot;)&#xa;for var in varlist:&#xa;  print(&quot;{} = {}&quot;.format(var,self.vars[var]))&#xa;&#xa;" id="K13i2MZimwpS"/>
    <sourcecode value="return self.vars.keys()+self.consts.keys()&#xa;" id="j1uBDncVmdEo"/>
    <sourcecode value="if item not in self.consts:&#xa;  self.vars[item]=val&#xa;  if self.sym_change_callback:&#xa;    self.sym_change_callback(item,val)&#xa;&#xa;&#xa;" id="4ElGmOYTNSda"/>
    <sourcecode value="new_val=self.DEFAULT_UNINITIALIZED_VALUE&#xa;if item in self.consts:&#xa;  new_val=self.consts[item]&#xa;&#xa;elif item in self.vars:&#xa;  new_val=self.vars[item]&#xa;&#xa;return new_val&#xa;" id="nhdkz9OZp53I"/>
    <sourcecode value="self.consts[constant_name]=constant_value&#xa;" id="nKhaOkq9Gdp2"/>
    <sourcecode value="super(LanguageEngine,self).__init__(type(self).__name__)&#xa;self.global_symbol_table=SymbolTable()&#xa;self.global_symbol_table.set_constant('pi',math.pi)&#xa;self.global_symbol_table.set_constant('e',math.e)&#xa;self.functionmap=:&#xa;&#xa;  'distance'::&#xa;    &quot;arglist&quot;:&#xa;      [:&#xa;        &quot;type&quot;:&quot;number&quot;,&quot;name&quot;:&quot;start&quot;&#xa;      ,:&#xa;        &quot;type&quot;:&quot;number&quot;,&quot;name&quot;:&quot;end&quot;&#xa;      ],&#xa;      'block':[&quot;_start&quot;,&quot;_end&quot;,&quot;operator.sub&quot;,&quot;operator.abs&quot;,&quot;_return&quot;]&#xa;&#xa;    ,&#xa;&#xa;  'randint'::&#xa;    &quot;arglist&quot;:&#xa;      [:&#xa;        &quot;type&quot;:&quot;number&quot;,&quot;name&quot;:&quot;max&quot;&#xa;      ],&#xa;      'block':[0,&quot;_max&quot;,&quot;random.randint&quot;,&quot;_return&quot;]&#xa;&#xa;    ,&#xa;&#xa;  'time'::&#xa;    &quot;arglist&quot;:[],&#xa;    'block':[&quot;time.time&quot;,&quot;_return&quot;]&#xa;  ,'debug'::&#xa;    &quot;argslist&quot;:&#xa;      [:&#xa;        &quot;type&quot;:&quot;string&quot;,&quot;name&quot;:&quot;debug_str&quot;&#xa;      ],&#xa;      'block':[]&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;self.code_blocks=:&#xa;&#xa;&#xa;self.local_tables=:&#xa;&#xa;&#xa;" id="8fiBL21N159k"/>
    <sourcecode value="self.info(&quot;Register handle '{}'&quot;.format(block_name))&#xa;self.debug(&quot;  code block:\n{}&quot;.format(code_string))&#xa;if block_name in self.code_blocks.keys():&#xa;  raise DuplicateCodeBlockError(&quot;Attempt to register another code block named '{}'&quot;.format(block_name),&#xa;  self.error)&#xa;module_context=imp.new_module('{}_module'.format(block_name))&#xa;code_block_runnable=CodeBlockGenerator.wrap_code_block(&#xa;block_name,module_context,code_string,self.functionmap)code_block_runnable.load(['operator','math'])&#xa;self.code_blocks[block_name]=code_block_runnable&#xa;" id="zCmgE86KnpV6"/>
    <sourcecode value="self.info(&quot;Execute code with handle '{}'&quot;.format(block_name))&#xa;if block_name not in self.code_blocks:&#xa;  raise UnknownCodeBlockError(&quot;Attempt to execute unknown code block named '{}'&quot;.format(block_name),&#xa;  self.error)&#xa;if local_symbol_table:&#xa;  if block_name not in self.local_tables:&#xa;    self.local_tables[block_name]=:&#xa;&#xa;&#xa;&#xa;  self.local_tables[block_name].update(local_symbol_table)&#xa;&#xa;symtables=:&#xa;  'globals':self.global_symbol_table,&#xa;  'locals':local_symbol_table&#xa;self.code_blocks[block_name].module_context.run(symtables)&#xa;" id="ipEOKpSU4wLE"/>
    <sourcecode value="self.info(&quot;Unregister code block handle '{}'&quot;.format(block_name))&#xa;if block_name in self.code_blocks.keys():&#xa;  del(self.code_blocks[block_name])&#xa;&#xa;" id="njxsrZfNwvpQ"/>
    <sourcecode value="super(EventEngine,self).__init__(type(self).__name__)&#xa;self.event_handlers=:&#xa;&#xa;&#xa;self.event_queues=:&#xa;&#xa;&#xa;" id="fpp41JTErMKv"/>
    <sourcecode value="self.debug(&quot;register_event_handler({}, &lt;hdlr>):&quot;.format(event_name))&#xa;if event_name not in self.event_handlers.keys():&#xa;  self.info(&quot;  add event handler;self.event_handlers[event_name]=[event_handler]&#xa;&#xa;else:&#xa;  idx=len(self.event_handlers[event_name])+1&#xa;  self.info(&quot;  add event handler;self.event_handlers[event_name].append(event_handler)&#xa;&#xa;" id="ivGILDQ00G50"/>
    <sourcecode value="self.debug(&quot;unregister_event_handler({}, &lt;hdlr>):&quot;.format(event_name))&#xa;if event_name in self.event_handlers.keys():&#xa;  if event_handler in self.event_handlers[event_name]:&#xa;    self.info(&quot;  remove event handler for {}&quot;.format(event_name))&#xa;    self.event_handlers[event_name].remove(event_handler)&#xa;    if len(self.event_handlers[event_name])==0:&#xa;      self.info(&quot;  delete last event handler for {}&quot;.format(event_name))&#xa;      del(self.event_handlers[event_name])&#xa;&#xa;&#xa;&#xa;" id="furi9wAERdUa"/>
    <sourcecode value="self.debug(&quot;queue_event({}):&quot;.format(an_event))&#xa;ename=an_event.name&#xa;if ename not in self.event_queues.keys():&#xa;  self.debug(&quot;  queue event;self.event_queues[ename]=[an_event]&#xa;&#xa;else:&#xa;  idx=len(self.event_queues[ename])+1&#xa;  self.debug(&quot;  queue event;self.event_queues[ename].append(an_event)&#xa;&#xa;" id="afkawNHpyGnf"/>
    <sourcecode value="self.debug(&quot;transmit_event({}):&quot;.format(event_name))&#xa;if event_name in self.event_handlers.keys():&#xa;  queue_len=len(self.event_queues[event_name])&#xa;  if queue_len>0:&#xa;    self.debug(&quot;  found {:d} queued {} events&quot;.format(queue_len,&#xa;    event_name))&#xa;  for queued in self.event_queues[event_name]:&#xa;    for idx,handler in enumerate(self.event_handlers[event_name]):&#xa;      self.debug(&quot;    call handler;handler(queued)&#xa;&#xa;&#xa;  self.debug(&quot;  delete queued {} events&quot;.format(event_name))&#xa;  del(self.event_queues[event_name])&#xa;&#xa;" id="Zf9Vvx9lh97E"/>
    <sourcecode value="self.debug(&quot;transmit_event_type({})&quot;.format(event_type))&#xa;for event_name in event_type.HANDLED_EVENTS:&#xa;  self.transmit_event(event_name)" id="wBkcIroSuGso"/>
    <sourcecode value="cls.action_type_registry.append(actiontype)&#xa;" id="gK8ct9gIeImp"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if len(cls.action_type_registry)>0:&#xa;  for atype in cls.action_type_registry:&#xa;    if action_name in atype.HANDLED_ACTIONS:&#xa;      return atype(action_name,settings,**kwargs)&#xa;&#xa;&#xa;&#xa;raise ActionException(&quot;Action '{}' is unknown&quot;.format(action_name))&#xa;" id="bg0hfla5BII2"/>
    <sourcecode value="self.name=action_name&#xa;self.action_data=:&#xa;&#xa;&#xa;self.action_constraints=:&#xa;&#xa;&#xa;self.runtime_data=:&#xa;&#xa;&#xa;args=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  args.update(settings_dict)&#xa;&#xa;args.update(kwargs)&#xa;data_map,data_constraints=self.collect_parameter_yaml_info(action_yaml+self.COMMON_DATA_YAML)&#xa;if action_name in data_map:&#xa;  self.action_data.update(data_map[action_name])&#xa;&#xa;if action_name in data_constraints:&#xa;  self.action_constraints.update(data_constraints[action_name])&#xa;&#xa;minfo=self.IF_STATEMENT_RE.search(action_name)&#xa;if minfo is not None or(action_name==&quot;else&quot;):&#xa;  self.nest_adjustment=&quot;nest_next_action&quot;&#xa;  if minfo:&#xa;    self.action_result=True&#xa;&#xa;&#xa;else:&#xa;  self.nest_adjustment=None&#xa;&#xa;for param in args:&#xa;  if param in self.action_data:&#xa;    self.action_data[param]=args[param]&#xa;&#xa;&#xa;" id="Bh0Jyx7yTv9F"/>
    <sourcecode value="action_map=:&#xa;&#xa;&#xa;action_constraints=:&#xa;&#xa;&#xa;yaml_obj=yaml.load(yaml_str)&#xa;common_params=yaml_obj['common_parameters']&#xa;for action in yaml_obj['actions'].keys():&#xa;  action_map[action]=:&#xa;&#xa;&#xa;  for par in yaml_obj['actions'][action]:&#xa;    par_val=yaml_obj['actions'][action][par]&#xa;    if not isinstance(par_val,dict):&#xa;      minfo=self.COMMON_RE.search(par_val)&#xa;      if minfo:&#xa;        action_map[action][par]=common_params[par_val]['default']&#xa;        action_constraints[action]=common_params[par_val]&#xa;&#xa;&#xa;    elif len(par_val.keys())>0:&#xa;      if par_val['type']==&quot;from_list&quot;:&#xa;        if not par_val['default']in par_val['accepted_list']:&#xa;          print(&quot;WARNING: default value '{}' is not in the list of accepted values '{}'&quot;.format(&#xa;          par_val['default'],par_val['accepted_list']))&#xa;&#xa;      action_map[action][par]=par_val['default']&#xa;      action_constraints[action]=par_val&#xa;&#xa;&#xa;&#xa;parm_info=(action_map,action_constraints)&#xa;return parm_info&#xa;" id="UTkRioNvzGW4"/>
    <sourcecode value="if(not isinstance(self.action_data[field_name],str)or&#xa;(self.action_data[field_name][0]!='=')):&#xa;  return self.action_data[field_name]&#xa;&#xa;exp_name=&quot;{}_block&quot;.format(field_name)&#xa;sym_name=&quot;intern_{}_{}&quot;.format(field_name,abs(hash(field_name)))&#xa;if exp_name not in self.runtime_data.keys():&#xa;  exp_id=&quot;{}_{}_{}&quot;.format(self.name,&#xa;  re.sub(&quot;\.&quot;,&quot;_&quot;,field_name),id(self))expression_code=&quot;{} = {}&quot;.format(sym_name,&#xa;  self.action_data[field_name][1:])language_engine.register_code_block(exp_id,expression_code)&#xa;  self.runtime_data[exp_name]=exp_id&#xa;&#xa;local_symbols=SymbolTable(symbols)&#xa;language_engine.execute_code_block(self.runtime_data[exp_name],&#xa;local_symbols)return local_symbols[sym_name]&#xa;" id="FvjCADGRcN3E"/>
    <sourcecode value="indent_str=&quot; &quot;*indent&#xa;yaml_str=&quot;{}{}:\n&quot;.format(indent_str,self.name)&#xa;keylist=self.action_data.keys()&#xa;keylist.sort()&#xa;for act_key in keylist:&#xa;  value=self.action_data[act_key]&#xa;  value_str=&quot;{}&quot;.format(value)&#xa;  minfo=self.TUPLE_RE.search(value_str)&#xa;  if minfo:&#xa;    value_str=&quot;[{}]&quot;.format(minfo.group(1))&#xa;&#xa;  val_lines=value_str.splitlines()&#xa;  if len(val_lines)>1:&#xa;    yaml_str+=&quot;{}  {}: |\n&quot;.format(indent_str,act_key)&#xa;    for vline in val_lines:&#xa;      yaml_str+=&quot;{}    {}\n&quot;.format(indent_str,vline)&#xa;&#xa;&#xa;  else:&#xa;    yaml_str+=&quot;{}  {}: {}\n&quot;.format(indent_str,act_key,&#xa;    value_str)&#xa;&#xa;return yaml_str&#xa;" id="KgQbgLyuWnj4"/>
    <sourcecode value="val=None&#xa;if itemname not in self.action_data:&#xa;  if itemname not in self.runtime_data:&#xa;    raise KeyError(&quot;{}&quot;.format(itemname))&#xa;&#xa;  val=self.runtime_data[itemname]&#xa;&#xa;else:&#xa;  val=self.action_data[itemname]&#xa;&#xa;return val&#xa;" id="5Llb8UdlDdPC"/>
    <sourcecode value="if itemname not in self.action_data:&#xa;  self.runtime_data[itemname]=value&#xa;&#xa;self.action_data[itemname]=value&#xa;" id="69JKkhUhqJaQ"/>
    <sourcecode value="return&quot;&lt;{} '{}': {}>&quot;.format(type(self).__name__,self.name,&#xa;self.action_data)" id="kovEK2bx3u1i"/>
    <sourcecode value="return(isinstance(other,Action)and&#xa;(self.name==other.name)and(self.action_data==other.action_data))" id="XJyEh15Pnzd7"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;CodeAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;self.CODE_ACTION_DATA_YAML,settings,**kwargs)" id="t3rr4f7XlMrC"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;AccountingAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;self.ACCOUNTING_ACTION_DATA_YAML,settings,**kwargs)" id="ZtWHRZtcXe9D"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;QuestionAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;&quot;&quot;,settings,**kwargs)" id="mveUJNLU3Eg9"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;ResourceAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;&quot;&quot;,settings,**kwargs)" id="A4F0jJdHzamp"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;InfoAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;self.INFO_ACTION_DATA_YAML,settings,**kwargs)" id="MaffYuCf93lM"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;MotionAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;self.MOTION_ACTION_DATA_YAML,settings,**kwargs)" id="SwmUDttDOFEC"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;ObjectAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;self.OBJECT_ACTION_DATA_YAML,settings,**kwargs)" id="7mdXHw3dLPm8"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;OtherAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;self.OTHER_ACTION_DATA_YAML,settings,**kwargs)if action_name==&quot;start_of_block&quot;:&#xa;  self.nest_adjustment=&quot;nest_until_block_end&quot;&#xa;&#xa;elif action_name==&quot;end_of_block&quot;:&#xa;  self.nest_adjustment=&quot;block_end&quot;&#xa;&#xa;" id="oYBSJ2akGXw0"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;ParticleAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&quot;&quot;,&#xa;settings,**kwargs)" id="WTr8p8MFYq9y"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;SoundAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;self.SOUND_ACTION_DATA_YAML,settings,**kwargs)" id="JKFrwQaveTVi"/>
    <sourcecode value="settings=:&#xa;&#xa;&#xa;if settings_dict is not None:&#xa;  settings=settings_dict&#xa;&#xa;if action_name not in self.HANDLED_ACTIONS:&#xa;  raise ActionException(&quot;TimingAction: Unknown action '{}'&quot;.format(action_name))&#xa;&#xa;Action.__init__(self,action_name,&#xa;self.TIMING_ACTION_DATA_YAML,settings,**kwargs)" id="sYmQNbpR5PEd"/>
    <sourcecode value="cls.event_type_registry.append(eventtype)&#xa;" id="727PeeJznVIL"/>
    <sourcecode value="if event_name in cls.HANDLED_EVENTS:&#xa;  return True&#xa;&#xa;return False&#xa;" id="RlRWZwxydbmD"/>
    <sourcecode value="instance_params=:&#xa;&#xa;&#xa;if event_params is not None:&#xa;  instance_params.update(event_params)&#xa;&#xa;if len(cls.event_type_registry)>0:&#xa;  for atype in cls.event_type_registry:&#xa;    if atype.find_event_by_name(event_name):&#xa;      return atype(event_name,instance_params)&#xa;&#xa;&#xa;&#xa;raise UnknownEventError(&quot;Event '{}' is unknown&quot;.format(event_name))&#xa;" id="rbj5B66d7SdB"/>
    <sourcecode value="self.name=event_name&#xa;ev_params=:&#xa;&#xa;&#xa;if event_params is not None:&#xa;  ev_params.update(event_params)&#xa;&#xa;self.event_params=ev_params&#xa;" id="rB7AbDeASlm8"/>
    <sourcecode value="if item_name in self.event_params:&#xa;  return self.event_params[item_name]&#xa;&#xa;else:&#xa;  raise KeyError(&quot;No parameter '{}' found in event&quot;)&#xa;&#xa;" id="0UhSETYg3NN4"/>
    <sourcecode value="self.event_params[item_name]=val&#xa;" id="KWeLt1OAIclq"/>
    <sourcecode value="event_param_strs=[]&#xa;ev_str=&quot;&quot;&#xa;ev_parms_sorted=self.event_params.keys()&#xa;ev_parms_sorted.sort()&#xa;for evparam in ev_parms_sorted:&#xa;  event_param_strs.append(&quot;{}={}&quot;.format(evparam,self.event_params[evparam]))&#xa;&#xa;if len(event_param_strs)>0:&#xa;  ev_str=&quot; &quot;&#xa;  ev_str+=&quot;,&quot;.join(event_param_strs)&#xa;&#xa;return ev_str&#xa;" id="LriUm8CyiQz9"/>
    <sourcecode value="return(&quot;&lt;{} \&quot;{}\&quot;{}>&quot;.format(self.__class__.__name__,&#xa;self.name,self.repr_event_strings()))" id="DgDyfesyVaSF"/>
    <sourcecode value="if event_name not in self.HANDLED_EVENTS:&#xa;  raise UnknownEventError(&quot;AlarmEvent: Unknown event '{}'&quot;.format(event_name))&#xa;&#xa;Event.__init__(self,event_name,event_params)&#xa;" id="hcFQbIU84P0o"/>
    <sourcecode value="ev_name=&quot;collision&quot;&#xa;obj_name=&quot;&quot;&#xa;minfo=cls.COLLISION_RE.search(event_name)&#xa;if minfo:&#xa;  obj_name=minfo.group(1)&#xa;&#xa;else:&#xa;  raise UnknownEventError(&quot;CollisionEvent: Invalid event '{}'&quot;.format(event_name))&#xa;&#xa;ev_info=(ev_name,obj_name)&#xa;return ev_info&#xa;" id="TDqNtnQZa2IS"/>
    <sourcecode value="try:&#xa;  ev_info=cls.find_collision_event(event_name)&#xa;&#xa;except UnknownEventError:&#xa;  return False&#xa;&#xa;return True&#xa;" id="iwx9Czo62eAX"/>
    <sourcecode value="Event.__init__(self,event_name,event_params)&#xa;ev_info=CollisionEvent.find_collision_event(event_name)&#xa;self.collision_object_name=ev_info[1]&#xa;" id="klUBajI9wG7B"/>
    <sourcecode value="return(&quot;&lt;{} vs \&quot;{}\&quot;{}>&quot;.format(self.__class__.__name__,&#xa;self.collision_object_name,self.repr_event_strings()))" id="tj4ylIaI59sr"/>
    <sourcecode value="if event_name not in self.HANDLED_EVENTS:&#xa;  raise UnknownEventError(&quot;DrawEvent: Unknown event '{}'&quot;.format(event_name))&#xa;&#xa;Event.__init__(self,event_name,event_params)&#xa;" id="zs4WLVctYQQ6"/>
    <sourcecode value="key_event_type=None&#xa;base_event_name=&quot;&quot;&#xa;up_minfo=cls.KEYBOARD_UP_SUFFIX_RE.search(event_name)&#xa;dn_minfo=cls.KEYBOARD_DOWN_SUFFIX_RE.search(event_name)&#xa;if up_minfo:&#xa;  base_event_name=up_minfo.group(1)&#xa;  key_event_type=&quot;up&quot;&#xa;&#xa;elif dn_minfo:&#xa;  base_event_name=dn_minfo.group(1)&#xa;  key_event_type=&quot;down&quot;&#xa;&#xa;else:&#xa;  base_event_name=str(event_name)&#xa;  key_event_type=&quot;down&quot;&#xa;&#xa;if base_event_name not in cls.HANDLED_EVENTS:&#xa;  raise(UnknownEventError(&quot;KeyEvent: key named '{}' unknown&quot;.format(base_event_name)))&#xa;&#xa;if len(base_event_name)==0:&#xa;  raise UnknownEventError(&quot;KeyEvent: '{}' is invalid&quot;.format(event_name))&#xa;&#xa;else:&#xa;  event_info=(base_event_name,key_event_type)&#xa;&#xa;return event_info&#xa;" id="jdYIokqhEr6o"/>
    <sourcecode value="try:&#xa;  ev_info=cls.find_key_event(event_name)&#xa;&#xa;except UnknownEventError:&#xa;  return False&#xa;&#xa;return True&#xa;" id="MrGgtog90lep"/>
    <sourcecode value="self.key_event_type=&quot;up&quot;&#xa;Event.__init__(self,event_name,event_params)&#xa;ev_info=self.find_key_event(event_name)&#xa;self.name=ev_info[0]&#xa;self.key_event_type=ev_info[1]&#xa;" id="WTzLE9eveYRV"/>
    <sourcecode value="return(&quot;&lt;{} '{}' when {}{}>&quot;.format(self.__class__.__name__,&#xa;self.name,self.key_event_type,self.repr_event_strings()))" id="q8I1iZTdpdbQ"/>
    <sourcecode value="if event_name not in self.HANDLED_EVENTS:&#xa;  raise UnknownEventError(&quot;MouseEvent: Unknown event '{}'&quot;.format(event_name))&#xa;&#xa;Event.__init__(self,event_name,event_params)&#xa;" id="cJ4zbWMdOoyp"/>
    <sourcecode value="if event_name not in self.HANDLED_EVENTS:&#xa;  raise UnknownEventError(&quot;ObjectStateEvent: Unknown event '{}'&quot;.format(event_name))&#xa;&#xa;Event.__init__(self,event_name,event_params)&#xa;" id="an6jhTtlMhuf"/>
    <sourcecode value="if event_name not in self.HANDLED_EVENTS:&#xa;  raise UnknownEventError(&quot;OtherEvent: Unknown event '{}'&quot;.format(event_name))&#xa;&#xa;Event.__init__(self,event_name,event_params)&#xa;" id="EQL4iCzYZn9E"/>
    <sourcecode value="if event_name not in self.HANDLED_EVENTS:&#xa;  raise UnknownEventError(&quot;StepEvent: Unknown event '{}'&quot;.format(event_name))&#xa;&#xa;Event.__init__(self,event_name,event_params)&#xa;" id="KAWVWtTNkZGA"/>
    <sourcecode value="new_sequence=None&#xa;if len(sequence_repr)>0:&#xa;  new_sequence=ActionSequence()&#xa;  for action_hash in sequence_repr:&#xa;    action_name=action_hash.keys()[0]&#xa;    action_params=:&#xa;&#xa;&#xa;    if action_hash[action_name]and len(action_hash[action_name])>0:&#xa;      action_params.update(action_hash[action_name])&#xa;&#xa;    next_action=Action.get_action_instance_by_action_name(action_name,**action_params)&#xa;    new_sequence.append_action(next_action)&#xa;&#xa;&#xa;return new_sequence&#xa;" id="M4KnFo2XfJYk"/>
    <sourcecode value="self.main_block=ActionSequenceBlock(None,True)&#xa;" id="WhCC0iwDVgAN"/>
    <sourcecode value="statement=ActionSequenceStatement.get_sequence_item_from_action(action)&#xa;self.main_block.add_statement(statement)&#xa;" id="BbXaMDFsuR2v"/>
    <sourcecode value="for next_action in self.main_block.walk():&#xa;  if next_action is not None:&#xa;    yield next_action&#xa;&#xa;&#xa;" id="8Wj0vlt4gzfJ"/>
    <sourcecode value="action_list=self.main_block.get_action_list()&#xa;sequence_yaml=&quot;&quot;&#xa;for action in action_list:&#xa;  action_yaml_lines=action.to_yaml(indent).splitlines()&#xa;  for idx,aline in enumerate(action_yaml_lines):&#xa;    if idx==0:&#xa;      sline=str(aline)&#xa;      minfo=self.FIRST_ITEM_RE.search(aline)&#xa;      if minfo:&#xa;        mpos=minfo.start(1)&#xa;        sline=&quot;{}- {}&quot;.format(aline[0:mpos],aline[mpos:])&#xa;&#xa;      else:&#xa;        sline=&quot;- {}&quot;.format(aline)&#xa;&#xa;      sequence_yaml+=&quot;{}\n&quot;.format(sline)&#xa;&#xa;    else:&#xa;      sequence_yaml+=&quot;  {}\n&quot;.format(aline)&#xa;&#xa;&#xa;&#xa;return sequence_yaml&#xa;" id="IpvniCdogMpb"/>
    <sourcecode value="self.main_block.pretty_print()&#xa;" id="RUF7p2gtjKdR"/>
    <sourcecode value="return&quot;{}&quot;.format(str(self.main_block))" id="jJGRb5q0X66M"/>
    <sourcecode value="ActionSequenceStatement.__init__(self,action)&#xa;self.is_block=True&#xa;self.is_block_closed=False&#xa;self.contained_statements=[]&#xa;self.main_block=main_block&#xa;" id="azbQDOdftgdB"/>
    <sourcecode value="if statement.action and statement.action.nest_adjustment==&quot;block_end&quot;:&#xa;  if not self.main_block:&#xa;    self.is_block_closed=True&#xa;    self.contained_statements.append(statement)&#xa;&#xa;  else:&#xa;    raise(ActionSequenceStatementException(&quot;block_end cannot be added to a main block&quot;))&#xa;&#xa;&#xa;elif isinstance(statement,ActionSequenceConditionalElse):&#xa;  raise(ActionSequenceStatementException(&quot;Cannot add an 'else' statement without an 'if' statement.&quot;))&#xa;&#xa;else:&#xa;  self.contained_statements.append(statement)&#xa;&#xa;" id="2DN2pGFja8K3"/>
    <sourcecode value="if not isinstance(statement,ActionSequenceStatement):&#xa;  raise(TypeError(&quot;{} is not an ActionSequenceStatement&quot;.format(str(statement))))&#xa;&#xa;last_statement=None&#xa;if len(self.contained_statements)>0:&#xa;  last_statement=self.contained_statements[-1]&#xa;&#xa;if last_statement and last_statement.is_conditional:&#xa;  if last_statement.add_statement(statement):&#xa;    return&#xa;&#xa;&#xa;if last_statement and last_statement.is_block:&#xa;  if not last_statement.is_block_closed:&#xa;    last_statement.add_statement(statement)&#xa;    return&#xa;&#xa;&#xa;self._append_statement(statement)&#xa;" id="qzJR5dSeNVfB"/>
    <sourcecode value="this_action=[]&#xa;if not self.main_block:&#xa;  this_action=[self.action]&#xa;&#xa;contained_list=[]&#xa;if self.contained_statements:&#xa;  for contained in self.contained_statements:&#xa;    contained_list+=contained.get_action_list()&#xa;&#xa;&#xa;return this_action+contained_list&#xa;" id="X0buVG6TVTzb"/>
    <sourcecode value="new_indent=indent&#xa;if not self.main_block:&#xa;  ActionSequenceStatement.pretty_print(self,indent)&#xa;  new_indent+=1&#xa;&#xa;if self.contained_statements:&#xa;  for contained in self.contained_statements:&#xa;    if contained.action.nest_adjustment!=&quot;block_end&quot;:&#xa;      contained.pretty_print(new_indent)&#xa;&#xa;    else:&#xa;      contained.pretty_print(indent)&#xa;&#xa;&#xa;&#xa;" id="nT8fPfcwdDp9"/>
    <sourcecode value="for statement in self.contained_statements:&#xa;  if statement.action is None:&#xa;    continue&#xa;&#xa;  if statement.action.nest_adjustment==&quot;block_end&quot;:&#xa;    return&#xa;&#xa;  if statement.is_conditional or statement.is_block:&#xa;    for sub_statement_action in statement.walk():&#xa;      yield sub_statement_action&#xa;&#xa;&#xa;  else:&#xa;    yield statement.action&#xa;&#xa;&#xa;" id="OU22hr97kj26"/>
    <sourcecode value="repr_str=&quot;&lt;{}:\n&quot;.format(type(self).__name__)&#xa;for statement in self.contained_statements:&#xa;  repr_str+=&quot;{}\n&quot;.format(statement)&#xa;&#xa;repr_str+=&quot;>&quot;&#xa;return repr_str&#xa;" id="xryfaqkxKkxz"/>
    <sourcecode value="ActionSequenceStatement.__init__(self,action)&#xa;self.is_conditional=True&#xa;self.contained_statement=None&#xa;" id="93R9YjlvGsLH"/>
    <sourcecode value="found_place=True&#xa;if not isinstance(statement,ActionSequenceStatement):&#xa;  raise(ActionSequenceStatementException(&quot;{} is not a ActionSequenceStatement&quot;.format(str(statement))))&#xa;&#xa;if not self.contained_statement:&#xa;  self.contained_statement=statement&#xa;&#xa;elif(self.contained_statement.is_block and&#xa;not self.contained_statement.is_block_closed):&#xa;  self.contained_statement.add_statement(statement)&#xa;&#xa;elif(self.contained_statement.is_conditional and&#xa;self.contained_statement.add_statement(statement)):&#xa;  pass&#xa;&#xa;else:&#xa;  found_place=False&#xa;&#xa;return found_place&#xa;" id="UF2k8N0ZLtEk"/>
    <sourcecode value="contained_list=[]&#xa;if self.contained_statement:&#xa;  contained_list=self.contained_statement.get_action_list()&#xa;&#xa;return[self.action]+contained_list&#xa;" id="KPDfIQOkucaM"/>
    <sourcecode value="ActionSequenceStatement.pretty_print(self,indent)&#xa;if self.contained_statement:&#xa;  self.contained_statement.pretty_print(indent+1)&#xa;&#xa;" id="AKbjJ1NeQZHj"/>
    <sourcecode value="repr_str=&quot;&lt;{}:\n&quot;.format(type(self).__name__)&#xa;repr_str+=&quot;\t{}>&quot;.format(self.contained_statement)&#xa;return repr_str&#xa;" id="Zx3zWJgTw6MC"/>
    <sourcecode value="ActionSequenceConditional.__init__(self,action)&#xa;" id="RIAWl67ewdky"/>
    <sourcecode value="ActionSequenceConditional.__init__(self,action)&#xa;self.else_condition=None&#xa;" id="UgwerYZXibVo"/>
    <sourcecode value="found_place=True&#xa;if not ActionSequenceConditional.add_statement(self,statement):&#xa;  if(not self.else_condition and&#xa;  isinstance(statement,ActionSequenceConditionalElse)):&#xa;    self.else_condition=statement&#xa;&#xa;  elif(self.else_condition and self.else_condition.is_conditional and&#xa;  self.else_condition.add_statement(statement)):&#xa;    pass&#xa;&#xa;  elif(self.else_condition and self.else_condition.is_block and&#xa;  not self.else_condition.is_block_closed):&#xa;    self.else_condition.add_statement(statement)&#xa;&#xa;  else:&#xa;    found_place=False&#xa;&#xa;&#xa;return found_place&#xa;" id="t6Ybh1PVS0aj"/>
    <sourcecode value="ActionSequenceConditional.pretty_print(self,indent)&#xa;if self.else_condition:&#xa;  self.else_condition.pretty_print(indent)&#xa;&#xa;" id="u7AK7i2FIGL1"/>
    <sourcecode value="yield self.action&#xa;conditional_path=None&#xa;if self.action.action_result:&#xa;  if not self.contained_statement:&#xa;    return&#xa;&#xa;  conditional_path=self.contained_statement&#xa;&#xa;else:&#xa;  if not self.else_condition:&#xa;    return&#xa;&#xa;  conditional_path=self.else_condition.contained_statement&#xa;&#xa;if conditional_path.is_block or conditional_path.is_conditional:&#xa;  for action in conditional_path.walk():&#xa;    yield action&#xa;&#xa;&#xa;else:&#xa;  yield conditional_path.action&#xa;&#xa;" id="inC14V2ft7Hr"/>
    <sourcecode value="contained_list=ActionSequenceConditional.get_action_list(self)&#xa;else_list=[]&#xa;if self.else_condition:&#xa;  else_list=self.else_condition.get_action_list()&#xa;&#xa;return contained_list+else_list&#xa;" id="v51m5nhoatpc"/>
    <sourcecode value="repr_str=&quot;&lt;{} {}:\n&quot;.format(type(self).__name__,self.action)&#xa;repr_str+=&quot;\t{}\n&quot;.format(self.contained_statement)&#xa;if self.else_condition:&#xa;  repr_str+=&quot;{}>&quot;.format(self.else_condition)&#xa;&#xa;return repr_str&#xa;" id="NAWOMhxGly0q"/>
    <sourcecode value="new_action=None&#xa;if isinstance(action,str):&#xa;  try:&#xa;    new_action=Action.get_action_instance_by_action_name(action,**kwargs)&#xa;&#xa;  except ActionException:&#xa;    raise ActionSequenceStatementException(&quot;'{}' is not a known action&quot;.format(action))&#xa;&#xa;&#xa;else:&#xa;  new_action=action&#xa;&#xa;if not isinstance(new_action,Action):&#xa;  raise ActionSequenceStatementException(&quot;'{}' is not a recognized action&quot;)&#xa;&#xa;if new_action.nest_adjustment:&#xa;  if new_action.name==&quot;else&quot;:&#xa;    return ActionSequenceConditionalElse(new_action)&#xa;&#xa;  minfo=Action.IF_STATEMENT_RE.search(new_action.name)&#xa;  if minfo:&#xa;    return ActionSequenceConditionalIf(new_action)&#xa;&#xa;  if new_action.nest_adjustment!=&quot;block_end&quot;:&#xa;    return ActionSequenceBlock(new_action)&#xa;&#xa;&#xa;return ActionSequenceStatement(new_action)&#xa;" id="RConblgDPhMP"/>
    <sourcecode value="self.is_block=False&#xa;self.is_conditional=False&#xa;self.action=action&#xa;" id="89aQe4WkO2XY"/>
    <sourcecode value="return[self.action]&#xa;" id="DD3ZDY6vuEVy"/>
    <sourcecode value="indent_string=&quot;\t&quot;*indent&#xa;print(&quot;{}{}&quot;.format(indent_string,self.action.name))&#xa;" id="VPVAWCSiNTHa"/>
    <sourcecode value="return&quot;&lt;{}: {}>&quot;.format(type(self).__name__,self.action)&#xa;" id="rDkEg2meNFYz"/>
    <sourcecode value="super(CodeBlock,self).__init__(type(self).__name__)&#xa;self.name=name&#xa;self.module_context=module_context&#xa;self.outer_block=[]&#xa;self.inner_blocks=[]&#xa;self.stack=self.outer_block&#xa;self.frame=self.outer_block&#xa;self.scratch=[]&#xa;self.inner_block_count=0&#xa;self.func_name=None&#xa;self.functionmap=:&#xa;&#xa;&#xa;self.function_name=''&#xa;if funcmap is not None:&#xa;  self.functionmap.update(funcmap)&#xa;&#xa;self.astree=astree&#xa;" id="PyIJZZZsFL0p"/>
    <sourcecode value="self.debug(&quot;add_to_func_map({})&quot;.format(str(func_map)))&#xa;self.functionmap.update(func_map)&#xa;" id="4n8R1pKm66nh"/>
    <sourcecode value="self.debug(&quot;push_assignment(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;assign_list=[]&#xa;global_prefix=&quot;&quot;&#xa;for assign_tok in toks.asList():&#xa;  for inner_item in assign_tok:&#xa;    if inner_item=='=':&#xa;      break&#xa;&#xa;    if inner_item==&quot;global&quot;:&#xa;      global_prefix=&quot;_&quot;&#xa;&#xa;    else:&#xa;      assign_list.append(&quot;{}_{}&quot;.format(global_prefix,&#xa;      inner_item))&#xa;&#xa;  break&#xa;&#xa;self.stack.append(assign_list+list(self.scratch)+['='])&#xa;self.debug(&quot;  assignment: {}&quot;.format(self.stack[-1]))&#xa;self.scratch=[]&#xa;" id="9SiFXTwM4qXP"/>
    <sourcecode value="self.debug(&quot;push_conditional_block(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;if self.inner_block_count>1:&#xa;  self.inner_block_count-=1&#xa;  self.inner_blocks[self.inner_block_count-1].append(list(self.stack))&#xa;  self.debug(&quot;  stack now points to inner block;self.stack=self.inner_blocks[self.inner_block_count-1]&#xa;  self.debug(&quot;  delete inner_blocks[{:d}]&quot;.format(self.inner_block_count))&#xa;  del(self.inner_blocks[self.inner_block_count])&#xa;&#xa;else:&#xa;  self.frame.append(list(self.stack))&#xa;  self.debug(&quot;  clear inner_blocks[0]&quot;)&#xa;  self.inner_block_count=0&#xa;  del(self.inner_blocks[0])&#xa;  self.stack=self.frame&#xa;  self.debug(&quot;  stack now points to outer block&quot;)&#xa;&#xa;" id="LeJGX5gtlQHG"/>
    <sourcecode value="self.debug(&quot;push_if_cond(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;if_statement=&quot;&quot;&#xa;for tok in toks:&#xa;  if_statement=&quot;_{}&quot;.format(tok)&#xa;  self.debug(&quot;  push if statement: {}&quot;.format(if_statement))&#xa;  break&#xa;&#xa;container_block=self.frame&#xa;if self.inner_block_count>0:&#xa;  container_block=self.inner_blocks[-1]&#xa;  self.debug(&quot;  container: inner block;&#xa;else:&#xa;  self.debug(&quot;  container: outer block&quot;)&#xa;  pass&#xa;&#xa;container_block.append(if_statement)&#xa;self.inner_block_count+=1&#xa;self.inner_blocks.append([])&#xa;self.debug(&quot;  stack now points at inner block;self.stack=self.inner_blocks[-1]&#xa;" id="zDoymtTQZolg"/>
    <sourcecode value="self.debug(&quot;push_comparison(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;self.debug(&quot;  append comparison {} to stack&quot;.format(str(self.scratch)))&#xa;self.stack.append(list(self.scratch))&#xa;self.scratch=[]&#xa;" id="H5OBMEqUUsCZ"/>
    <sourcecode value="self.debug(&quot;count_function_args(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;func_call=False&#xa;func_name=&quot;&quot;&#xa;skip_count=0&#xa;arg_count=0&#xa;tok_idx=0&#xa;in_string=False&#xa;for tok in toks:&#xa;  if tok_idx==0:&#xa;    if tok in self.functionmap:&#xa;      func_call=True&#xa;      func_name=str(tok)&#xa;      tok_idx+=1&#xa;      continue&#xa;&#xa;    else:&#xa;      self.error(&quot;{} at {}: Unknown function call '{}'&quot;.format(parsestr,loc,tok))&#xa;      raise ParseFatalException(parsestr,loc=loc,msg=&quot;Unknown function call '{}'&quot;.format(tok))&#xa;&#xa;&#xa;  if tok==&quot;\&quot;&quot;:&#xa;    in_string=not in_string&#xa;&#xa;  if func_call:&#xa;    if arg_count==0:&#xa;      arg_count=1&#xa;&#xa;    self.debug(&quot;  check {} call vs function map&quot;.format(tok))&#xa;    if len(self.functionmap[func_name][&quot;arglist&quot;])==0:&#xa;      self.error(&quot;{} at {}: Too many arguments to function \&quot;{}\&quot;&quot;.format(parsestr,loc,func_name))&#xa;      raise ParseFatalException(parsestr,loc=loc,&#xa;      msg=&quot;Too many arguments to function \&quot;{}\&quot;&quot;.format(func_name))&#xa;    if tok in self.functionmap and not in_string:&#xa;      skips=len(self.functionmap[tok][&quot;arglist&quot;])&#xa;      if skips>0:&#xa;        skips-=1&#xa;&#xa;      skip_count+=skips&#xa;      self.debug(&quot;  skip call to {} with {} args&quot;.format(tok,len(self.functionmap[tok])))&#xa;&#xa;    if tok==',':&#xa;      if skip_count>0:&#xa;        skip_count-=1&#xa;        self.debug(&quot;  Found ',' and decrease skip count to {}&quot;.format(skip_count))&#xa;&#xa;      else:&#xa;        arg_count+=1&#xa;        self.debug(&quot;  Found ',' and increase arg count to {}&quot;.format(arg_count))&#xa;&#xa;&#xa;&#xa;  tok_idx+=1&#xa;&#xa;if func_call:&#xa;  if arg_count&lt;len(self.functionmap[func_name][&quot;arglist&quot;]):&#xa;    self.error(&quot;{} at {}: Too few arguments to function \&quot;{}\&quot;&quot;.format(parsestr,loc,func_name))&#xa;    raise ParseFatalException(parsestr,loc=loc,&#xa;    msg=&quot;Too few arguments to function \&quot;{}\&quot;&quot;.format(func_name))&#xa;  elif arg_count>len(self.functionmap[func_name][&quot;arglist&quot;]):&#xa;    self.error(&quot;{} at {}: Too many arguments to function \&quot;{}\&quot;&quot;.format(parsestr,loc,func_name))&#xa;    raise ParseFatalException(parsestr,loc=loc,&#xa;    msg=&quot;Too many arguments to function \&quot;{}\&quot;&quot;.format(func_name))&#xa;&#xa;" id="wMSfqKjY2Jlb"/>
    <sourcecode value="self.debug(&quot;pushFunctionArgs(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;func_name=None&#xa;arg_with_type=None&#xa;arg_list=[]&#xa;for tok in toks:&#xa;  for item in tok:&#xa;    if item==',':&#xa;      continue&#xa;&#xa;    if not func_name:&#xa;      func_name=str(item)&#xa;      self.debug(&quot;  New function: {}&quot;.format(func_name))&#xa;      if func_name in self.functionmap:&#xa;        self.error(&quot;{} at {}: Redefinition of existing function '{}'&quot;.format(parsestr,loc,func_name))&#xa;        raise ParseFatalException(parsestr,loc=loc,&#xa;        msg=&quot;Redefinition of existing function '{}'&quot;.format(func_name))&#xa;      continue&#xa;&#xa;    if func_name:&#xa;      if not arg_with_type:&#xa;        typename=str(item)&#xa;        if typename not in[&quot;void&quot;,&quot;number&quot;,&quot;string&quot;]:&#xa;          self.error(&#xa;          &quot;{} at {}: Missing type name in declaration of function '{}'&quot;.format(parsestr,loc,func_name))raise ParseFatalException(parsestr,loc=loc,&#xa;          msg=&quot;Missing type name in declaration of function '{}'&quot;.format(func_name))&#xa;        arg_with_type=:&#xa;          &quot;type&quot;:typename&#xa;&#xa;        if typename==&quot;void&quot;:&#xa;          arg_list.append(dict(arg_with_type))&#xa;&#xa;&#xa;      else:&#xa;        if arg_with_type[&quot;type&quot;]==&quot;void&quot;:&#xa;          self.error(&#xa;          &quot;{} at {}: Extraneous token following void in declaration of function '{}'&quot;.format(parsestr,loc,func_name))raise ParseFatalException(parsestr,loc=loc,&#xa;          msg=&quot;Extraneous token following void in declaration of function '{}'&quot;.format(func_name))&#xa;        arg_with_type[&quot;name&quot;]=str(item)&#xa;        arg_list.append(dict(arg_with_type))&#xa;        arg_with_type=None&#xa;&#xa;&#xa;&#xa;&#xa;self.debug(&quot;  Function args: {}&quot;.format(str(arg_list)))&#xa;if arg_list[0][&quot;type&quot;]!=&quot;void&quot;:&#xa;  self.functionmap[func_name]=:&#xa;    &quot;arglist&quot;:arg_list&#xa;&#xa;&#xa;else:&#xa;  self.functionmap[func_name]=:&#xa;    &quot;arglist&quot;:[]&#xa;&#xa;&#xa;self.functionmap[func_name][&quot;block&quot;]=[]&#xa;self.stack=self.functionmap[func_name][&quot;block&quot;]&#xa;self.frame=self.functionmap[func_name][&quot;block&quot;]&#xa;self.function_name=func_name&#xa;" id="7mYwtlbLipmv"/>
    <sourcecode value="self.debug(&quot;push_func_block(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;self.reduce_block(self.frame)&#xa;func_loc=[0,0]&#xa;param_list=[fparam[&quot;name&quot;]for fparam in self.functionmap[self.function_name][&quot;arglist&quot;]]&#xa;function_body=self.to_python_block(self.frame,func_loc,self.function_name)&#xa;param_list.append(&quot;count=0&quot;)&#xa;func_lines=[&quot;def userfunc_{}(_symbols, {}):&quot;.format(self.function_name,&quot;,&quot;.join(param_list))]&#xa;func_lines+=[&#xa;&quot;  if (count > 100):&quot;,&quot;    raise CodeBlockRuntimeError(\&quot;{}: Call stack depth limit exceeded\&quot;)&quot;.format(self.function_name)]&#xa;func_lines+=function_body&#xa;ret_minfo=self.RETURN_RE.match(func_lines[-1])&#xa;if not ret_minfo:&#xa;  func_lines.append(&quot;  return {:d}&quot;.format(-sys.maxint-1))&#xa;&#xa;function_code=&quot;\n&quot;.join(func_lines)&#xa;self.info(&quot;  Function code:\n{}&quot;.format(function_code))&#xa;self.functionmap[self.function_name]['compiled']=compile(function_code,&#xa;&quot;&lt;c_{}>&quot;.format(self.function_name),'exec')self.function_name=&quot;None&quot;&#xa;self.stack=self.outer_block&#xa;self.frame=self.outer_block&#xa;" id="1SPe4V6PBuSh"/>
    <sourcecode value="self.debug(&quot;push_atom(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;tok_n=0&#xa;add_not=False&#xa;add_tok=None&#xa;is_string=False&#xa;for tok in toks:&#xa;  if tok_n==0:&#xa;    if tok=='not':&#xa;      add_not=True&#xa;      tok_n+=1&#xa;      continue&#xa;&#xa;    elif tok.startswith('&quot;'):&#xa;      is_string=True&#xa;      add_tok=tok&#xa;      break&#xa;&#xa;    else:&#xa;      add_tok=tok&#xa;      break&#xa;&#xa;&#xa;  else:&#xa;    add_tok=tok&#xa;    break&#xa;&#xa;&#xa;func_call=False&#xa;if add_tok in self.functionmap:&#xa;  func_call=True&#xa;&#xa;if func_call:&#xa;  self.scratch+=infix_to_postfix.convert_infix_to_postfix([add_tok],&#xa;  self.OPERATOR_REPLACEMENTS)if add_not:&#xa;    self.scratch.append(&quot;operator.not_&quot;)&#xa;&#xa;&#xa;else:&#xa;  if add_not:&#xa;    self.debug(&quot;  not tokens:&quot;.format(toks.asList()))&#xa;&#xa;  if not is_string:&#xa;    self.scratch+=infix_to_postfix.convert_infix_to_postfix(toks.asList(),&#xa;    self.OPERATOR_REPLACEMENTS)&#xa;  else:&#xa;    self.scratch+=[&quot;str({})&quot;.format(&quot;&quot;.join(toks.asList()))]&#xa;&#xa;&#xa;" id="Bqk5T22ZMNpa"/>
    <sourcecode value="self.debug(&quot;push_first(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;self.scratch+=infix_to_postfix.convert_infix_to_postfix(toks[0],&#xa;self.OPERATOR_REPLACEMENTS)self.debug(&quot;  op + scratch is now: {}&quot;.format(str(self.scratch)))&#xa;" id="dLoPfKhysUem"/>
    <sourcecode value="self.debug(&quot;push_u_inus(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;for t in toks:&#xa;  if t=='-':&#xa;    self.scratch.append('unary -')&#xa;&#xa;  else:&#xa;    break&#xa;&#xa;&#xa;" id="vT98BI0D5p5L"/>
    <sourcecode value="self.debug(&quot;push_return(&lt;code str>, loc={}, toks={}):&quot;.format(loc,toks))&#xa;self.stack.append(list(self.scratch)+[&quot;_return&quot;])&#xa;self.scratch=[]&#xa;" id="TZWDII5J2BNb"/>
    <sourcecode value="self.debug(&quot;    reduce_line(code_line={}):&quot;.format(str(code_line)))&#xa;changed_line=True&#xa;while changed_line:&#xa;  line_idx=0&#xa;  changed_line=False&#xa;  while line_idx&lt;len(code_line):&#xa;    check_op=&quot;{}&quot;.format(code_line[line_idx])&#xa;    if check_op in self.OPERATOR_FUNCTIONS:&#xa;      op_len=len(self.OPERATOR_FUNCTIONS[check_op])&#xa;      if line_idx>=op_len:&#xa;        all_numbers=True&#xa;        for rev in range(line_idx-op_len,line_idx):&#xa;          rev_item=code_line[rev]&#xa;          if not isinstance(rev_item,numbers.Number):&#xa;            all_numbers=False&#xa;            break&#xa;&#xa;&#xa;        if all_numbers:&#xa;          op_result=self.execute_operation(check_op,&#xa;          code_line[line_idx-op_len:line_idx])code_line[line_idx-op_len]=op_result&#xa;          for dead_idx in range(op_len):&#xa;            del(code_line[line_idx-op_len+1])&#xa;&#xa;          changed_line=True&#xa;          break&#xa;&#xa;&#xa;&#xa;    elif check_op==&quot;unary -&quot;:&#xa;      if line_idx>0:&#xa;        if isinstance(code_line[line_idx-1],numbers.Number):&#xa;          code_line[line_idx-1]*=-1&#xa;          del(code_line[line_idx])&#xa;          changed_line=True&#xa;          break&#xa;&#xa;&#xa;&#xa;    line_idx+=1&#xa;&#xa;&#xa;" id="AG561oJ5eoAd"/>
    <sourcecode value="self.debug(&quot;  reduce_block(block={}):&quot;.format(block))&#xa;block_idx=0&#xa;while block_idx&lt;len(block):&#xa;  code_line=block[block_idx]&#xa;  if isinstance(code_line,str)and code_line in['_if','_elseif','_else']:&#xa;    self.reduce_block(block[block_idx+1])&#xa;    block_idx+=2&#xa;    continue&#xa;&#xa;  if isinstance(code_line,list):&#xa;    self.reduce_line(code_line)&#xa;&#xa;  block_idx+=1&#xa;&#xa;" id="FwGtiOWOBQh2"/>
    <sourcecode value="self.debug(&quot;reduce():&quot;)&#xa;self.reduce_block(self.outer_block)&#xa;" id="pEF1dx3PSn9r"/>
    <sourcecode value="self.debug(&quot;    to_python_line(code_line={}, loc={}, func_name={}):&quot;.format(&#xa;str(code_line),loc,func_name))op_stack=[]&#xa;symbol=None&#xa;start_pos=0&#xa;type_upgrade=False&#xa;if code_line[-1]=='=':&#xa;  symbol=code_line[0][1:]&#xa;  start_pos=1&#xa;&#xa;for op_idx in range(start_pos,len(code_line)):&#xa;  op=code_line[op_idx]&#xa;  if isinstance(op,int):&#xa;    op_stack.append(:&#xa;      &quot;type&quot;:&quot;int&quot;,&quot;val&quot;:str(op)&#xa;    )&#xa;&#xa;  elif isinstance(op,float):&#xa;    op_stack.append(:&#xa;      &quot;type&quot;:&quot;float&quot;,&quot;val&quot;:str(op)&#xa;    )&#xa;&#xa;  else:&#xa;    sym_minfo=self.SYMBOL_RE.match(op)&#xa;    if sym_minfo:&#xa;      opname=op[1:]&#xa;&#xa;    else:&#xa;      opname=op&#xa;&#xa;    if opname in self.OPERATOR_FUNCTIONS or opname in self.functionmap:&#xa;      arg_count=0&#xa;      opcall=opname&#xa;      func_params=[]&#xa;      if opname in self.OPERATOR_FUNCTIONS:&#xa;        arg_count=len(self.OPERATOR_FUNCTIONS[opname])&#xa;&#xa;      else:&#xa;        arg_count=len(self.functionmap[opname][&quot;arglist&quot;])&#xa;        opcall=&quot;userfunc_{}&quot;.format(opname)&#xa;        func_params=[&quot;_symbols&quot;]&#xa;&#xa;      id_start=len(op_stack)-arg_count&#xa;      id_end=len(op_stack)&#xa;      if id_start&lt;0:&#xa;        raise OpStackUnderflowError(&#xa;        &quot;Stack underflow at line {} when assembling the line:\n{}&quot;.format(loc[0],code_line),self.error)&#xa;      res_type=&quot;int&quot;&#xa;      last_type=None&#xa;      type_upgrade=False&#xa;      params=list(op_stack[id_start:id_end])&#xa;      if opcall not in self.CONDITIONALS:&#xa;        for arghash in params:&#xa;          if arghash[&quot;type&quot;]==&quot;float&quot;:&#xa;            res_type=&quot;float&quot;&#xa;&#xa;          elif arghash[&quot;type&quot;]==&quot;string&quot;:&#xa;            res_type=&quot;str&quot;&#xa;&#xa;          if not last_type:&#xa;            last_type=res_type&#xa;&#xa;          elif last_type!=res_type:&#xa;            type_upgrade=True&#xa;&#xa;&#xa;&#xa;      else:&#xa;        res_type=&quot;bool&quot;&#xa;&#xa;      for dead_idx in range(arg_count):&#xa;        del(op_stack[-1])&#xa;&#xa;      param_list=func_params+[param['val']for param in params]&#xa;      if func_name and not(opcall in self.OPERATOR_FUNCTIONS):&#xa;        param_list.append(&quot;count+1&quot;)&#xa;&#xa;      op_stack.append(:&#xa;        &quot;type&quot;:res_type,&quot;val&quot;:&quot;{}({})&quot;.format(opcall,&quot;,&quot;.join(param_list))&#xa;      )&#xa;      if type_upgrade:&#xa;        prev_val=op_stack[-1][&quot;val&quot;]&#xa;        prev_val=&quot;{}({})&quot;.format(res_type,prev_val)&#xa;&#xa;&#xa;    elif opname==&quot;unary -&quot;:&#xa;      if len(op_stack)>0:&#xa;        last_op_val=op_stack[-1][&quot;val&quot;]&#xa;        last_op_type=op_stack[-1][&quot;type&quot;]&#xa;        if last_op_type in[&quot;int&quot;,&quot;float&quot;]:&#xa;          op_stack.insert(-1,&#xa;:&#xa;            &quot;type&quot;:last_op_type,&quot;val&quot;:&quot;operator.mul(-1, {})&quot;.format(last_op_val)&#xa;          )del(op_stack[-1])&#xa;&#xa;&#xa;&#xa;    elif opname in[&quot;and&quot;,&quot;or&quot;]:&#xa;      id_start=len(op_stack)-2&#xa;      id_end=len(op_stack)&#xa;      if id_start&lt;0:&#xa;        raise OpStackUnderflowError(&#xa;        &quot;Stack underflow at line {} when assembling the line:\n{}&quot;.format(loc[0],code_line),self.error)&#xa;      params=list(op_stack[id_start:id_end])&#xa;      for dead_idx in range(2):&#xa;        del(op_stack[-1])&#xa;&#xa;      op_stack.append(&#xa;:&#xa;        &quot;type&quot;:&quot;bool&quot;,&quot;val&quot;:&quot;(({}) {} ({}))&quot;.format(params[0]['val'],opname,params[1]['val'])&#xa;      )&#xa;    elif opname=='=':&#xa;      last_op_val=op_stack[-1][&quot;val&quot;]&#xa;      last_op_val=&quot;update_symbol(_symbols, '{}', {})&quot;.format(symbol,last_op_val)&#xa;      op_stack[-1]['val']=last_op_val&#xa;      break&#xa;&#xa;    elif opname.startswith(&quot;str(&quot;):&#xa;      op_stack.append(:&#xa;        &quot;type&quot;:&quot;str&quot;,&quot;val&quot;:opname&#xa;      )&#xa;&#xa;    elif opname=='return':&#xa;      last_op_val=op_stack[-1][&quot;val&quot;]&#xa;      last_op_val=&quot;return {}&quot;.format(last_op_val)&#xa;      op_stack[-1]['val']=last_op_val&#xa;      break&#xa;&#xa;    else:&#xa;      func_arg=False&#xa;      if func_name:&#xa;        func_arg_names=[narg[&quot;name&quot;]for narg in self.functionmap[func_name][&quot;arglist&quot;]]&#xa;        if opname in func_arg_names:&#xa;          func_arg=True&#xa;&#xa;&#xa;      if not func_arg:&#xa;        op_stack.append(:&#xa;          &quot;type&quot;:&quot;int&quot;,&#xa;          &quot;val&quot;:&quot;get_symbol(_symbols, '{}')&quot;.format(opname)&#xa;        )&#xa;      else:&#xa;        op_stack.append(:&#xa;          &quot;type&quot;:&quot;int&quot;,&#xa;          &quot;val&quot;:&quot;{}&quot;.format(opname)&#xa;        )&#xa;&#xa;&#xa;&#xa;if len(op_stack)>1:&#xa;  raise OpStackOverflowError(&quot;Stack overflow at line {} when assembling the line:\n{}&quot;.format(&#xa;  loc[0],code_line),self.error)&#xa;self.debug(&quot;      Result of {}: {}&quot;.format(str(code_line),op_stack))&#xa;python_code_line=&quot;{}{}&quot;.format(' '*loc[1],op_stack[-1]['val'])&#xa;loc[0]+=1&#xa;return python_code_line&#xa;" id="cO5nrneg0tfd"/>
    <sourcecode value="self.debug(&quot;  to_python_block(block={}, loc={}, func_name={}):&quot;.format(str(block),&#xa;str(loc),func_name))python_code_lines=[]&#xa;loc[1]+=2&#xa;block_idx=0&#xa;while block_idx&lt;len(block):&#xa;  code_line=block[block_idx]&#xa;  if code_line in[&quot;_if&quot;,&quot;_elseif&quot;,&quot;_else&quot;]:&#xa;    cond_name=code_line[1:]&#xa;    python_code_lines+=self.to_python_conditional(cond_name,&#xa;    block[block_idx+1],loc,func_name)block_idx+=2&#xa;    continue&#xa;&#xa;  else:&#xa;    python_code_lines.append(self.to_python_line(code_line,loc,func_name))&#xa;    block_idx+=1&#xa;&#xa;&#xa;loc[1]-=2&#xa;return python_code_lines&#xa;" id="u7lFwllIULHZ"/>
    <sourcecode value="self.debug(&quot;  to_python_conditional(conditional_name={}, loc={}, func_name={}):&quot;.format(conditional_name,loc,&#xa;func_name))python_code_lines=[]&#xa;conditional_code=self.to_python_line(block[0],[loc[0],0],func_name)&#xa;py_cond_name=str(conditional_name)&#xa;block_start_idx=1&#xa;if conditional_name==&quot;elseif&quot;:&#xa;  py_cond_name=&quot;elif&quot;&#xa;&#xa;if py_cond_name in[&quot;if&quot;,&quot;elif&quot;]:&#xa;  python_code_lines.append(&quot;{}{} ({}):&quot;.format(' '*loc[1],&#xa;  py_cond_name,conditional_code))&#xa;else:&#xa;  python_code_lines.append(&quot;{}{}:&quot;.format(' '*loc[1],&#xa;  py_cond_name))block_start_idx=0&#xa;&#xa;python_code_lines+=self.to_python_block(block[block_start_idx:],loc,&#xa;func_name)return python_code_lines&#xa;" id="fBhTpqHkksYO"/>
    <sourcecode value="self.debug(&quot;to_python():&quot;)&#xa;code_loc=[0,0]&#xa;python_code=&quot;&quot;&#xa;if len(self.outer_block)>0:&#xa;  python_lines=[&quot;def run(_symbols):&quot;.format(self.name)]&#xa;  python_lines+=self.to_python_block(self.outer_block,code_loc)&#xa;  python_code=&quot;\n&quot;.join(python_lines)&#xa;&#xa;return python_code&#xa;" id="5Wkbj8vlmxWJ"/>
    <sourcecode value="self.debug(&quot;execute_operation(op_name={}, args={}):&quot;.format(op_name,args))&#xa;res=None&#xa;stargs=[str(a)for a in args]&#xa;result_type=int&#xa;for a in args:&#xa;  if not isinstance(a,int):&#xa;    result_type=type(a)&#xa;&#xa;&#xa;if op_name in self.OPERATOR_FUNCTIONS:&#xa;  eval_str=&quot;{}({})&quot;.format(op_name,&quot;,&quot;.join(stargs))&#xa;  res=eval(eval_str)&#xa;  if isinstance(res,bool):&#xa;    if res:&#xa;      res=1&#xa;&#xa;    else:&#xa;      res=0&#xa;&#xa;&#xa;  else:&#xa;    res=result_type(res)&#xa;&#xa;&#xa;return res&#xa;" id="eUb9EYvJ5esm"/>
    <sourcecode value="self.debug(&quot;load(import_list={}):&quot;.format(str(import_list)))&#xa;for userfunc in self.functionmap:&#xa;  if'compiled'in self.functionmap[userfunc]:&#xa;    exec self.functionmap[userfunc]['compiled']in self.module_context.__dict__&#xa;&#xa;&#xa;import_lines=&quot;from pygame_maker.logic.run_time_support import *\n&quot;&#xa;if import_list:&#xa;  import_lines+=&quot;import {}\n&quot;.format(&quot;,&quot;.join(import_list))&#xa;&#xa;exec_code=self.to_python()&#xa;if len(exec_code)>0:&#xa;  pyth_code=import_lines+exec_code&#xa;  self.info(&quot;  Run program:\n{}&quot;.format(pyth_code))&#xa;  exec pyth_code in self.module_context.__dict__&#xa;&#xa;" id="6wcoziJUjTXI"/>
    <sourcecode value="self.debug(&quot;run(sym_tables={}):&quot;.format(str(sym_tables)))&#xa;if&quot;run&quot;in self.module_context.__dict__:&#xa;  return self.module_context.run(sym_tables)&#xa;&#xa;" id="6QoqrL6QOVWb"/>
    <sourcecode value="self.debug(&quot;copy_to():&quot;)&#xa;other.outer_block=list(self.outer_block)&#xa;if self.astree:&#xa;  other.astree=list(self.astree)&#xa;&#xa;other.add_to_func_map(self.functionmap)&#xa;" id="WfZuA5VMQ0Wh"/>
    <sourcecode value="self.debug(&quot;clear():&quot;)&#xa;self.name=&quot;&quot;&#xa;self.scratch=[]&#xa;self.inner_blocks=[]&#xa;self.inner_block_count=0&#xa;self.outer_block=[]&#xa;self.frame=self.outer_block&#xa;self.stack=self.outer_block&#xa;self.func_name=None&#xa;self.functionmap=:&#xa;&#xa;&#xa;self.astree=None&#xa;" id="fpm5nGlucVIF"/>
    <sourcecode value="if module_context:&#xa;  cls.code_block.module_context=module_context&#xa;&#xa;if funcmap is not None:&#xa;  cls.code_block.add_to_func_map(funcmap)&#xa;&#xa;cls.bnf=BNF(cls.code_block)&#xa;try:&#xa;  astree=cls.bnf.parseString(source_code_str)&#xa;  cls.code_block.reduce()&#xa;  new_block=CodeBlock(program_name,module_context,&#xa;  funcmap,astree)cls.code_block.copy_to(new_block)&#xa;&#xa;finally:&#xa;  cls.code_block.clear()&#xa;&#xa;return new_block&#xa;" id="6nIMnCRgZz9R"/>
    <sourcecode value="if symname[0]==&quot;_&quot;:&#xa;  _symbols[&quot;globals&quot;][symname[1:]]=value&#xa;&#xa;else:&#xa;  if symname in _symbols[&quot;locals&quot;].keys()or symname not in _symbols[&quot;globals&quot;].keys():&#xa;    _symbols[&quot;locals&quot;][symname]=value&#xa;&#xa;  else:&#xa;    _symbols[&quot;globals&quot;][symname]=value&#xa;&#xa;&#xa;" id="SisRnUw5Ugbx"/>
    <sourcecode value="symval=DEFAULT_UNINITIALIZED_VALUE&#xa;if symname in _symbols[&quot;locals&quot;].keys():&#xa;  symval=_symbols[&quot;locals&quot;][symname]&#xa;&#xa;elif symname in _symbols[&quot;globals&quot;].keys():&#xa;  symval=_symbols[&quot;globals&quot;][symname]&#xa;&#xa;return symval&#xa;" id="HOn3cpdIqITW"/>
    <sourcecode value="return abs(start-end)&#xa;" id="Ux76vT6DEmT7"/>
    <sourcecode value="randrange=max_int&#xa;if max&lt;0:&#xa;  randrange=abs(max_int)&#xa;&#xa;val=random.randint(0,randrange)&#xa;if max&lt;0:&#xa;  val*=-1&#xa;&#xa;return val&#xa;" id="4jgFW7MjiM6R"/>
    <sourcecode value="return int(time.time())&#xa;" id="1qzcy2gDPS78"/>
    <sourcecode value="sys.stderr.write(&quot;{}\n&quot;.format(debug_str))&#xa;return debug_str" id="x5dBSns7NI96"/>
    <sourcecode value="cls.object_type_registry.append(object_type)&#xa;" id="mtVXkgoF9V3Q"/>
    <sourcecode value="kwargs=:&#xa;  &quot;event_action_sequences&quot;::&#xa;&#xa;&#xa;&#xa;if&quot;events&quot;in obj_yaml.keys():&#xa;  for ev_seq in obj_yaml[&quot;events&quot;]:&#xa;    game_engine.debug(&quot;{}: create event sequence from '{}'&quot;.format(obj_name,&#xa;    obj_yaml['events'][ev_seq]))kwargs[&quot;event_action_sequences&quot;][ev_seq]=\&#xa;    action_sequence.ActionSequence.load_sequence_from_yaml_obj(obj_yaml['events'][ev_seq])game_engine.debug(&quot;Loaded sequence {}:&quot;.format(ev_seq))&#xa;    if game_engine.logger.level&lt;=logging.DEBUG:&#xa;      kwargs[&quot;event_action_sequences&quot;][ev_seq].pretty_print()&#xa;&#xa;&#xa;&#xa;return kwargs&#xa;" id="9Wk5bRJP6svk"/>
    <sourcecode value="new_object_list=[]&#xa;for top_level in yaml_obj:&#xa;  obj_name=top_level.keys()[0]&#xa;  obj_yaml=top_level[obj_name]&#xa;  kwargs=cls.gen_kwargs_from_yaml_obj(obj_name,obj_yaml,game_engine)&#xa;  print(&quot;Creating new obj '{}' of type {}&quot;.format(obj_name,cls.__name__))&#xa;  new_cls=cls(obj_name,game_engine,**kwargs)&#xa;  new_object_list.append(new_cls)&#xa;&#xa;return new_object_list&#xa;" id="5DqPPPKdf8dZ"/>
    <sourcecode value="new_object_list=[]&#xa;yaml_repr=yaml.load(yaml_stream)&#xa;if yaml_repr is not None:&#xa;  for obj_type_name in yaml_repr.keys():&#xa;    for reg_obj_type in cls.object_type_registry:&#xa;      if obj_type_name==reg_obj_type.__name__:&#xa;        new_object_list+=reg_obj_type.load_from_yaml_obj(&#xa;        yaml_repr[obj_type_name],game_engine)break&#xa;&#xa;&#xa;&#xa;&#xa;return new_object_list&#xa;" id="Yk2giLB1yLzk"/>
    <sourcecode value="super(ObjectType,self).__init__(type(self).__name__)&#xa;self.debug(&quot;New object type {} named '{}', with args {}&quot;.format(&#xa;type(self).__name__,object_name,kwargs))if object_name:&#xa;  self.name=object_name&#xa;&#xa;else:&#xa;  self.name=self.DEFAULT_OBJECT_PREFIX&#xa;&#xa;self.game_engine=game_engine&#xa;self._id=0&#xa;self.instance_list=[]&#xa;self.group=[]&#xa;self.instance_delete_list=[]&#xa;self.handler_table=:&#xa;&#xa;  re.compile(&quot;^alarm(\d{1,2})$&quot;):self.handle_alarm_event,re.compile(&quot;^kb_(.*)$&quot;):self.handle_keyboard_event,re.compile(&quot;^mouse_(.*)$&quot;):self.handle_mouse_event,re.compile(&quot;^collision_(.*)$&quot;):self.handle_collision_event,re.compile(&quot;^([^_]+)_step$&quot;):self.handle_step_event,re.compile(&quot;^outside_room$&quot;):self.handle_instance_event,re.compile(&quot;^intersect_boundary$&quot;):self.handle_instance_event,re.compile(&quot;^create$&quot;):self.handle_create_event,re.compile(&quot;^destroy$&quot;):self.handle_destroy_event,re.compile(&quot;^draw$&quot;):self.draw,&#xa;&#xa;self.event_action_sequences=:&#xa;&#xa;&#xa;if((kwargs is not None)and(&quot;event_action_sequences&quot;in kwargs.keys())and&#xa;kwargs[&quot;event_action_sequences&quot;]):&#xa;  ev_dict=kwargs[&quot;event_action_sequences&quot;]&#xa;  for ev_name in ev_dict:&#xa;    if not isinstance(ev_dict[ev_name],action_sequence.ActionSequence):&#xa;      raise(ObjectTypeException(&quot;Event '{}' does not contain an ActionSequence&quot;,self.error))&#xa;&#xa;    self[ev_name]=ev_dict[ev_name]&#xa;&#xa;&#xa;" id="UDUYDEJV82oM"/>
    <sourcecode value="self.debug(&quot;add_instance_to_delete_list(instance={}):&quot;.format(instance))&#xa;self.instance_delete_list.append(instance)&#xa;" id="BtboWKbMLvKN"/>
    <sourcecode value="screen_dims=(screen.get_width(),screen.get_height())&#xa;new_instance=simple_object_instance.SimpleObjectInstance(self,&#xa;screen_dims,self._id,settings,**kwargs)self.instance_list.append(new_instance)&#xa;return new_instance&#xa;" id="69cQ4un1Vyt2"/>
    <sourcecode value="self.debug(&quot;create_instance(screen={}, settings={}, kwargs={}):&quot;.format(screen,settings,kwargs))&#xa;self.info(&quot;  Create instance of {} with args {}, {}&quot;.format(self.name,settings,kwargs))&#xa;new_instance=self.make_new_instance(screen,settings,**kwargs)&#xa;self._id+=1&#xa;self.game_engine.event_engine.queue_event(self.EVENT_NAME_OBJECT_HASH[&quot;create&quot;](&quot;create&quot;,&#xa;:&#xa;  &quot;type&quot;:self,&quot;instance&quot;:new_instance&#xa;))self.game_engine.event_engine.transmit_event('create')&#xa;return new_instance&#xa;" id="pv5n4xN11ghp"/>
    <sourcecode value="return[]&#xa;" id="9TrFEFPwXWbV"/>
    <sourcecode value="if len(self.instance_delete_list)>0:&#xa;  for doomed_instance in self.instance_delete_list:&#xa;    self.instance_list.remove(doomed_instance)&#xa;&#xa;  self.instance_delete_list=[]&#xa;&#xa;" id="TBpzgOU9YmUM"/>
    <sourcecode value="pass&#xa;" id="JCvySfrtpesV"/>
    <sourcecode value="return[]&#xa;" id="CqjzScUTy435"/>
    <sourcecode value="self.debug(&quot;execute_action_sequence(event={}, targets={}):&quot;.format(event,targets))&#xa;if event.name in self.event_action_sequences:&#xa;  self.info(&quot;  {}: Execute action sequence for event '{}'&quot;.format(self.name,event))&#xa;  with logging_object.Indented(self):&#xa;    self.info(&quot;  Event args: {}&quot;.format(event.event_params))&#xa;    for action in self.event_action_sequences[event.name].get_next_action():&#xa;      self.info(&quot;  Execute action {}&quot;.format(action))&#xa;      if(targets is not None)and len(targets)>0:&#xa;        self.info(&quot;  Apply to target(s) {}&quot;.format(str(targets)))&#xa;        for target in targets:&#xa;          if action.name not in self.game_engine.GAME_ENGINE_ACTIONS:&#xa;            target.execute_action(action,event)&#xa;&#xa;          else:&#xa;            self.game_engine.execute_action(action,event)&#xa;&#xa;&#xa;&#xa;      elif&quot;apply_to&quot;in action.action_data:&#xa;        affected_instance_list=self.get_applied_instance_list(action,event)&#xa;        self.info(&quot;  Apply to: {}&quot;.format(action,affected_instance_list))&#xa;        for target in affected_instance_list:&#xa;          target.execute_action(action,event)&#xa;&#xa;&#xa;      else:&#xa;        self.info(&quot;  call game engine execute_action for {}&quot;.format(action))&#xa;        self.game_engine.execute_action(action,event)&#xa;&#xa;&#xa;&#xa;&#xa;" id="MhFkkNt191iS"/>
    <sourcecode value="pass&#xa;" id="z5UKQVecM7fo"/>
    <sourcecode value="self.debug(&quot;handle_mouse_event(event={}):&quot;.format(event))&#xa;ret=False&#xa;gl_minfo=self.GLOBAL_MOUSE_RE.search(event.name)&#xa;if gl_minfo:&#xa;  self.execute_action_sequence(event)&#xa;  ret=True&#xa;&#xa;return ret&#xa;" id="8B1UHfHukqhU"/>
    <sourcecode value="self.debug(&quot;handle_keyboard_event(event={}):&quot;.format(event))&#xa;matched_seq=None&#xa;for ev_seq in self.event_action_sequences.keys():&#xa;  self.debug(&quot;  match key event {} vs {}&quot;.format(event.name,ev_seq))&#xa;  if ev_seq.find(event.name)==0:&#xa;    if(ev_seq==event.name)or ev_seq.endswith('_keydn'):&#xa;      if event.key_event_type==&quot;down&quot;:&#xa;        matched_seq=event.name&#xa;        break&#xa;&#xa;&#xa;    elif(ev_seq.endswith('_keyup')and&#xa;    (event.key_event_type==&quot;up&quot;)):&#xa;      matched_seq=event.name&#xa;      break&#xa;&#xa;&#xa;&#xa;if matched_seq:&#xa;  self.execute_action_sequence(event)&#xa;&#xa;" id="NsC7hrbaFstG"/>
    <sourcecode value="self.debug(&quot;handle_collision_event(event={}):&quot;.format(event))&#xa;self.execute_action_sequence(event)&#xa;" id="tir6YlMjlooB"/>
    <sourcecode value="self.debug(&quot;handle_step_event(event={}):&quot;.format(event))&#xa;self.execute_action_sequence(event,targets=[inst for inst in self.instance_list])&#xa;" id="wspfeeq3hrVP"/>
    <sourcecode value="self.debug(&quot;handle_alarm_event(event={}):&quot;.format(event))&#xa;" id="hurOjLllJIst"/>
    <sourcecode value="self.debug(&quot;handle_create_event(event={}):&quot;.format(event))&#xa;self.execute_action_sequence(event)&#xa;" id="70bPITIsC9Ja"/>
    <sourcecode value="self.debug(&quot;handle_destroy_event(event={}):&quot;.format(event))&#xa;self.execute_action_sequence(event)&#xa;" id="JP5VYN3XVTlJ"/>
    <sourcecode value="self.debug(&quot;_select_event_handler(event_name={}):&quot;.format(event_name))&#xa;hdlr=None&#xa;for ev_re in self.handler_table.keys():&#xa;  minfo=ev_re.match(event_name)&#xa;  if minfo:&#xa;    hdlr=self.handler_table[ev_re]&#xa;&#xa;&#xa;return hdlr&#xa;" id="VGpzjYGaEJ3x"/>
    <sourcecode value="self.debug(&quot;keys():&quot;)&#xa;return self.event_action_sequences.keys()&#xa;" id="Wt6iC9gRPgXf"/>
    <sourcecode value="self.debug(&quot;__getitem__(itemname={}):&quot;.format(itemname))&#xa;if itemname in self.event_action_sequences:&#xa;  return self.event_action_sequences[itemname]&#xa;&#xa;else:&#xa;  return None&#xa;&#xa;" id="YxhNtMtOFx6Q"/>
    <sourcecode value="self.debug(&quot;__setitem__(itemname={}, val={}):&quot;.format(itemname,val))&#xa;if not isinstance(itemname,str):&#xa;  raise(KeyError(&quot;Event action sequence keys must be strings&quot;,self.error))&#xa;&#xa;if not isinstance(val,action_sequence.ActionSequence):&#xa;  raise(ValueError(&quot;Supplied event action sequence is not an ActionSequence instance&quot;,&#xa;  self.error))&#xa;self.event_action_sequences[itemname]=val&#xa;new_handler=self._select_event_handler(itemname)&#xa;if new_handler:&#xa;  self.info(&quot;{}: Register handler for event '{}'&quot;.format(self.name,itemname))&#xa;  self.game_engine.event_engine.register_event_handler(itemname,new_handler)&#xa;&#xa;else:&#xa;  raise(ObjectTypeException(&quot;ObjectType does not yet handle '{}' events (NYI)&quot;.format(itemname),&#xa;  self.error))&#xa;" id="c5Dp2KF644YT"/>
    <sourcecode value="self.debug(&quot;__delitem__(itemname={}):&quot;.format(itemname))&#xa;if itemname in self.event_action_sequences:&#xa;  old_handler=self._select_event_handler(itemname)&#xa;  self.info(&quot;  {}: Unregister handler for event '{}'&quot;.format(self.name,itemname))&#xa;  self.game_engine.event_engine.unregister_event_handler(itemname,old_handler)&#xa;  del(self.event_action_sequences[itemname])&#xa;&#xa;" id="afOTxBfDWgQ9"/>
    <sourcecode value="new_sprite_list=[]&#xa;yaml_info=yaml.load(sprite_yaml_stream)&#xa;if yaml_info:&#xa;  for top_level in yaml_info:&#xa;    sprite_args=:&#xa;&#xa;&#xa;    sprite_name=top_level.keys()[0]&#xa;    yaml_info_hash=top_level[sprite_name]&#xa;    if'filename'in yaml_info_hash:&#xa;      sprite_args['filename']=yaml_info_hash['filename']&#xa;&#xa;    if'smooth_edges'in yaml_info_hash:&#xa;      sprite_args['smooth_edges']=yaml_info_hash['smooth_edges']&#xa;&#xa;    if'preload_texture'in yaml_info_hash:&#xa;      sprite_args['preload_texture']=yaml_info_hash['preload_texture']&#xa;&#xa;    if'transparency_pixel'in yaml_info_hash:&#xa;      sprite_args['transparency_pixel']=yaml_info_hash['transparency_pixel']&#xa;&#xa;    if'origin'in yaml_info_hash:&#xa;      sprite_args['origin']=yaml_info_hash['origin']&#xa;&#xa;    if'collision_type'in yaml_info_hash:&#xa;      sprite_args['collision_type']=yaml_info_hash['collision_type']&#xa;&#xa;    if'bounding_box_type'in yaml_info_hash:&#xa;      sprite_args['bounding_box_type']=yaml_info_hash['bounding_box_type']&#xa;&#xa;    if'manual_bounding_box_rect'in yaml_info_hash:&#xa;      sprite_args['manual_bounding_box_rect']=yaml_info_hash['manual_bounding_box_rect']&#xa;&#xa;    new_sprite_list.append(ObjectSprite(sprite_name,&#xa;    **sprite_args))new_sprite_list[-1].check()&#xa;&#xa;&#xa;return new_sprite_list&#xa;" id="qBq3liQzOCDb"/>
    <sourcecode value="self.name=self.DEFAULT_SPRITE_PREFIX&#xa;if name:&#xa;  self.name=name&#xa;&#xa;self.filename=&quot;&quot;&#xa;self.smooth_edges=False&#xa;self.preload_texture=True&#xa;self.transparency_pixel=False&#xa;self.origin=(0,0)&#xa;self._collision_type=&quot;rectangle&quot;&#xa;self.collision_mask=None&#xa;self.bounding_box_type=&quot;automatic&quot;&#xa;self.manual_bounding_box_rect=pygame.Rect(0,0,0,0)&#xa;if&quot;filename&quot;in kwargs:&#xa;  self.filename=kwargs[&quot;filename&quot;]&#xa;&#xa;if&quot;smooth_edges&quot;in kwargs:&#xa;  self.smooth_edges=kwargs[&quot;smooth_edges&quot;]&#xa;&#xa;if&quot;preload_texture&quot;in kwargs:&#xa;  self.preload_texture=kwargs[&quot;preload_texture&quot;]&#xa;&#xa;if&quot;transparency_pixel&quot;in kwargs:&#xa;  self.transparency_pixel=kwargs[&quot;transparency_pixel&quot;]&#xa;&#xa;if&quot;origin&quot;in kwargs:&#xa;  self.origin=kwargs[&quot;origin&quot;]&#xa;&#xa;if&quot;collision_type&quot;in kwargs:&#xa;  self.collision_type=kwargs[&quot;collision_type&quot;]&#xa;&#xa;if&quot;bounding_box_type&quot;in kwargs:&#xa;  self.bounding_box_type=kwargs[&quot;bounding_box_type&quot;]&#xa;&#xa;if(&quot;manual_bounding_box_rect&quot;in kwargs and&#xa;isinstance(kwargs[&quot;manual_bounding_box_rect&quot;],dict)):&#xa;  dim=kwargs[&quot;manual_bounding_box_rect&quot;]&#xa;  topp=0&#xa;  botmp=0&#xa;  leftp=0&#xa;  rightp=0&#xa;  if&quot;left&quot;in dim:&#xa;    try:&#xa;      leftp=int(dim[&quot;left&quot;])&#xa;&#xa;    except ValueError:&#xa;      pass&#xa;&#xa;&#xa;  if&quot;right&quot;in dim:&#xa;    try:&#xa;      rightp=int(dim[&quot;right&quot;])&#xa;&#xa;    except ValueError:&#xa;      pass&#xa;&#xa;&#xa;  if&quot;top&quot;in dim:&#xa;    try:&#xa;      topp=int(dim[&quot;top&quot;])&#xa;&#xa;    except ValueError:&#xa;      pass&#xa;&#xa;&#xa;  if&quot;bottom&quot;in dim:&#xa;    try:&#xa;      botmp=int(dim[&quot;bottom&quot;])&#xa;&#xa;    except ValueError:&#xa;      pass&#xa;&#xa;&#xa;  width=rightp-leftp&#xa;  height=botmp-topp&#xa;  self.manual_bounding_box_rect.left=leftp&#xa;  self.manual_bounding_box_rect.top=topp&#xa;  self.manual_bounding_box_rect.width=width&#xa;  self.manual_bounding_box_rect.height=height&#xa;&#xa;self.image=None&#xa;self.image_size=(0,0)&#xa;self.bounding_box_rect=None&#xa;" id="sUlBdu5l6BSK"/>
    <sourcecode value="return self._collision_type&#xa;" id="FxnL9DfYpzNS"/>
    <sourcecode value="if value not in self.COLLISION_TYPES:&#xa;  raise ObjectSpriteException(&quot;ObjectSprite error ({}):\;Unknown collision type'{}'&quot;.format(str(self), value));&#xa;self._collision_type=value&#xa;" id="den21d2GbpZi"/>
    <sourcecode value="if self.preload_texture:&#xa;  self.load_graphic()&#xa;&#xa;" id="s8QTvxByARoM"/>
    <sourcecode value="if len(self.filename)&lt;=0:&#xa;  raise ObjectSpriteException(&#xa;  &quot;ObjectSprite error ({}): Attempt to load image from empty filename&quot;.format(str(self)))&#xa;if self.check_filename():&#xa;  self.image=pygame.image.load(self.filename).convert_alpha()&#xa;  self.image_size=self.image.get_size()&#xa;  if self.bounding_box_type==&quot;automatic&quot;:&#xa;    self.bounding_box_rect=self.image.get_bounding_rect()&#xa;&#xa;  elif self.bounding_box_type==&quot;full_image&quot;:&#xa;    self.bounding_box_rect=self.image.get_rect()&#xa;&#xa;  else:&#xa;    self.bounding_box_rect=self.manual_bounding_box_rect&#xa;&#xa;&#xa;" id="dH6oW9yOHOrD"/>
    <sourcecode value="self.filename=&quot;&quot;&#xa;self.smooth_edges=False&#xa;self.preload_texture=True&#xa;self.transparency_pixel=False&#xa;self.origin=(0,0)&#xa;self.collision_type=&quot;rectangle&quot;&#xa;self.image=None&#xa;self.image_size=(0,0)&#xa;self.bounding_box_type=&quot;automatic&quot;&#xa;self.manual_bounding_box_rect=pygame.Rect(0,0,0,0)&#xa;" id="Y3Y79N8lcEZ8"/>
    <sourcecode value="if not isinstance(self.filename,str):&#xa;  raise ObjectSpriteException(&#xa;  &quot;ObjectSprite error ({}): filename '{}' is not a string&quot;.format(str(self),self.filename))&#xa;elif len(self.filename)==0:&#xa;  raise ObjectSpriteException(&quot;ObjectSprite error ({}): filename is empty&quot;.format(str(self),&#xa;  self.filename))&#xa;if len(self.filename)>0:&#xa;  if not os.path.exists(self.filename):&#xa;    raise ObjectSpriteException(&#xa;    &quot;ObjectSprite error ({}): filename '{}' not found&quot;.format(str(self),self.filename))&#xa;&#xa;return True&#xa;" id="sWAuFd4lgdqo"/>
    <sourcecode value="if isinstance(self.origin,str):&#xa;  raise ObjectSpriteException(&quot;ObjectSprite error ({}): Origin is a string&quot;.format(str(self)))&#xa;&#xa;the_origin=list(self.origin)&#xa;if len(the_origin)&lt;2:&#xa;  raise ObjectSpriteException(&quot;ObjectSprite error ({}): Origin does not have at least x, y&quot;.format(str(self)))&#xa;&#xa;return True&#xa;" id="VxhotOVjudd9"/>
    <sourcecode value="if self.collision_type not in self.COLLISION_TYPES:&#xa;  raise ObjectSpriteException(&#xa;  &quot;ObjectSprite error ({}): Collision type \&quot;{}\&quot; is unknown&quot;.format(str(self),self.collision_type))&#xa;return True&#xa;" id="HYPrkYKFT01K"/>
    <sourcecode value="if self.bounding_box_type not in self.BOUNDING_BOX_TYPES:&#xa;  raise ObjectSpriteException(&#xa;  &quot;ObjectSprite error ({}): Bounding box type \&quot;{}\&quot; is unknown&quot;.format(str(self),self.bounding_box_type))&#xa;if self.bounding_box_type==&quot;manual&quot;:&#xa;  self.check_manual_bounding_box_rect()&#xa;&#xa;return True&#xa;" id="2uxi5pZMNyB5"/>
    <sourcecode value="bound_rect=self.manual_bounding_box_rect&#xa;if not isinstance(bound_rect,pygame.Rect):&#xa;  raise(ObjectSpriteException(&quot;ObjectSprite error ({}):\;Bounding box dimensions:&#xa;&#xa;  is not a Rect&quot;.format(str(self),self.manual_bounding_box_rect)))&#xa;dim=(bound_rect.left,bound_rect.right,bound_rect.top,bound_rect.bottom)&#xa;if(bound_rect.left>bound_rect.right)or(bound_rect.top>bound_rect.bottom):&#xa;  raise ObjectSpriteException(&#xa;  &quot;ObjectSprite error ({}): Bounding box dimensions {} are not sane&quot;.format(str(self),dim))&#xa;if(bound_rect.left&lt;0)or(bound_rect.right&lt;0)or(bound_rect.top&lt;0)or(bound_rect.bottom&lt;0):&#xa;  raise ObjectSpriteException(&#xa;  &quot;ObjectSprite error ({}): Bounding box dimensions {} are not sane&quot;.format(str(self),dim))&#xa;return True&#xa;" id="yYLLra0rSxZX"/>
    <sourcecode value="self.check_filename()&#xa;self.check_origin()&#xa;self.check_collision_type()&#xa;self.check_bounding_box()&#xa;return True&#xa;" id="qirhyzewXzGM"/>
    <sourcecode value="ystr=&quot;- {}:\n&quot;.format(self.name)&#xa;ystr+=&quot;    filename: {}\n&quot;.format(self.filename)&#xa;ystr+=&quot;    smooth_edges: {}\n&quot;.format(self.smooth_edges)&#xa;ystr+=&quot;    preload_texture: {}\n&quot;.format(self.preload_texture)&#xa;ystr+=&quot;    transparency_pixel: {}\n&quot;.format(self.transparency_pixel)&#xa;ystr+=&quot;    origin: {}\n&quot;.format(str(list(self.origin)))&#xa;ystr+=&quot;    collision_type: {}\n&quot;.format(self.collision_type)&#xa;ystr+=&quot;    bounding_box_type: {}\n&quot;.format(self.bounding_box_type)&#xa;bounding_dict=:&#xa;  &quot;left&quot;:self.manual_bounding_box_rect.left,&#xa;  &quot;right&quot;:self.manual_bounding_box_rect.right,&quot;top&quot;:self.manual_bounding_box_rect.top,&quot;bottom&quot;:self.manual_bounding_box_rect.bottom&#xa;ystr+=&quot;    manual_bounding_box_rect: {}&quot;.format(str(bounding_dict))&#xa;return ystr&#xa;" id="OBVtfwsTch8b"/>
    <sourcecode value="return(isinstance(other,ObjectSprite)and&#xa;(self.name==other.name)and(self.filename==other.filename)and(self.smooth_edges==other.smooth_edges)and(self.preload_texture==other.preload_texture)and(self.transparency_pixel==other.transparency_pixel)and(list(self.origin)==list(other.origin))and(self.collision_type==other.collision_type)and(self.bounding_box_type==other.bounding_box_type)and(self.manual_bounding_box_rect==other.manual_bounding_box_rect))" id="Uh7N25KOEnFs"/>
    <sourcecode value="return(&quot;&lt;{} {} file={}>&quot;.format(type(self).__name__,self.name,&#xa;self.filename)" id="Z1UnojdWpzrc"/>
    <sourcecode value="self._delay_motion_updates=False&#xa;simple_object_instance.SimpleObjectInstance.__init__(self,kind,screen_dims,id_,settings,**kwargs)&#xa;pygame.sprite.DirtySprite.__init__(self)&#xa;self.dirty=0&#xa;self._visible=False&#xa;self.visible=kind.visible&#xa;self.source_rect=pygame.Rect(0,0,0,0)&#xa;self.image=kind.get_image()&#xa;if self.image:&#xa;  image_rect=self.image.get_rect()&#xa;  self.rect.width=image_rect.width&#xa;  self.rect.height=image_rect.height&#xa;  self.mask=self.kind.mask&#xa;  if self.kind.radius:&#xa;    self.radius=self.kind.radius&#xa;&#xa;  self.source_rect=pygame.Rect(self.kind.bounding_box_rect)&#xa;&#xa;self.blendmode=0&#xa;self.layer=kind.depth&#xa;self.start_position=(self.position.x,self.position.y)&#xa;self.action_name_to_method_map.update(:&#xa;&#xa;  'set_velocity_compass':self.set_velocity_compass,'move_toward_point':self.move_toward_point,'set_horizontal_speed':self.set_horizontal_speed,'set_vertical_speed':self.set_vertical_speed,&#xa;)&#xa;" id="3vkZZH2eG7Em"/>
    <sourcecode value="vis=self.symbols[&quot;visible&quot;]&#xa;return vis&#xa;" id="koMR1smcy5eI"/>
    <sourcecode value="vis=(is_visible is True)&#xa;if vis:&#xa;  self.dirty=2&#xa;&#xa;else:&#xa;  self.dirty=0&#xa;&#xa;self._visible=vis&#xa;self.symbols[&quot;visible&quot;]=vis&#xa;" id="gqQB7XTrJpJK"/>
    <sourcecode value="self.debug(&quot;_change_motion_x_y():&quot;)&#xa;xadj,yadj=get_vector_xy_from_speed_direction(self.symbols['speed'],&#xa;self.symbols['direction'])self.symbols['hspeed']=xadj&#xa;self.symbols['vspeed']=yadj&#xa;" id="GxfYkwsPxl03"/>
    <sourcecode value="return self.symbols['direction']&#xa;" id="3nQkXtVlo8JZ"/>
    <sourcecode value="new_value=value&#xa;if new_value>=360.0:&#xa;  new_value%=360.0&#xa;&#xa;if new_value&lt;=-360.0:&#xa;  new_value%=360.0&#xa;&#xa;if(new_value>-360.0)and(new_value&lt;0.0):&#xa;  new_value=(360.0+new_value)&#xa;&#xa;self.symbols['direction']=new_value&#xa;if not self._delay_motion_updates:&#xa;  self._change_motion_x_y()&#xa;&#xa;" id="N93rMV0QHO8o"/>
    <sourcecode value="return self.symbols['speed']&#xa;" id="cdmrzsdFTAJB"/>
    <sourcecode value="self.symbols['speed']=value&#xa;if not self._delay_motion_updates:&#xa;  self._change_motion_x_y()&#xa;&#xa;" id="kRmjXP572ry1"/>
    <sourcecode value="return self.symbols['friction']&#xa;" id="kpKkeHkMsyVa"/>
    <sourcecode value="self.symbols['friction']=float(value)&#xa;" id="8LgphO2PDNAp"/>
    <sourcecode value="return self.symbols['gravity']&#xa;" id="Q4wbP6R1waVn"/>
    <sourcecode value="self.symbols['gravity']=float(value)&#xa;" id="gE2aG37h73GW"/>
    <sourcecode value="return self.symbols['gravity_direction']&#xa;" id="23V77leFT9Hj"/>
    <sourcecode value="new_value=value&#xa;if new_value>=360.0:&#xa;  new_value%=360.0&#xa;&#xa;if new_value&lt;=-360.0:&#xa;  new_value%=360.0&#xa;&#xa;if(new_value>-360.0)and(new_value&lt;0.0):&#xa;  new_value=(360.0+new_value)&#xa;&#xa;self.symbols['gravity_direction']=new_value&#xa;" id="wd8Va2Lc6ojB"/>
    <sourcecode value="return self.symbols['hspeed']&#xa;" id="PcpTQXcys0zL"/>
    <sourcecode value="self._delay_motion_updates=True&#xa;self.speed,self.direction=get_speed_direction_from_xy(value,&#xa;self.vspeed)self._delay_motion_updates=False&#xa;self.symbols['hspeed']=value&#xa;" id="hlDL7VaU7OvW"/>
    <sourcecode value="return self.symbols['vspeed']&#xa;" id="s0exOZTH5w2a"/>
    <sourcecode value="self._delay_motion_updates=True&#xa;self.speed,self.direction=get_speed_direction_from_xy(self.hspeed,&#xa;value)self._delay_motion_updates=False&#xa;self.symbols['vspeed']=value&#xa;" id="OJVUdxfTvJRJ"/>
    <sourcecode value="self.debug(&quot;get_center_point():&quot;)&#xa;center_xy=(self.rect.x+self.rect.width/2.0,&#xa;self.rect.y+self.rect.height/2.0)return center_xy&#xa;" id="GTfBk4Ubu2Vj"/>
    <sourcecode value="self.debug(&quot;update():&quot;)&#xa;event_queued=None&#xa;if self.speed>0.0:&#xa;  self.position[0]+=self.symbols['hspeed']&#xa;  self.position[1]+=self.symbols['vspeed']&#xa;  self.rect.x=int(math.floor(self.position[0]+0.5))&#xa;  self.rect.y=int(math.floor(self.position[1]+0.5))&#xa;  in_x_bounds=(((self.rect.x+self.rect.width)>=0)and&#xa;  (self.rect.x&lt;=self.screen_dims[0]))in_y_bounds=(((self.rect.y+self.rect.height)>=0)and&#xa;  (self.rect.y&lt;=self.screen_dims[1]))if((self.rect.x&lt;=0&lt;=(self.rect.x+self.rect.width))or&#xa;  (self.rect.x&lt;=self.screen_dims[0]&lt;=(self.rect.x+self.rect.width))and in_y_bounds):&#xa;    event_queued=self.kind.EVENT_NAME_OBJECT_HASH[&quot;intersect_boundary&quot;](&quot;intersect_boundary&quot;,&#xa;:&#xa;      &quot;type&quot;:self.kind,&quot;instance&quot;:self&#xa;    )&#xa;  if((self.rect.y&lt;=0&lt;=(self.rect.y+self.rect.height))or&#xa;  (self.rect.y&lt;=self.screen_dims[1]&lt;=(self.rect.y+self.rect.width))and in_x_bounds):&#xa;    if not event_queued:&#xa;      event_queued=self.kind.EVENT_NAME_OBJECT_HASH[&quot;intersect_boundary&quot;](&quot;intersect_boundary&quot;,&#xa;:&#xa;        &quot;type&quot;:self.kind,&quot;instance&quot;:self&#xa;      )&#xa;&#xa;  if((self.rect.x>self.screen_dims[0])or&#xa;  ((self.rect.x+self.rect.width)&lt;0)):&#xa;    event_queued=self.kind.EVENT_NAME_OBJECT_HASH[&quot;outside_room&quot;](&quot;outside_room&quot;,&#xa;:&#xa;      &quot;type&quot;:self.kind,&quot;instance&quot;:self&#xa;    )&#xa;  if((self.rect.y>self.screen_dims[1])or&#xa;  ((self.rect.y+self.rect.height)&lt;0)):&#xa;    if not event_queued:&#xa;      event_queued=self.kind.EVENT_NAME_OBJECT_HASH[&quot;outside_room&quot;](&quot;outside_room&quot;,&#xa;:&#xa;        &quot;type&quot;:self.kind,&quot;instance&quot;:self&#xa;      )&#xa;&#xa;  self.debug(&quot;  {} inst {} new position: {} ({})&quot;.format(self.kind.name,&#xa;  self.inst_id,self.position,self.rect))&#xa;self._apply_gravity()&#xa;self._apply_friction()&#xa;if event_queued:&#xa;  self.game_engine.event_engine.queue_event(event_queued)&#xa;  self.debug(&quot;  {} inst {} transmitting {} event&quot;.format(self.kind.name,&#xa;  self.inst_id,event_queued))self.game_engine.event_engine.transmit_event(event_queued.name)&#xa;&#xa;" id="Qqpw9e8P7las"/>
    <sourcecode value="self.debug(&quot;_apply_gravity():&quot;)&#xa;" id="prfJ1glPVaMc"/>
    <sourcecode value="self.debug(&quot;_apply_friction():&quot;)&#xa;if(self.friction>0.0)and(self.speed>0.0):&#xa;  new_speed=self.speed-self.friction&#xa;  if new_speed&lt;0.0:&#xa;    new_speed=0.0&#xa;&#xa;  self.speed=new_speed&#xa;&#xa;" id="U4CPK0U7rAPq"/>
    <sourcecode value="self.debug(&quot;aim_toward_point():&quot;)&#xa;self.direction=direction_from_a_to_b(self.get_center_point(),pointxy)&#xa;" id="UGF5qufIwpiG"/>
    <sourcecode value="self.debug(&quot;set_velocity_compass(action={}):&quot;.format(action))&#xa;new_params=dict(action.action_data)&#xa;new_params[&quot;direction&quot;]=0.0&#xa;if new_params[&quot;compass_directions&quot;]!=&quot;NONE&quot;:&#xa;  dirs=new_params['compass_directions'].split('|')&#xa;  dir_count=len(dirs)&#xa;  new_dir=0&#xa;  if dir_count>1:&#xa;    new_dir=random.randint(0,dir_count-1)&#xa;&#xa;  if dirs[new_dir]in action.COMPASS_DIRECTIONS:&#xa;    new_params[&quot;direction&quot;]=action.COMPASS_DIRECTION_DEGREES[dirs[new_dir]]&#xa;&#xa;  elif dirs[new_dir]==&quot;STOP&quot;:&#xa;    new_params['speed']=0&#xa;&#xa;&#xa;del(new_params[&quot;compass_directions&quot;])&#xa;_apply_kwargs(new_params)&#xa;" id="ePxaFdp4nBj6"/>
    <sourcecode value="self.debug(&quot;move_toward_point(action={}):&quot;.format(action))&#xa;if&quot;destination&quot;in action.action_data:&#xa;  self._delay_motion_updates=True&#xa;  self.aim_toward_point(action.action_data[&quot;destination&quot;])&#xa;  self._apply_kwargs(:&#xa;    &quot;speed&quot;:action.action_data['speed']&#xa;  )&#xa;  self._delay_motion_updates=False&#xa;  self._change_motion_x_y()&#xa;&#xa;" id="IrF40wAu9Ld4"/>
    <sourcecode value="self.debug(&quot;set_horizontal_speed(action={}):&quot;.format(action))&#xa;relative=False&#xa;if&quot;relative&quot;in action.action_data:&#xa;  relative=action.action_data[&quot;relative&quot;]&#xa;&#xa;compass_name=action.action_data[&quot;horizontal_direction&quot;]&#xa;if compass_name in[&quot;LEFT&quot;,&quot;RIGHT&quot;]:&#xa;  speed=action.action_data[&quot;horizontal_speed&quot;]&#xa;  direction=action.COMPASS_DIRECTION_DEGREES[compass_name]&#xa;  horiz_vec=get_vector_xy_from_speed_direction(speed,direction)&#xa;  new_hspeed=horiz_vec[0]&#xa;  if relative:&#xa;    new_hspeed+=self.hspeed&#xa;&#xa;  self.hspeed=new_hspeed&#xa;&#xa;" id="YsvfDWj8Rxu6"/>
    <sourcecode value="self.debug(&quot;set_vertical_speed(action={}):&quot;.format(action))&#xa;relative=False&#xa;if&quot;relative&quot;in action.action_data:&#xa;  relative=action.action_data[&quot;relative&quot;]&#xa;&#xa;compass_name=action.action_data[&quot;vertical_direction&quot;]&#xa;if compass_name in[&quot;UP&quot;,&quot;DOWN&quot;]:&#xa;  speed=action.action_data[&quot;vertical_speed&quot;]&#xa;  direction=action.COMPASS_DIRECTION_DEGREES[compass_name]&#xa;  vert_vec=get_vector_xy_from_speed_direction(speed,direction)&#xa;  new_vspeed=vert_vec[1]&#xa;  if relative:&#xa;    new_vspeed+=self.vspeed&#xa;&#xa;  self.vspeed=new_vspeed&#xa;&#xa;" id="3rjVpeZYTX6z"/>
    <sourcecode value="action_params,handled_action=simple_object_instance.SimpleObjectInstance.execute_action(self,action,event)&#xa;if not handled_action:&#xa;  if action.name==&quot;jump_to_start&quot;:&#xa;    self.position=self.start_position&#xa;&#xa;  elif action.name==&quot;reverse_horizontal_speed&quot;:&#xa;    self.direction=-self.direction&#xa;&#xa;  elif action.name==&quot;reverse_vertical_speed&quot;:&#xa;    self.direction=180.0-self.direction&#xa;&#xa;  elif action.name==&quot;bounce_off_collider&quot;:&#xa;    if((action_params['precision']=='imprecise')or('normal'not in&#xa;    event.event_params.keys())):&#xa;      self.direction=180.0+self.direction&#xa;&#xa;    else:&#xa;      norm=np.array(event['normal'])&#xa;      if abs(norm[0])==abs(norm[1]):&#xa;        self.direction=180.0+self.direction&#xa;&#xa;      elif abs(norm[0])>abs(norm[1]):&#xa;        self.direction=-self.direction&#xa;&#xa;      else:&#xa;        self.direction=180.0-self.direction&#xa;&#xa;&#xa;&#xa;  else:&#xa;    self.debug(&quot;  {} inst {} execute_action {} fell through..&quot;.format(self.kind.name,&#xa;    self.inst_id,action.name))&#xa;&#xa;self._apply_kwargs(action_params)&#xa;" id="94fbZja43IIl"/>
    <sourcecode value="return&quot;&lt;{} {:03d} @ {} dir {} speed {}>&quot;.format(type(self).__name__,&#xa;self.inst_id,self.position,self.direction,self.speed" id="ETubkeyVCOZE"/>
    <sourcecode value="super(SimpleObjectInstance,self).__init__(type(self).__name__)&#xa;self.name=&quot;{}{}&quot;.format(kind.name,id_)&#xa;self.kind=kind&#xa;self.game_engine=kind.game_engine&#xa;self.screen_dims=list(screen_dims)&#xa;self.inst_id=id_&#xa;self.rect=pygame.Rect(0,0,0,0)&#xa;self._symbols=:&#xa;&#xa;  &quot;position&quot;:coordinate.Coordinate(0,0,self._update_position_x,self._update_position_y)&#xa;&#xa;self._symbols.update(self.INSTANCE_SYMBOLS)&#xa;self.symbols=SymbolTable()&#xa;for sym in self._symbols.keys():&#xa;  self.symbols[sym]=self._symbols[sym]&#xa;&#xa;attr_values=:&#xa;&#xa;&#xa;if settings is not None:&#xa;  attr_values.update(settings)&#xa;&#xa;attr_values.update(kwargs)&#xa;if len(attr_values.keys())>0:&#xa;  self._apply_kwargs(attr_values)&#xa;&#xa;self.action_name_to_method_map=:&#xa;&#xa;  'execute_code':self.execute_code,'if_variable_value':self.if_variable_value,'set_variable_value':self.set_variable_value,'destroy_object':self.destroy_object,&#xa;&#xa;self._code_block_id=0&#xa;" id="e5v7gofmlEWX"/>
    <sourcecode value="self.debug(&quot;_update_position_x():&quot;)&#xa;self._round_position_x_to_rect_x()&#xa;self.symbols['position.x']=self.position.x&#xa;" id="exH94op8PuS1"/>
    <sourcecode value="self.debug(&quot;_update_position_y():&quot;)&#xa;self._round_position_y_to_rect_y()&#xa;self.symbols['position.y']=self.position.y&#xa;" id="PNNhb7JF5aN9"/>
    <sourcecode value="self.debug(&quot;_round_position_x_to_rect_x():&quot;)&#xa;self.rect.x=math.floor(self.position.x+0.5)&#xa;" id="WkohxnzNAM4m"/>
    <sourcecode value="self.debug(&quot;_round_position_y_to_rect_y():&quot;)&#xa;self.rect.y=math.floor(self.position.y+0.5)&#xa;" id="Xlsf3CgXxUEu"/>
    <sourcecode value="self._code_block_id+=1&#xa;return self._code_block_id&#xa;" id="Q5qvxsVTdN6e"/>
    <sourcecode value="return self.symbols['position']&#xa;" id="t22Y8V8XbwSW"/>
    <sourcecode value="if len(value)>=2:&#xa;  self.debug(&quot;Set {}'s position to {}&quot;.format(self.name,value))&#xa;  my_pos=self.position&#xa;  my_pos.x=value[0]&#xa;  my_pos.y=value[1]&#xa;&#xa;" id="Zbc8AWA3WDad"/>
    <sourcecode value="self.debug(&quot;_apply_kwargs(kwargs={}):&quot;.format(str(kwargs)))&#xa;relative=False&#xa;if&quot;relative&quot;in kwargs.keys():&#xa;  relative=kwargs[&quot;relative&quot;]&#xa;&#xa;for kwarg in kwargs.keys():&#xa;  if kwarg=='relative':&#xa;    continue&#xa;&#xa;  attrs=kwarg.split('.')&#xa;  if hasattr(self,attrs[0]):&#xa;    new_val=kwargs[kwarg]&#xa;    if len(attrs)==1:&#xa;      old_val=getattr(self,kwarg)&#xa;      if relative:&#xa;        new_val+=getattr(self,kwarg)&#xa;&#xa;      if new_val!=old_val:&#xa;        setattr(self,kwarg,new_val)&#xa;&#xa;&#xa;    elif len(attrs)==2:&#xa;      main_attr=getattr(self,attrs[0])&#xa;      old_val=getattr(main_attr,attrs[1])&#xa;      if relative:&#xa;        new_val+=old_val&#xa;&#xa;      if new_val!=old_val:&#xa;        setattr(main_attr,attrs[1],new_val)&#xa;&#xa;&#xa;&#xa;  else:&#xa;    self.symbols[kwarg]=kwargs[kwarg]&#xa;&#xa;&#xa;" id="rmbLxBygp8xS"/>
    <sourcecode value="self.debug(&quot;_symbol_change_callback(sym={}, new_value={}):&quot;.format(sym,&#xa;new_value))handled_change=False&#xa;if hasattr(self,sym):&#xa;  setattr(self,sym,new_value)&#xa;  handled_change=True&#xa;&#xa;elif sym=='position.x':&#xa;  self.position.x=new_value&#xa;  handled_change=True&#xa;&#xa;elif sym=='position.y':&#xa;  self.position.y=new_value&#xa;  handled_change=True&#xa;&#xa;return handled_change&#xa;" id="C6k2CfStNF8o"/>
    <sourcecode value="self.debug(&quot;execute_code(action={}, keep_code_block={}):&quot;.format(action,&#xa;keep_code_block))if len(action.action_data['code'])>0:&#xa;  instance_handle_name=&quot;obj_{}_block{}&quot;.format(self.kind.name,self.code_block_id)&#xa;  if'language_engine_handle'not in action.runtime_data:&#xa;    action['language_engine_handle']=instance_handle_name&#xa;    self.game_engine.language_engine.register_code_block(&#xa;    instance_handle_name,action.action_data['code'])&#xa;&#xa;  local_symbols=SymbolTable(self.symbols,lambda s,v:self._symbol_change_callback(s,v))&#xa;  self.debug(&quot;{} inst {} syms before code block: {}&quot;.format(self.kind.name,&#xa;  self.inst_id,local_symbols.vars))self.game_engine.language_engine.execute_code_block(&#xa;  action['language_engine_handle'],local_symbols)&#xa;  self.debug(&quot;  syms after code block: {}&quot;.format(local_symbols.vars))&#xa;  if not keep_code_block:&#xa;    self.game_engine.language_engine.unregister_code_block(&#xa;    action['language_engine_handle'])&#xa;    del(action.runtime_data['language_engine_handle'])&#xa;&#xa;&#xa;" id="9aiiigHC5bnU"/>
    <sourcecode value="self.debug(&quot;if_variable_value(action={}):&quot;.format(action))&#xa;var_val=self.symbols.DEFAULT_UNINITIALIZED_VALUE&#xa;test_val=action['value']&#xa;test_result=False&#xa;if action['variable']in self.symbols.keys():&#xa;  var_val=self.symbols[action['variable']]&#xa;&#xa;elif action['variable']in self.game_engine.language_engine.global_symbol_table.keys():&#xa;  var_val=self.game_engine.language_engine.global_symbol_table[action['variable']]&#xa;&#xa;if isinstance(action['value'],str):&#xa;  if action['value']in self.symbols.keys():&#xa;    test_val=self.symbols[action['value']]&#xa;&#xa;  elif action['value']in self.game_engine.language_engine.global_symbol_table.keys():&#xa;    test_val=self.game_engine.language_engine.global_symbol_table[action['value']]&#xa;&#xa;&#xa;if action['test']==&quot;equals&quot;:&#xa;  test_result=(var_val==test_val)&#xa;&#xa;if action['test']==&quot;not_equals&quot;:&#xa;  test_result=(var_val!=test_val)&#xa;&#xa;if action['test']==&quot;less_than_or_equals&quot;:&#xa;  test_result=(var_val&lt;=test_val)&#xa;&#xa;if action['test']==&quot;less_than&quot;:&#xa;  test_result=(var_val&lt;test_val)&#xa;&#xa;if action['test']==&quot;greater_than_or_equals&quot;:&#xa;  test_result=(var_val>=test_val)&#xa;&#xa;if action['test']==&quot;greater_than&quot;:&#xa;  test_result=(var_val>test_val)&#xa;&#xa;self.debug(&quot;  {} inst {}: if {} {} {} is {}&quot;.format(self.kind.name,&#xa;self.inst_id,action['variable'],action['test'],test_val,test_result))action.action_result=test_result&#xa;" id="rKYaMhb71jkY"/>
    <sourcecode value="self.debug(&quot;set_variable_value(action={}):&quot;.format(action))&#xa;if action['is_global']:&#xa;  value_result=action.get_parameter_expression_result('value',&#xa;  self.game_engine.language_engine.global_symbol_table,self.game_engine.language_engine)self.debug(&quot;  {} inst {}: set global var {} to {}&quot;.format(self.kind.name,&#xa;  self.inst_id,action['variable'],value_result))self.game_engine.language_engine.global_symbol_table[action['variable']]=value_result&#xa;&#xa;else:&#xa;  value_result=action.get_parameter_expression_result('value',&#xa;  self.symbols,self.game_engine.language_engine)self.debug(&quot;  {} inst {}: set local var '{}' to {}&quot;.format(self.kind.name,&#xa;  self.inst_id,action['variable'],value_result))self.symbols[action['variable']]=value_result&#xa;&#xa;" id="fPTg6DD7BQz3"/>
    <sourcecode value="self.game_engine.event_engine.queue_event(&#xa;self.kind.EVENT_NAME_OBJECT_HASH[&quot;destroy&quot;](&quot;destroy&quot;,:&#xa;  &quot;type&quot;:self.kind,&quot;instance&quot;:self&#xa;))&#xa;self.game_engine.event_engine.transmit_event(&quot;destroy&quot;)&#xa;self.kind.add_instance_to_delete_list(self)&#xa;" id="3weCKbDI1gQa"/>
    <sourcecode value="self.debug(&quot;execute_action(action={}, event={}):&quot;.format(action,event))&#xa;action_params=:&#xa;&#xa;&#xa;handled_action=False&#xa;for param in action.action_data.keys():&#xa;  if param=='apply_to':&#xa;    continue&#xa;&#xa;  action_params[param]=action.get_parameter_expression_result(&#xa;  param,self.symbols,self.game_engine.language_engine)&#xa;if action.name in self.action_name_to_method_map.keys():&#xa;  self.action_name_to_method_map[action.name](action)&#xa;  handled_action=True&#xa;  self.debug(&quot;  {} inst {} execute_action {} handled&quot;.format(self.kind.name,&#xa;  self.inst_id,action.name))&#xa;return(action_params,handled_action)&#xa;" id="cw7bcWBqW6lq"/>
    <sourcecode value="return&quot;&lt;{} {:03d}>&quot;.format(type(self).__name__,self.inst_id)" id="ZcImdZWE9kLk"/>
    <sourcecode value="kwargs=super(CollideableObjectType,cls).gen_kwargs_from_yaml_obj(obj_name,obj_yaml,game_engine)&#xa;kwargs.update(:&#xa;&#xa;  &quot;visible&quot;:CollideableObjectType.DEFAULT_VISIBLE,&quot;solid&quot;:CollideableObjectType.DEFAULT_SOLID,&quot;depth&quot;:CollideableObjectType.DEFAULT_DEPTH,&quot;sprite&quot;:CollideableObjectType.DEFAULT_SPRITE_RESOURCE,&#xa;)&#xa;if&quot;visible&quot;in obj_yaml.keys():&#xa;  kwargs[&quot;visible&quot;]=(obj_yaml[&quot;visible&quot;]==True)&#xa;&#xa;if&quot;solid&quot;in obj_yaml.keys():&#xa;  kwargs[&quot;solid&quot;]=(obj_yaml[&quot;solid&quot;]==True)&#xa;&#xa;if&quot;depth&quot;in obj_yaml.keys():&#xa;  kwargs[&quot;depth&quot;]=int(obj_yaml[&quot;depth&quot;])&#xa;&#xa;if&quot;sprite&quot;in obj_yaml.keys():&#xa;  kwargs[&quot;sprite&quot;]=str(obj_yaml[&quot;sprite&quot;])&#xa;&#xa;return kwargs&#xa;" id="JGvdIEahPqQC"/>
    <sourcecode value="super(CollideableObjectType,self).__init__(object_name,game_engine,**kwargs)&#xa;self.sprite_resource=self.DEFAULT_SPRITE_RESOURCE&#xa;self.image=None&#xa;self.bounding_box_rect=None&#xa;self.mask=None&#xa;self.radius=None&#xa;self._visible=self.DEFAULT_VISIBLE&#xa;self.solid=self.DEFAULT_SOLID&#xa;self.depth=self.DEFAULT_DEPTH&#xa;self.group=pygame.sprite.LayeredDirty()&#xa;self[&quot;draw&quot;]=action_sequence.ActionSequence()&#xa;self[&quot;draw&quot;].append_action(action.DrawAction(&quot;draw_self&quot;))&#xa;self.game_engine.event_engine.register_event_handler(&quot;draw&quot;,self.draw)&#xa;if kwargs:&#xa;  for kw in kwargs:&#xa;    if kw==&quot;visible&quot;:&#xa;      self.visible=kwargs[&quot;visible&quot;]&#xa;&#xa;    if kw==&quot;solid&quot;:&#xa;      self.solid=(kwargs[&quot;solid&quot;]==True)&#xa;&#xa;    if kw==&quot;depth&quot;:&#xa;      self.depth=int(kwargs[&quot;depth&quot;])&#xa;&#xa;    if(kw==&quot;sprite&quot;)and kwargs[kw]:&#xa;      if kwargs['sprite']in self.game_engine.resources['sprites'].keys():&#xa;        assigned_sprite=self.game_engine.resources['sprites'][kwargs['sprite']]&#xa;        if not isinstance(assigned_sprite,object_sprite.ObjectSprite):&#xa;          raise(ObjectTypeException(&quot;'{}' is not a recognized sprite resource&quot;.format(kwargs[&quot;sprite&quot;]),&#xa;          self.error))&#xa;        self.sprite_resource=assigned_sprite&#xa;&#xa;&#xa;&#xa;&#xa;" id="Eh4Zc8juixJA"/>
    <sourcecode value="return self._visible&#xa;" id="ACscfaiHyfcK"/>
    <sourcecode value="vis=(is_visible is True)&#xa;if self._visible!=vis:&#xa;  self._visible=vis&#xa;  for instance in self.group:&#xa;    instance.visible=is_visible&#xa;&#xa;&#xa;" id="HmI2A3kIDdvs"/>
    <sourcecode value="yaml_str=&quot;- {}:\n&quot;.format(self.name)&#xa;yaml_str+=&quot;    visible: {}\n&quot;.format(self.visible)&#xa;yaml_str+=&quot;    solid: {}\n&quot;.format(self.solid)&#xa;yaml_str+=&quot;    depth: {:d}\n&quot;.format(self.depth)&#xa;yaml_str+=&quot;    sprite: {}\n&quot;.format(self.sprite_resource.name)&#xa;yaml_str+=&quot;    events:\n&quot;&#xa;for event_name in self.event_action_sequences:&#xa;  yaml_str+=&quot;      {}:\n&quot;.format(event_name)&#xa;  yaml_str+=self.event_action_sequences[event_name].to_yaml(8)&#xa;&#xa;return yaml_str&#xa;" id="tXA685wJh6Tv"/>
    <sourcecode value="self.debug(&quot;create_rectangle_mask(orig_rect={}):&quot;.format(orig_rect))&#xa;self.mask=pygame.mask.Mask((orig_rect.width,orig_rect.height))&#xa;self.mask.fill()&#xa;" id="RAeB0R3rxDv5"/>
    <sourcecode value="self.debug(&quot;get_disk_radius(precise_mask={}, orig_rect={}):&quot;.format(precise_mask,orig_rect))&#xa;disk_mask_center=(orig_rect.width/2,orig_rect.height/2)&#xa;bound_rect=self.bounding_box_rect&#xa;bound_right=bound_rect.x+bound_rect.width&#xa;bound_bottom=bound_rect.y+bound_rect.height&#xa;left_center_distance=abs(disk_mask_center[0]-bound_rect.x)&#xa;right_center_distance=abs(disk_mask_center[0]-bound_right)&#xa;top_center_distance=abs(disk_mask_center[1]-bound_rect.y)&#xa;bottom_center_distance=abs(disk_mask_center[1]-bound_bottom)&#xa;largest_x_distance=max(left_center_distance,right_center_distance)&#xa;largest_y_distance=max(top_center_distance,bottom_center_distance)&#xa;max_bound_radius=math.sqrt(largest_x_distance*largest_x_distance+&#xa;largest_y_distance*largest_y_distance)max_r=0&#xa;for y in range(bound_rect.y,bound_rect.height):&#xa;  for x in range(bound_rect.x,bound_rect.width):&#xa;    circ_x=disk_mask_center[0]-x&#xa;    circ_y=disk_mask_center[1]-y&#xa;    if precise_mask.get_at((x,y))>0:&#xa;      r=math.sqrt(circ_x*circ_x+circ_y*circ_y)&#xa;      if r>max_r:&#xa;        max_r=r&#xa;&#xa;&#xa;&#xa;&#xa;bound_radius=max_bound_radius&#xa;if(max_r>0)and(max_r&lt;max_bound_radius):&#xa;  bound_radius=max_r&#xa;&#xa;radius=int(math.ceil(bound_radius))&#xa;self.radius=radius&#xa;return radius&#xa;" id="0CqxQl2hbPfX"/>
    <sourcecode value="self.debug(&quot;create_disk_mask(orig_rect={}):&quot;.format(orig_rect))&#xa;disk_mask_center=(orig_rect.width/2,orig_rect.height/2)&#xa;disk_mask_surface=pygame.Surface((orig_rect.width,orig_rect.height),&#xa;depth=8)disk_mask_surface.set_colorkey(pygame.Color(&quot;;disk_mask_surface.fill(pygame.Color(&quot;;pygame.draw.circle(disk_mask_surface,pygame.Color(&quot;;self.mask=mask_from_surface(disk_mask_surface)&#xa;" id="7YMmCa3gkGES"/>
    <sourcecode value="self.debug(&quot;get_image():&quot;)&#xa;if self.sprite_resource:&#xa;  if not self.sprite_resource.image:&#xa;    self.sprite_resource.load_graphic()&#xa;&#xa;  if not self.mask:&#xa;    self.info(&quot;  {}: create collision mask&quot;.format(self.name))&#xa;    with logging_object.Indented(self):&#xa;      original_image=self.sprite_resource.image&#xa;      precise_mask=mask_from_surface(original_image)&#xa;      bound_rect=self.sprite_resource.bounding_box_rect&#xa;      self.image=original_image.copy()&#xa;      orig_rect=original_image.get_rect()&#xa;      if(orig_rect.width==0)or(orig_rect.height==0):&#xa;        raise(ObjectTypeException(&quot;Found broken sprite resource when creating instance&quot;,self.error))&#xa;&#xa;      if(bound_rect.width==0)or(bound_rect.height==0):&#xa;        bound_rect=orig_rect&#xa;&#xa;      self.bounding_box_rect=bound_rect&#xa;      self.info(&quot;  bounded dimensions: {}&quot;.format(bound_rect))&#xa;      self.info(&quot;  Sprite collision type: {}&quot;.format(self.sprite_resource.collision_type))&#xa;      self.info(&quot;  Sprite dimensions: {}&quot;.format(orig_rect))&#xa;      if self.sprite_resource.collision_type==&quot;precise&quot;:&#xa;        self.mask=precise_mask&#xa;&#xa;      elif self.sprite_resource.collision_type==&quot;rectangle&quot;:&#xa;        self.create_rectangle_mask(orig_rect)&#xa;&#xa;      elif self.sprite_resource.collision_type==&quot;disk&quot;:&#xa;        self.get_disk_radius(precise_mask,orig_rect)&#xa;        self.create_disk_mask(orig_rect)&#xa;&#xa;      else:&#xa;        self.create_rectangle_mask(orig_rect)&#xa;&#xa;      self.game_engine.event_engine.queue_event(&#xa;      self.EVENT_NAME_OBJECT_HASH[&quot;image_loaded&quot;](&quot;image_loaded&quot;,:&#xa;        &quot;type&quot;:self,&quot;sprite&quot;:self.sprite_resource&#xa;      ))&#xa;      self.info(&quot;  Queued 'image_loaded' event&quot;)&#xa;&#xa;&#xa;  return self.image&#xa;&#xa;else:&#xa;  return None&#xa;&#xa;" id="5cLpsZFUKOiS"/>
    <sourcecode value="self.debug(&quot;collision_check(other_obj_types={}):&quot;.format(other_obj_types))&#xa;collision_types_queued=[]&#xa;for other_obj in other_obj_types:&#xa;  other_obj.group=other_obj.group&#xa;  if len(other_obj.group)==0:&#xa;    continue&#xa;&#xa;  if(len(self.group)==1)and self.name==other_obj.name:&#xa;    continue&#xa;&#xa;  collision_map=pygame.sprite.groupcollide(self.group,&#xa;  other_obj.group,0,0,collided=sprite_collision_test)for collider in collision_map.keys():&#xa;    collision_normal=None&#xa;    for other_inst in collision_map[collider]:&#xa;      overlap=get_mask_overlap(collider,other_inst)&#xa;      collision_normal=get_collision_normal(collider,other_inst)&#xa;      if other_inst.kind.solid and collision_normal:&#xa;        divisor=float(dot_product(collision_normal,collision_normal))&#xa;        distance=0&#xa;        if divisor!=0:&#xa;          distance=(float(overlap)/divisor+0.5)&#xa;&#xa;        adj_x=math.floor(distance*collision_normal[0]+0.5)&#xa;        adj_y=math.floor(distance*collision_normal[1]+0.5)&#xa;        collider.position.x+=adj_x&#xa;        collider.position.y+=adj_y&#xa;&#xa;&#xa;    collision_name=&quot;collision_{}&quot;.format(other_obj.name)&#xa;    if collision_name not in collision_types_queued:&#xa;      collision_types_queued.append(collision_name)&#xa;&#xa;    self.info(&quot;{} inst {}: Queue collision {}&quot;.format(self.name,&#xa;    collider.inst_id,collision_name))collision_event_info=:&#xa;&#xa;      &quot;type&quot;:self,&quot;instance&quot;:collider,&quot;others&quot;:collision_map[collider]&#xa;&#xa;    if collision_normal:&#xa;      collision_event_info['normal']=collision_normal&#xa;&#xa;    self.game_engine.event_engine.queue_event(&#xa;    self.EVENT_NAME_OBJECT_HASH[&quot;collision&quot;](collision_name,collision_event_info))&#xa;&#xa;&#xa;return collision_types_queued&#xa;" id="myPET0tYcELS"/>
    <sourcecode value="self.debug(&quot;update():&quot;)&#xa;if len(self.group)>0:&#xa;  self.group.update()&#xa;&#xa;if len(self.instance_delete_list)>0:&#xa;  self.group.remove(self.instance_delete_list)&#xa;  self.instance_delete_list=[]&#xa;&#xa;" id="kSvKeElPngSj"/>
    <sourcecode value="self.debug(&quot;draw():&quot;)&#xa;if(len(self.group)>0)and self.visible:&#xa;  for action in self.event_action_sequences[&quot;draw&quot;].get_next_action():&#xa;    if action.name==&quot;draw_self&quot;:&#xa;      self.group.draw(self.game_engine.draw_surface)&#xa;&#xa;&#xa;&#xa;" id="Ax95giUOANho"/>
    <sourcecode value="screen_dims=(screen.get_width(),screen.get_height())&#xa;new_instance=object_instance.ObjectInstance(self,screen_dims,&#xa;self._id,settings,**kwargs)self.group.add(new_instance)&#xa;return new_instance&#xa;" id="9G9Hbq6DGHaM"/>
    <sourcecode value="self.debug(&quot;get_applied_instance_list(action={}, event={}):&quot;.format(action,event))&#xa;apply_to_instances=[]&#xa;if(('instance'in event.event_params)and&#xa;(event.event_params['instance']in self.group)):&#xa;  apply_to_instances=[event['instance']]&#xa;&#xa;if'apply_to'not in action.action_data:&#xa;  return apply_to_instances&#xa;&#xa;if action[&quot;apply_to&quot;]==&quot;other&quot;:&#xa;  if'others'in event:&#xa;    apply_to_instances=event['others']&#xa;&#xa;&#xa;elif action[&quot;apply_to&quot;]!=&quot;self&quot;:&#xa;  if action[&quot;apply_to&quot;]in self.game_engine.resources['objects'].keys():&#xa;    apply_to_instances=list(self.game_engine.resources['objects'][action[&quot;apply_to&quot;]].group)&#xa;&#xa;&#xa;return apply_to_instances&#xa;" id="o3m3d0qMWLBO"/>
    <sourcecode value="self.debug(&quot;handle_instance_event(event={}):&quot;.format(event))&#xa;self.execute_action_sequence(event)&#xa;" id="ZWabzQFJKQA4"/>
    <sourcecode value="if not super(CollideableObjectType,self).handle_mouse_event(event):&#xa;  clicked=self.group.get_sprites_at(event['position'])&#xa;  if len(clicked)>0:&#xa;    self.execute_action_sequence(event,clicked)&#xa;&#xa;&#xa;" id="MAdgYnj6nJnR"/>
    <sourcecode value="self.debug(&quot;handle_step_event(event={}):&quot;.format(event))&#xa;self.execute_action_sequence(event,targets=[inst for inst in self.group])&#xa;" id="ZaqMtbnMpTKc"/>
    <sourcecode value="rpr=&quot;&lt;{} '{}' sprite='{}'>&quot;.format(type(self).__name__,self.name,self.sprite_resource)&#xa;return rpr&#xa;" id="qUAfxSHV2S2K"/>
    <sourcecode value="if logger:&#xa;  logger(msg)&#xa;&#xa;self.msg=msg&#xa;" id="vzOokZibYRpF"/>
    <sourcecode value="stack=[]&#xa;op_stack=[]&#xa;item_list=tok_list&#xa;if isinstance(tok_list,str):&#xa;  item_list=[tok_list]&#xa;&#xa;for tok in item_list:&#xa;  val=None&#xa;  if isinstance(tok,str):&#xa;    minfo=FLOAT_RE.search(tok)&#xa;    if minfo:&#xa;      val=float(tok)&#xa;&#xa;    else:&#xa;      minfo=INT_RE.search(tok)&#xa;      if minfo:&#xa;        val=int(tok)&#xa;&#xa;      else:&#xa;        val=str(tok)&#xa;&#xa;&#xa;    if val in OPERATORS:&#xa;      while len(op_stack)>0:&#xa;        prec_diff=precedence_check(val,op_stack[0])&#xa;        if(((ASSOCIATIVITY[op_stack[0]]==RIGHT)and&#xa;        (prec_diff&lt;0))or((ASSOCIATIVITY[op_stack[0]]==LEFT)and(prec_diff&lt;=0))):&#xa;          stack.append(op_stack[0])&#xa;          if len(op_stack)>1:&#xa;            op_stack=op_stack[1:]&#xa;&#xa;          else:&#xa;            op_stack=[]&#xa;&#xa;&#xa;        else:&#xa;          break&#xa;&#xa;&#xa;      op_stack.insert(0,val)&#xa;&#xa;    elif isinstance(val,str):&#xa;      val=&quot;_&quot;+val&#xa;      stack.append(val)&#xa;&#xa;    else:&#xa;      stack.append(val)&#xa;&#xa;&#xa;  elif len(tok)>0:&#xa;    stack=stack+convert_infix_to_postfix(tok,replacement_ops)&#xa;&#xa;&#xa;while len(op_stack)>0:&#xa;  stack.append(op_stack[0])&#xa;  if len(op_stack)>1:&#xa;    op_stack=op_stack[1:]&#xa;&#xa;  else:&#xa;    op_stack=[]&#xa;&#xa;&#xa;if len(op_stack)>0:&#xa;  raise ExpressionException(&quot;Stack underflow in token list '{}'&quot;.format(tok_list))&#xa;&#xa;if replacement_ops:&#xa;  for idx in range(len(stack)):&#xa;    if stack[idx]in replacement_ops:&#xa;      stack[idx]=replacement_ops[stack[idx]]&#xa;&#xa;&#xa;&#xa;return stack&#xa;" id="GAHQEKX0hKVy"/>
    <sourcecode value="prec_a=-1&#xa;prec_b=-1&#xa;for prec in PRECEDENCE_TABLE:&#xa;  if a==prec[0]:&#xa;    prec_a=prec[1]&#xa;&#xa;  if b==prec[0]:&#xa;    prec_b=prec[1]&#xa;&#xa;  if(prec_a>=0)and(prec_b>=0):&#xa;    break&#xa;&#xa;&#xa;diff=prec_a-prec_b&#xa;return diff&#xa;" id="jBC39uiRgj0M"/>
    <sourcecode value="if sprite_a==sprite_b:&#xa;  return False&#xa;&#xa;if not sprite_a or not sprite_b:&#xa;  return False&#xa;&#xa;if not sprite_a.image or not sprite_b.image:&#xa;  return False&#xa;&#xa;coll_types=(sprite_a.kind.sprite_resource.collision_type,&#xa;sprite_b.kind.sprite_resource.collision_type)if coll_types==(&quot;rectangle&quot;,&quot;rectangle&quot;):&#xa;  return pygame.sprite.collide_rect(sprite_a,sprite_b)&#xa;&#xa;elif coll_types==(&quot;disk&quot;,&quot;disk&quot;):&#xa;  return pygame.sprite.collide_circle(sprite_a,sprite_b)&#xa;&#xa;else:&#xa;  return pygame.sprite.collide_mask(sprite_a,sprite_b)&#xa;&#xa;" id="hg7wWmT3boGp"/>
    <sourcecode value="mask=pygame.mask.Mask(surface.get_size())&#xa;key=surface.get_colorkey()&#xa;if key:&#xa;  for y in range(surface.get_height()):&#xa;    for x in range(surface.get_width()):&#xa;      if surface.get_at((x,y))!=key:&#xa;        mask.set_at((x,y),1)&#xa;&#xa;&#xa;&#xa;&#xa;else:&#xa;  for y in range(surface.get_height()):&#xa;    for x in range(surface.get_width()):&#xa;      if surface.get_at((x,y))[3]>threshold:&#xa;        mask.set_at((x,y),1)&#xa;&#xa;&#xa;&#xa;&#xa;return mask&#xa;" id="zg5jOV8G0BrD"/>
    <sourcecode value="offset=get_offset_between_instances(instance_a,instance_b)&#xa;overlap=get_mask_overlap(instance_a,instance_b)&#xa;if overlap==0:&#xa;  return None&#xa;&#xa;nx=(instance_a.kind.mask.overlap_area(instance_b.kind.mask,&#xa;(offset[0]+1,offset[1]))-instance_a.kind.mask.overlap_area(instance_b.kind.mask,(offset[0]-1,offset[1])))ny=(instance_a.kind.mask.overlap_area(instance_b.kind.mask,&#xa;(offset[0],offset[1]+1))-instance_a.kind.mask.overlap_area(instance_b.kind.mask,(offset[0],offset[1]-1)))if(nx==0)and(ny==0):&#xa;  return None&#xa;&#xa;n=(nx,ny)&#xa;return n&#xa;" id="H0iSTRfB3vL6"/>
    <sourcecode value="instance_a_pos=(instance_a.rect.x,instance_a.rect.y)&#xa;instance_b_pos=(instance_b.rect.x,instance_b.rect.y)&#xa;offset=(instance_b_pos[0]-instance_a_pos[0],&#xa;instance_b_pos[1]-instance_a_pos[1])return offset&#xa;" id="SxrFvH3GyuUy"/>
    <sourcecode value="offset=get_offset_between_instances(instance_a,instance_b)&#xa;overlap=instance_a.kind.mask.overlap_area(instance_b.kind.mask,offset)&#xa;return overlap&#xa;" id="eIP0lhfYRkQj"/>
    <sourcecode value="return v1[0]*v2[0]+v1[1]*v2[1]&#xa;" id="VEJuB7AIGcD3"/>
    <sourcecode value="new_sound_list=[]&#xa;yaml_info=yaml.load(yaml_stream)&#xa;if yaml_info:&#xa;  for top_level in yaml_info:&#xa;    sound_args=:&#xa;&#xa;&#xa;    sound_name=top_level.keys()[0]&#xa;    yaml_info_hash=top_level[sound_name]&#xa;    if'sound_file'in yaml_info_hash.keys():&#xa;      sound_args['sound_file']=yaml_info_hash['sound_file']&#xa;&#xa;    if'sound_type'in yaml_info_hash.keys():&#xa;      sound_args['sound_type']=yaml_info_hash['sound_type']&#xa;&#xa;    if'preload'in yaml_info_hash.keys():&#xa;      sound_args['preload']=yaml_info_hash['preload']&#xa;&#xa;    new_sound_list.append(Sound(sound_name,**sound_args))&#xa;    new_sound_list[-1].check()&#xa;&#xa;&#xa;return new_sound_list&#xa;" id="UIpAD84ovrBV"/>
    <sourcecode value="if sound_name:&#xa;  self.name=sound_name&#xa;&#xa;else:&#xa;  self.name=self.DEFAULT_SOUND_PREFIX&#xa;&#xa;self.sound_file=None&#xa;self.sound_type=&quot;effect&quot;&#xa;self.preload=True&#xa;self.loaded=False&#xa;self.audio=None&#xa;self.channel=None&#xa;if&quot;sound_file&quot;in kwargs:&#xa;  self.sound_file=kwargs[&quot;sound_file&quot;]&#xa;&#xa;if((&quot;sound_type&quot;in kwargs)and&#xa;(kwargs[&quot;sound_type&quot;]in self.SOUND_TYPES)):&#xa;  self.sound_type=kwargs[&quot;sound_type&quot;]&#xa;&#xa;if&quot;preload&quot;in kwargs:&#xa;  self.preload=(kwargs[&quot;preload&quot;]==True)&#xa;&#xa;" id="4mApVHafGmEw"/>
    <sourcecode value="if self.sound_file and self.preload:&#xa;  self.load_file()&#xa;&#xa;" id="gFtw15qppy0v"/>
    <sourcecode value="if not os.path.exists(self.sound_file):&#xa;  raise SoundException(&quot;SoundException: Sound file '{}' not found.&quot;.format(self.sound_file))&#xa;&#xa;if not self.loaded:&#xa;  self.audio=pygame.mixer.Sound(self.sound_file)&#xa;  self.loaded=True&#xa;&#xa;" id="BUqwvXAbm2Vm"/>
    <sourcecode value="if not self.loaded:&#xa;  self.load_file()&#xa;&#xa;play_loops=0&#xa;if loop:&#xa;  play_loops=-1&#xa;&#xa;self.channel=self.audio.play(loops=play_loops)&#xa;" id="e0cm9qkKJaFE"/>
    <sourcecode value="self.audio.stop()&#xa;" id="dfmwE19JPvBm"/>
    <sourcecode value="playing_sound=self.channel.get_sound()&#xa;return playing_sound==self.audio&#xa;" id="WvWrkPLN37IH"/>
    <sourcecode value="ystr=&quot;- {}:\n&quot;.format(self.name)&#xa;if self.sound_file:&#xa;  ystr+=&quot;    sound_file: {}\n&quot;.format(self.sound_file)&#xa;&#xa;ystr+=&quot;    sound_type: {}\n&quot;.format(self.sound_type)&#xa;ystr+=&quot;    preload: {}\n&quot;.format(str(self.preload))&#xa;return ystr&#xa;" id="By359lTfezUM"/>
    <sourcecode value="if self.sound_type not in self.SOUND_TYPES:&#xa;  raise SoundException(&quot;Sound: Unknown sound type '{}'&quot;.format(self.sound_type))&#xa;&#xa;return True&#xa;" id="zgFTAarLWuQd"/>
    <sourcecode value="return self.check_type()&#xa;" id="IHSfWsOUYevj"/>
    <sourcecode value="return(isinstance(other,Sound)and&#xa;(self.name==other.name)and(self.sound_file==other.sound_file)and(self.sound_type==other.sound_type)and(self.preload==other.preload)" id="O8PvO1NhInKn"/>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
